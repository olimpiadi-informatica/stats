{"version":3,"file":"static/chunks/c24cc598.99f541f7db00165f.js","mappings":"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AAA,KACA2e,YAAA1b,EACA6b,cAAA7b,EACA8b,aAAA,KACAH,SAAA3b,EACA4b,aAAA5b,EACAyV,QAAA,KACAsG,SAAA/b,EACAgc,YAAAhc,EACAic,YAAAjc,EACAimB,QAAA,KACAC,WAAA,KACAC,WAAA,KACAvT,MAAA,KACAwT,OAAA,KACAlK,YAAA,KACAC,YAAA,KACAt7B,EAAA,KACAwlC,GAAA,KACAC,GAAA,KACAC,iBAAA,KACAnK,QAAApc,EACAwmB,EAAA,KACAC,GAAA,KACAC,GAAA,KACAC,iBAAA,KACAC,EAAA,KACAC,WAAA,IACA,CACA,GAOAC,GAAA,kBACAC,GAAA,UACAC,GAAA,SA+CA,SAAAC,GAAAC,CAAA,EACA,UAAAA,EAAAz6B,WAAA,EACA,CAMA,SAAA06B,GAAAD,CAAA,EACA,OAAAA,EAAAE,MAAA,IAAAvxB,WAAA,EACA,CAOA,IAAAwxB,GAAA9nB,EAAA,CAAAuC,GAAAR,GAAAc,GAAAG,GAAAkD,GAAA,SACA6hB,GAAA/nB,EAAA,CAAAuC,GAAAR,GAAAc,GAAAG,GAAA+T,GAAA,QAmDAiR,GAAA,GAAgBtmB,cAAA,CAoMhBumB,GAAA,CACA,QACA,MACA,SACA,QACA,SACA,QACA,SACA,OACA,OACA,SACA,MACA,SACA,QACA,SACA,OACA,KACA,SACA,QACA,SACA,OACA,KACA,SACA,SACA,QACA,SACA,SACA,SACA,OACA,OACA,MACA,QACA,SACA,QACA,SACA,OACA,SACA,SACA,QACA,QACA,QACA,SACA,MACA,QACA,SACA,OACA,SACA,SACA,QACA,OACA,OACA,SACA,MACA,SACA,SACA,QACA,SACA,MACA,OACA,SACA,SACA,SACA,KACA,SACA,QACA,QACA,SACA,SACA,OACA,QACA,KACA,OACA,QACA,SACA,OACA,MACA,SACA,SACA,QACA,SACA,OACA,OACA,SACA,SACA,OACA,OACA,SACA,QACA,OACA,QACA,MACA,OACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,QACA,SACA,MACA,OACA,SACA,MACA,OACA,CAO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","sources":["webpack://_N_E/./node_modules/@shikijs/core/dist/index.mjs"],"sourcesContent":["import { FontStyle } from './types.mjs';\nimport { INITIAL, EncodedTokenMetadata, Registry as Registry$1, Theme } from '@shikijs/vscode-textmate';\nexport { EncodedTokenMetadata as StackElementMetadata } from '@shikijs/vscode-textmate';\nimport { onigurumaToRegexp } from 'oniguruma-to-js';\nimport { rewrite } from 'regex';\n\nclass ShikiError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'ShikiError';\n    }\n}\n\nfunction getHeapMax() {\n    return 2147483648;\n}\nfunction _emscripten_get_now() {\n    return typeof performance !== 'undefined' ? performance.now() : Date.now();\n}\nconst alignUp = (x, multiple) => x + ((multiple - (x % multiple)) % multiple);\nasync function main(init) {\n    let wasmMemory;\n    let buffer;\n    const binding = {};\n    function updateGlobalBufferAndViews(buf) {\n        buffer = buf;\n        binding.HEAPU8 = new Uint8Array(buf);\n        binding.HEAPU32 = new Uint32Array(buf);\n    }\n    function _emscripten_memcpy_big(dest, src, num) {\n        binding.HEAPU8.copyWithin(dest, src, src + num);\n    }\n    function emscripten_realloc_buffer(size) {\n        try {\n            wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16);\n            updateGlobalBufferAndViews(wasmMemory.buffer);\n            return 1;\n        }\n        catch { }\n    }\n    function _emscripten_resize_heap(requestedSize) {\n        const oldSize = binding.HEAPU8.length;\n        requestedSize = requestedSize >>> 0;\n        const maxHeapSize = getHeapMax();\n        if (requestedSize > maxHeapSize)\n            return false;\n        for (let cutDown = 1; cutDown <= 4; cutDown *= 2) {\n            let overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);\n            overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n            const newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n            const replacement = emscripten_realloc_buffer(newSize);\n            if (replacement)\n                return true;\n        }\n        return false;\n    }\n    const UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;\n    function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead = 1024) {\n        const endIdx = idx + maxBytesToRead;\n        let endPtr = idx;\n        while (heapOrArray[endPtr] && !(endPtr >= endIdx))\n            ++endPtr;\n        if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n            return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n        }\n        let str = '';\n        while (idx < endPtr) {\n            let u0 = heapOrArray[idx++];\n            if (!(u0 & 128)) {\n                str += String.fromCharCode(u0);\n                continue;\n            }\n            const u1 = heapOrArray[idx++] & 63;\n            if ((u0 & 224) === 192) {\n                str += String.fromCharCode(((u0 & 31) << 6) | u1);\n                continue;\n            }\n            const u2 = heapOrArray[idx++] & 63;\n            if ((u0 & 240) === 224) {\n                u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n            }\n            else {\n                u0 = ((u0 & 7) << 18)\n                    | (u1 << 12)\n                    | (u2 << 6)\n                    | (heapOrArray[idx++] & 63);\n            }\n            if (u0 < 65536) {\n                str += String.fromCharCode(u0);\n            }\n            else {\n                const ch = u0 - 65536;\n                str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023));\n            }\n        }\n        return str;\n    }\n    function UTF8ToString(ptr, maxBytesToRead) {\n        return ptr ? UTF8ArrayToString(binding.HEAPU8, ptr, maxBytesToRead) : '';\n    }\n    const asmLibraryArg = {\n        emscripten_get_now: _emscripten_get_now,\n        emscripten_memcpy_big: _emscripten_memcpy_big,\n        emscripten_resize_heap: _emscripten_resize_heap,\n        fd_write: () => 0,\n    };\n    async function createWasm() {\n        const info = {\n            env: asmLibraryArg,\n            wasi_snapshot_preview1: asmLibraryArg,\n        };\n        const exports = await init(info);\n        wasmMemory = exports.memory;\n        updateGlobalBufferAndViews(wasmMemory.buffer);\n        Object.assign(binding, exports);\n        binding.UTF8ToString = UTF8ToString;\n    }\n    await createWasm();\n    return binding;\n}\n\n/* ---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *-------------------------------------------------------- */\nlet onigBinding = null;\n// let defaultDebugCall = false\nfunction throwLastOnigError(onigBinding) {\n    throw new ShikiError(onigBinding.UTF8ToString(onigBinding.getLastOnigError()));\n}\nclass UtfString {\n    static _utf8ByteLength(str) {\n        let result = 0;\n        for (let i = 0, len = str.length; i < len; i++) {\n            const charCode = str.charCodeAt(i);\n            let codepoint = charCode;\n            let wasSurrogatePair = false;\n            if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n                // Hit a high surrogate, try to look for a matching low surrogate\n                if (i + 1 < len) {\n                    const nextCharCode = str.charCodeAt(i + 1);\n                    if (nextCharCode >= 0xDC00 && nextCharCode <= 0xDFFF) {\n                        // Found the matching low surrogate\n                        codepoint = (((charCode - 0xD800) << 10) + 0x10000) | (nextCharCode - 0xDC00);\n                        wasSurrogatePair = true;\n                    }\n                }\n            }\n            if (codepoint <= 0x7F)\n                result += 1;\n            else if (codepoint <= 0x7FF)\n                result += 2;\n            else if (codepoint <= 0xFFFF)\n                result += 3;\n            else\n                result += 4;\n            if (wasSurrogatePair)\n                i++;\n        }\n        return result;\n    }\n    utf16Length;\n    utf8Length;\n    utf16Value;\n    utf8Value;\n    utf16OffsetToUtf8;\n    utf8OffsetToUtf16;\n    constructor(str) {\n        const utf16Length = str.length;\n        const utf8Length = UtfString._utf8ByteLength(str);\n        const computeIndicesMapping = (utf8Length !== utf16Length);\n        const utf16OffsetToUtf8 = computeIndicesMapping ? new Uint32Array(utf16Length + 1) : null;\n        if (computeIndicesMapping)\n            utf16OffsetToUtf8[utf16Length] = utf8Length;\n        const utf8OffsetToUtf16 = computeIndicesMapping ? new Uint32Array(utf8Length + 1) : null;\n        if (computeIndicesMapping)\n            utf8OffsetToUtf16[utf8Length] = utf16Length;\n        const utf8Value = new Uint8Array(utf8Length);\n        let i8 = 0;\n        for (let i16 = 0; i16 < utf16Length; i16++) {\n            const charCode = str.charCodeAt(i16);\n            let codePoint = charCode;\n            let wasSurrogatePair = false;\n            if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n                // Hit a high surrogate, try to look for a matching low surrogate\n                if (i16 + 1 < utf16Length) {\n                    const nextCharCode = str.charCodeAt(i16 + 1);\n                    if (nextCharCode >= 0xDC00 && nextCharCode <= 0xDFFF) {\n                        // Found the matching low surrogate\n                        codePoint = (((charCode - 0xD800) << 10) + 0x10000) | (nextCharCode - 0xDC00);\n                        wasSurrogatePair = true;\n                    }\n                }\n            }\n            if (computeIndicesMapping) {\n                utf16OffsetToUtf8[i16] = i8;\n                if (wasSurrogatePair)\n                    utf16OffsetToUtf8[i16 + 1] = i8;\n                if (codePoint <= 0x7F) {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                }\n                else if (codePoint <= 0x7FF) {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                    utf8OffsetToUtf16[i8 + 1] = i16;\n                }\n                else if (codePoint <= 0xFFFF) {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                    utf8OffsetToUtf16[i8 + 1] = i16;\n                    utf8OffsetToUtf16[i8 + 2] = i16;\n                }\n                else {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                    utf8OffsetToUtf16[i8 + 1] = i16;\n                    utf8OffsetToUtf16[i8 + 2] = i16;\n                    utf8OffsetToUtf16[i8 + 3] = i16;\n                }\n            }\n            if (codePoint <= 0x7F) {\n                utf8Value[i8++] = codePoint;\n            }\n            else if (codePoint <= 0x7FF) {\n                utf8Value[i8++] = 0b11000000 | ((codePoint & 0b00000000000000000000011111000000) >>> 6);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n            }\n            else if (codePoint <= 0xFFFF) {\n                utf8Value[i8++] = 0b11100000 | ((codePoint & 0b00000000000000001111000000000000) >>> 12);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n            }\n            else {\n                utf8Value[i8++] = 0b11110000 | ((codePoint & 0b00000000000111000000000000000000) >>> 18);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000111111000000000000) >>> 12);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n            }\n            if (wasSurrogatePair)\n                i16++;\n        }\n        this.utf16Length = utf16Length;\n        this.utf8Length = utf8Length;\n        this.utf16Value = str;\n        this.utf8Value = utf8Value;\n        this.utf16OffsetToUtf8 = utf16OffsetToUtf8;\n        this.utf8OffsetToUtf16 = utf8OffsetToUtf16;\n    }\n    createString(onigBinding) {\n        const result = onigBinding.omalloc(this.utf8Length);\n        onigBinding.HEAPU8.set(this.utf8Value, result);\n        return result;\n    }\n}\nclass OnigString {\n    static LAST_ID = 0;\n    static _sharedPtr = 0; // a pointer to a string of 10000 bytes\n    static _sharedPtrInUse = false;\n    id = (++OnigString.LAST_ID);\n    _onigBinding;\n    content;\n    utf16Length;\n    utf8Length;\n    utf16OffsetToUtf8;\n    utf8OffsetToUtf16;\n    ptr;\n    constructor(str) {\n        if (!onigBinding)\n            throw new ShikiError('Must invoke loadWasm first.');\n        this._onigBinding = onigBinding;\n        this.content = str;\n        const utfString = new UtfString(str);\n        this.utf16Length = utfString.utf16Length;\n        this.utf8Length = utfString.utf8Length;\n        this.utf16OffsetToUtf8 = utfString.utf16OffsetToUtf8;\n        this.utf8OffsetToUtf16 = utfString.utf8OffsetToUtf16;\n        if (this.utf8Length < 10000 && !OnigString._sharedPtrInUse) {\n            if (!OnigString._sharedPtr)\n                OnigString._sharedPtr = onigBinding.omalloc(10000);\n            OnigString._sharedPtrInUse = true;\n            onigBinding.HEAPU8.set(utfString.utf8Value, OnigString._sharedPtr);\n            this.ptr = OnigString._sharedPtr;\n        }\n        else {\n            this.ptr = utfString.createString(onigBinding);\n        }\n    }\n    convertUtf8OffsetToUtf16(utf8Offset) {\n        if (this.utf8OffsetToUtf16) {\n            if (utf8Offset < 0)\n                return 0;\n            if (utf8Offset > this.utf8Length)\n                return this.utf16Length;\n            return this.utf8OffsetToUtf16[utf8Offset];\n        }\n        return utf8Offset;\n    }\n    convertUtf16OffsetToUtf8(utf16Offset) {\n        if (this.utf16OffsetToUtf8) {\n            if (utf16Offset < 0)\n                return 0;\n            if (utf16Offset > this.utf16Length)\n                return this.utf8Length;\n            return this.utf16OffsetToUtf8[utf16Offset];\n        }\n        return utf16Offset;\n    }\n    dispose() {\n        if (this.ptr === OnigString._sharedPtr)\n            OnigString._sharedPtrInUse = false;\n        else\n            this._onigBinding.ofree(this.ptr);\n    }\n}\nclass OnigScanner {\n    _onigBinding;\n    _ptr;\n    constructor(patterns) {\n        if (!onigBinding)\n            throw new ShikiError('Must invoke loadWasm first.');\n        const strPtrsArr = [];\n        const strLenArr = [];\n        for (let i = 0, len = patterns.length; i < len; i++) {\n            const utfString = new UtfString(patterns[i]);\n            strPtrsArr[i] = utfString.createString(onigBinding);\n            strLenArr[i] = utfString.utf8Length;\n        }\n        const strPtrsPtr = onigBinding.omalloc(4 * patterns.length);\n        onigBinding.HEAPU32.set(strPtrsArr, strPtrsPtr / 4);\n        const strLenPtr = onigBinding.omalloc(4 * patterns.length);\n        onigBinding.HEAPU32.set(strLenArr, strLenPtr / 4);\n        const scannerPtr = onigBinding.createOnigScanner(strPtrsPtr, strLenPtr, patterns.length);\n        for (let i = 0, len = patterns.length; i < len; i++)\n            onigBinding.ofree(strPtrsArr[i]);\n        onigBinding.ofree(strLenPtr);\n        onigBinding.ofree(strPtrsPtr);\n        if (scannerPtr === 0)\n            throwLastOnigError(onigBinding);\n        this._onigBinding = onigBinding;\n        this._ptr = scannerPtr;\n    }\n    dispose() {\n        this._onigBinding.freeOnigScanner(this._ptr);\n    }\n    findNextMatchSync(string, startPosition, arg) {\n        // let debugCall = defaultDebugCall\n        let options = 0 /* FindOption.None */;\n        if (typeof arg === 'number') {\n            // if (arg & FindOption.DebugCall)\n            //   debugCall = true\n            options = arg;\n        }\n        if (typeof string === 'string') {\n            string = new OnigString(string);\n            const result = this._findNextMatchSync(string, startPosition, false, options);\n            string.dispose();\n            return result;\n        }\n        return this._findNextMatchSync(string, startPosition, false, options);\n    }\n    _findNextMatchSync(string, startPosition, debugCall, options) {\n        const onigBinding = this._onigBinding;\n        // let resultPtr: Pointer\n        // if (debugCall)\n        //   resultPtr = onigBinding.findNextOnigScannerMatchDbg(this._ptr, string.id, string.ptr, string.utf8Length, string.convertUtf16OffsetToUtf8(startPosition), options)\n        // else\n        const resultPtr = onigBinding.findNextOnigScannerMatch(this._ptr, string.id, string.ptr, string.utf8Length, string.convertUtf16OffsetToUtf8(startPosition), options);\n        if (resultPtr === 0) {\n            // no match\n            return null;\n        }\n        const HEAPU32 = onigBinding.HEAPU32;\n        let offset = resultPtr / 4; // byte offset -> uint32 offset\n        const index = HEAPU32[offset++];\n        const count = HEAPU32[offset++];\n        const captureIndices = [];\n        for (let i = 0; i < count; i++) {\n            const beg = string.convertUtf8OffsetToUtf16(HEAPU32[offset++]);\n            const end = string.convertUtf8OffsetToUtf16(HEAPU32[offset++]);\n            captureIndices[i] = {\n                start: beg,\n                end,\n                length: end - beg,\n            };\n        }\n        return {\n            index,\n            captureIndices,\n        };\n    }\n}\nfunction isInstantiatorOptionsObject(dataOrOptions) {\n    return (typeof dataOrOptions.instantiator === 'function');\n}\nfunction isInstantiatorModule(dataOrOptions) {\n    return (typeof dataOrOptions.default === 'function');\n}\nfunction isDataOptionsObject(dataOrOptions) {\n    return (typeof dataOrOptions.data !== 'undefined');\n}\nfunction isResponse(dataOrOptions) {\n    return (typeof Response !== 'undefined' && dataOrOptions instanceof Response);\n}\nfunction isArrayBuffer(data) {\n    return (typeof ArrayBuffer !== 'undefined' && (data instanceof ArrayBuffer || ArrayBuffer.isView(data)))\n        // eslint-disable-next-line node/prefer-global/buffer\n        || (typeof Buffer !== 'undefined' && Buffer.isBuffer?.(data))\n        || (typeof SharedArrayBuffer !== 'undefined' && data instanceof SharedArrayBuffer)\n        || (typeof Uint32Array !== 'undefined' && data instanceof Uint32Array);\n}\nlet initPromise;\nfunction loadWasm(options) {\n    if (initPromise)\n        return initPromise;\n    async function _load() {\n        onigBinding = await main(async (info) => {\n            let instance = options;\n            instance = await instance;\n            if (typeof instance === 'function')\n                instance = await instance(info);\n            if (typeof instance === 'function')\n                instance = await instance(info);\n            if (isInstantiatorOptionsObject(instance)) {\n                instance = await instance.instantiator(info);\n            }\n            else if (isInstantiatorModule(instance)) {\n                instance = await instance.default(info);\n            }\n            else {\n                if (isDataOptionsObject(instance))\n                    instance = instance.data;\n                if (isResponse(instance)) {\n                    if (typeof WebAssembly.instantiateStreaming === 'function')\n                        instance = await _makeResponseStreamingLoader(instance)(info);\n                    else\n                        instance = await _makeResponseNonStreamingLoader(instance)(info);\n                }\n                else if (isArrayBuffer(instance)) {\n                    instance = await _makeArrayBufferLoader(instance)(info);\n                }\n                // import(\"shiki/onig.wasm\") returns `{ default: WebAssembly.Module }` on cloudflare workers\n                // https://developers.cloudflare.com/workers/wrangler/bundling/\n                else if (instance instanceof WebAssembly.Module) {\n                    instance = await _makeArrayBufferLoader(instance)(info);\n                }\n                else if ('default' in instance && instance.default instanceof WebAssembly.Module) {\n                    instance = await _makeArrayBufferLoader(instance.default)(info);\n                }\n            }\n            if ('instance' in instance)\n                instance = instance.instance;\n            if ('exports' in instance)\n                instance = instance.exports;\n            return instance;\n        });\n    }\n    initPromise = _load();\n    return initPromise;\n}\nfunction _makeArrayBufferLoader(data) {\n    return importObject => WebAssembly.instantiate(data, importObject);\n}\nfunction _makeResponseStreamingLoader(data) {\n    return importObject => WebAssembly.instantiateStreaming(data, importObject);\n}\nfunction _makeResponseNonStreamingLoader(data) {\n    return async (importObject) => {\n        const arrayBuffer = await data.arrayBuffer();\n        return WebAssembly.instantiate(arrayBuffer, importObject);\n    };\n}\n// export function createOnigString(str: string) {\n//   return new OnigString(str)\n// }\n// export function createOnigScanner(patterns: string[]) {\n//   return new OnigScanner(patterns)\n// }\n// export function setDefaultDebugCall(_defaultDebugCall: boolean): void {\n//   defaultDebugCall = _defaultDebugCall\n// }\n\nasync function createWasmOnigEngine(options) {\n    if (options)\n        await loadWasm(options);\n    return {\n        createScanner(patterns) {\n            return new OnigScanner(patterns);\n        },\n        createString(s) {\n            return new OnigString(s);\n        },\n    };\n}\n\nfunction toArray(x) {\n    return Array.isArray(x) ? x : [x];\n}\n/**\n * Split a string into lines, each line preserves the line ending.\n */\nfunction splitLines(code, preserveEnding = false) {\n    const parts = code.split(/(\\r?\\n)/g);\n    let index = 0;\n    const lines = [];\n    for (let i = 0; i < parts.length; i += 2) {\n        const line = preserveEnding\n            ? parts[i] + (parts[i + 1] || '')\n            : parts[i];\n        lines.push([line, index]);\n        index += parts[i].length;\n        index += parts[i + 1]?.length || 0;\n    }\n    return lines;\n}\n/**\n * Check if the language is plaintext that is ignored by Shiki.\n *\n * Hard-coded plain text languages: `plaintext`, `txt`, `text`, `plain`.\n */\nfunction isPlainLang(lang) {\n    return !lang || ['plaintext', 'txt', 'text', 'plain'].includes(lang);\n}\n/**\n * Check if the language is specially handled or bypassed by Shiki.\n *\n * Hard-coded languages: `ansi` and plaintexts like `plaintext`, `txt`, `text`, `plain`.\n */\nfunction isSpecialLang(lang) {\n    return lang === 'ansi' || isPlainLang(lang);\n}\n/**\n * Check if the theme is specially handled or bypassed by Shiki.\n *\n * Hard-coded themes: `none`.\n */\nfunction isNoneTheme(theme) {\n    return theme === 'none';\n}\n/**\n * Check if the theme is specially handled or bypassed by Shiki.\n *\n * Hard-coded themes: `none`.\n */\nfunction isSpecialTheme(theme) {\n    return isNoneTheme(theme);\n}\n/**\n * Utility to append class to a hast node\n *\n * If the `property.class` is a string, it will be splitted by space and converted to an array.\n */\nfunction addClassToHast(node, className) {\n    if (!className)\n        return node;\n    node.properties ||= {};\n    node.properties.class ||= [];\n    if (typeof node.properties.class === 'string')\n        node.properties.class = node.properties.class.split(/\\s+/g);\n    if (!Array.isArray(node.properties.class))\n        node.properties.class = [];\n    const targets = Array.isArray(className) ? className : className.split(/\\s+/g);\n    for (const c of targets) {\n        if (c && !node.properties.class.includes(c))\n            node.properties.class.push(c);\n    }\n    return node;\n}\n/**\n * Split a token into multiple tokens by given offsets.\n *\n * The offsets are relative to the token, and should be sorted.\n */\nfunction splitToken(token, offsets) {\n    let lastOffset = 0;\n    const tokens = [];\n    for (const offset of offsets) {\n        if (offset > lastOffset) {\n            tokens.push({\n                ...token,\n                content: token.content.slice(lastOffset, offset),\n                offset: token.offset + lastOffset,\n            });\n        }\n        lastOffset = offset;\n    }\n    if (lastOffset < token.content.length) {\n        tokens.push({\n            ...token,\n            content: token.content.slice(lastOffset),\n            offset: token.offset + lastOffset,\n        });\n    }\n    return tokens;\n}\n/**\n * Split 2D tokens array by given breakpoints.\n */\nfunction splitTokens(tokens, breakpoints) {\n    const sorted = Array\n        .from(breakpoints instanceof Set ? breakpoints : new Set(breakpoints))\n        .sort((a, b) => a - b);\n    if (!sorted.length)\n        return tokens;\n    return tokens.map((line) => {\n        return line.flatMap((token) => {\n            const breakpointsInToken = sorted\n                .filter(i => token.offset < i && i < token.offset + token.content.length)\n                .map(i => i - token.offset)\n                .sort((a, b) => a - b);\n            if (!breakpointsInToken.length)\n                return token;\n            return splitToken(token, breakpointsInToken);\n        });\n    });\n}\n/**\n * Normalize a getter to a promise.\n */\nasync function normalizeGetter(p) {\n    return Promise.resolve(typeof p === 'function' ? p() : p).then(r => r.default || r);\n}\nfunction resolveColorReplacements(theme, options) {\n    const replacements = typeof theme === 'string' ? {} : { ...theme.colorReplacements };\n    const themeName = typeof theme === 'string' ? theme : theme.name;\n    for (const [key, value] of Object.entries(options?.colorReplacements || {})) {\n        if (typeof value === 'string')\n            replacements[key] = value;\n        else if (key === themeName)\n            Object.assign(replacements, value);\n    }\n    return replacements;\n}\nfunction applyColorReplacements(color, replacements) {\n    if (!color)\n        return color;\n    return replacements?.[color?.toLowerCase()] || color;\n}\nfunction getTokenStyleObject(token) {\n    const styles = {};\n    if (token.color)\n        styles.color = token.color;\n    if (token.bgColor)\n        styles['background-color'] = token.bgColor;\n    if (token.fontStyle) {\n        if (token.fontStyle & FontStyle.Italic)\n            styles['font-style'] = 'italic';\n        if (token.fontStyle & FontStyle.Bold)\n            styles['font-weight'] = 'bold';\n        if (token.fontStyle & FontStyle.Underline)\n            styles['text-decoration'] = 'underline';\n    }\n    return styles;\n}\nfunction stringifyTokenStyle(token) {\n    return Object.entries(token).map(([key, value]) => `${key}:${value}`).join(';');\n}\n/**\n * Creates a converter between index and position in a code block.\n *\n * Overflow/underflow are unchecked.\n */\nfunction createPositionConverter(code) {\n    const lines = splitLines(code, true).map(([line]) => line);\n    function indexToPos(index) {\n        if (index === code.length) {\n            return {\n                line: lines.length - 1,\n                character: lines[lines.length - 1].length,\n            };\n        }\n        let character = index;\n        let line = 0;\n        for (const lineText of lines) {\n            if (character < lineText.length)\n                break;\n            character -= lineText.length;\n            line++;\n        }\n        return { line, character };\n    }\n    function posToIndex(line, character) {\n        let index = 0;\n        for (let i = 0; i < line; i++)\n            index += lines[i].length;\n        index += character;\n        return index;\n    }\n    return {\n        lines,\n        indexToPos,\n        posToIndex,\n    };\n}\n\n/**\n * A built-in transformer to add decorations to the highlighted code.\n */\nfunction transformerDecorations() {\n    const map = new WeakMap();\n    function getContext(shiki) {\n        if (!map.has(shiki.meta)) {\n            const converter = createPositionConverter(shiki.source);\n            function normalizePosition(p) {\n                if (typeof p === 'number') {\n                    if (p < 0 || p > shiki.source.length)\n                        throw new ShikiError(`Invalid decoration offset: ${p}. Code length: ${shiki.source.length}`);\n                    return {\n                        ...converter.indexToPos(p),\n                        offset: p,\n                    };\n                }\n                else {\n                    const line = converter.lines[p.line];\n                    if (line === undefined)\n                        throw new ShikiError(`Invalid decoration position ${JSON.stringify(p)}. Lines length: ${converter.lines.length}`);\n                    if (p.character < 0 || p.character > line.length)\n                        throw new ShikiError(`Invalid decoration position ${JSON.stringify(p)}. Line ${p.line} length: ${line.length}`);\n                    return {\n                        ...p,\n                        offset: converter.posToIndex(p.line, p.character),\n                    };\n                }\n            }\n            const decorations = (shiki.options.decorations || [])\n                .map((d) => ({\n                ...d,\n                start: normalizePosition(d.start),\n                end: normalizePosition(d.end),\n            }));\n            verifyIntersections(decorations);\n            map.set(shiki.meta, {\n                decorations,\n                converter,\n                source: shiki.source,\n            });\n        }\n        return map.get(shiki.meta);\n    }\n    return {\n        name: 'shiki:decorations',\n        tokens(tokens) {\n            if (!this.options.decorations?.length)\n                return;\n            const ctx = getContext(this);\n            const breakpoints = ctx.decorations.flatMap(d => [d.start.offset, d.end.offset]);\n            const splitted = splitTokens(tokens, breakpoints);\n            return splitted;\n        },\n        code(codeEl) {\n            if (!this.options.decorations?.length)\n                return;\n            const ctx = getContext(this);\n            const lines = Array.from(codeEl.children).filter(i => i.type === 'element' && i.tagName === 'span');\n            if (lines.length !== ctx.converter.lines.length)\n                throw new ShikiError(`Number of lines in code element (${lines.length}) does not match the number of lines in the source (${ctx.converter.lines.length}). Failed to apply decorations.`);\n            function applyLineSection(line, start, end, decoration) {\n                const lineEl = lines[line];\n                let text = '';\n                let startIndex = -1;\n                let endIndex = -1;\n                if (start === 0)\n                    startIndex = 0;\n                if (end === 0)\n                    endIndex = 0;\n                if (end === Number.POSITIVE_INFINITY)\n                    endIndex = lineEl.children.length;\n                if (startIndex === -1 || endIndex === -1) {\n                    for (let i = 0; i < lineEl.children.length; i++) {\n                        text += stringify$2(lineEl.children[i]);\n                        if (startIndex === -1 && text.length === start)\n                            startIndex = i + 1;\n                        if (endIndex === -1 && text.length === end)\n                            endIndex = i + 1;\n                    }\n                }\n                if (startIndex === -1)\n                    throw new ShikiError(`Failed to find start index for decoration ${JSON.stringify(decoration.start)}`);\n                if (endIndex === -1)\n                    throw new ShikiError(`Failed to find end index for decoration ${JSON.stringify(decoration.end)}`);\n                const children = lineEl.children.slice(startIndex, endIndex);\n                // Full line decoration\n                if (!decoration.alwaysWrap && children.length === lineEl.children.length) {\n                    applyDecoration(lineEl, decoration, 'line');\n                }\n                // Single token decoration\n                else if (!decoration.alwaysWrap && children.length === 1 && children[0].type === 'element') {\n                    applyDecoration(children[0], decoration, 'token');\n                }\n                // Create a wrapper for the decoration\n                else {\n                    const wrapper = {\n                        type: 'element',\n                        tagName: 'span',\n                        properties: {},\n                        children,\n                    };\n                    applyDecoration(wrapper, decoration, 'wrapper');\n                    lineEl.children.splice(startIndex, children.length, wrapper);\n                }\n            }\n            function applyLine(line, decoration) {\n                lines[line] = applyDecoration(lines[line], decoration, 'line');\n            }\n            function applyDecoration(el, decoration, type) {\n                const properties = decoration.properties || {};\n                const transform = decoration.transform || (i => i);\n                el.tagName = decoration.tagName || 'span';\n                el.properties = {\n                    ...el.properties,\n                    ...properties,\n                    class: el.properties.class,\n                };\n                if (decoration.properties?.class)\n                    addClassToHast(el, decoration.properties.class);\n                el = transform(el, type) || el;\n                return el;\n            }\n            const lineApplies = [];\n            // Apply decorations in reverse order so the nested ones get applied first.\n            const sorted = ctx.decorations.sort((a, b) => b.start.offset - a.start.offset);\n            for (const decoration of sorted) {\n                const { start, end } = decoration;\n                if (start.line === end.line) {\n                    applyLineSection(start.line, start.character, end.character, decoration);\n                }\n                else if (start.line < end.line) {\n                    applyLineSection(start.line, start.character, Number.POSITIVE_INFINITY, decoration);\n                    for (let i = start.line + 1; i < end.line; i++)\n                        lineApplies.unshift(() => applyLine(i, decoration));\n                    applyLineSection(end.line, 0, end.character, decoration);\n                }\n            }\n            lineApplies.forEach(i => i());\n        },\n    };\n}\nfunction verifyIntersections(items) {\n    for (let i = 0; i < items.length; i++) {\n        const foo = items[i];\n        if (foo.start.offset > foo.end.offset)\n            throw new ShikiError(`Invalid decoration range: ${JSON.stringify(foo.start)} - ${JSON.stringify(foo.end)}`);\n        for (let j = i + 1; j < items.length; j++) {\n            const bar = items[j];\n            const isFooHasBarStart = foo.start.offset < bar.start.offset && bar.start.offset < foo.end.offset;\n            const isFooHasBarEnd = foo.start.offset < bar.end.offset && bar.end.offset < foo.end.offset;\n            const isBarHasFooStart = bar.start.offset < foo.start.offset && foo.start.offset < bar.end.offset;\n            const isBarHasFooEnd = bar.start.offset < foo.end.offset && foo.end.offset < bar.end.offset;\n            if (isFooHasBarStart || isFooHasBarEnd || isBarHasFooStart || isBarHasFooEnd) {\n                if (isFooHasBarEnd && isFooHasBarEnd)\n                    continue; // nested\n                if (isBarHasFooStart && isBarHasFooEnd)\n                    continue; // nested\n                throw new ShikiError(`Decorations ${JSON.stringify(foo.start)} and ${JSON.stringify(bar.start)} intersect.`);\n            }\n        }\n    }\n}\nfunction stringify$2(el) {\n    if (el.type === 'text')\n        return el.value;\n    if (el.type === 'element')\n        return el.children.map(stringify$2).join('');\n    return '';\n}\n\nconst builtInTransformers = [\n    /* @__PURE__ */ transformerDecorations(),\n];\nfunction getTransformers(options) {\n    return [\n        ...options.transformers || [],\n        ...builtInTransformers,\n    ];\n}\n\n/**\n * GrammarState is a special reference object that holds the state of a grammar.\n *\n * It's used to highlight code snippets that are part of the target language.\n */\nclass GrammarState {\n    _stack;\n    lang;\n    theme;\n    /**\n     * Static method to create a initial grammar state.\n     */\n    static initial(lang, theme) {\n        return new GrammarState(INITIAL, lang, theme);\n    }\n    constructor(_stack, lang, theme) {\n        this._stack = _stack;\n        this.lang = lang;\n        this.theme = theme;\n    }\n    get scopes() {\n        return getScopes(this._stack);\n    }\n    toJSON() {\n        return {\n            lang: this.lang,\n            theme: this.theme,\n            scopes: this.scopes,\n        };\n    }\n}\nfunction getScopes(stack) {\n    const scopes = [];\n    const visited = new Set();\n    function pushScope(stack) {\n        if (visited.has(stack))\n            return;\n        visited.add(stack);\n        const name = stack?.nameScopesList?.scopeName;\n        if (name)\n            scopes.push(name);\n        if (stack.parent)\n            pushScope(stack.parent);\n    }\n    pushScope(stack);\n    return scopes;\n}\nfunction getGrammarStack(state) {\n    if (!(state instanceof GrammarState))\n        throw new ShikiError('Invalid grammar state');\n    // @ts-expect-error _stack is private\n    return state._stack;\n}\n\n// src/colors.ts\nvar namedColors = [\n  \"black\",\n  \"red\",\n  \"green\",\n  \"yellow\",\n  \"blue\",\n  \"magenta\",\n  \"cyan\",\n  \"white\",\n  \"brightBlack\",\n  \"brightRed\",\n  \"brightGreen\",\n  \"brightYellow\",\n  \"brightBlue\",\n  \"brightMagenta\",\n  \"brightCyan\",\n  \"brightWhite\"\n];\n\n// src/decorations.ts\nvar decorations = {\n  1: \"bold\",\n  2: \"dim\",\n  3: \"italic\",\n  4: \"underline\",\n  7: \"reverse\",\n  9: \"strikethrough\"\n};\n\n// src/parser.ts\nfunction findSequence(value, position) {\n  const nextEscape = value.indexOf(\"\\x1B[\", position);\n  if (nextEscape !== -1) {\n    const nextClose = value.indexOf(\"m\", nextEscape);\n    return {\n      sequence: value.substring(nextEscape + 2, nextClose).split(\";\"),\n      startPosition: nextEscape,\n      position: nextClose + 1\n    };\n  }\n  return {\n    position: value.length\n  };\n}\nfunction parseColor(sequence, index) {\n  let offset = 1;\n  const colorMode = sequence[index + offset++];\n  let color;\n  if (colorMode === \"2\") {\n    const rgb = [\n      sequence[index + offset++],\n      sequence[index + offset++],\n      sequence[index + offset]\n    ].map((x) => Number.parseInt(x));\n    if (rgb.length === 3 && !rgb.some((x) => Number.isNaN(x))) {\n      color = {\n        type: \"rgb\",\n        rgb\n      };\n    }\n  } else if (colorMode === \"5\") {\n    const colorIndex = Number.parseInt(sequence[index + offset]);\n    if (!Number.isNaN(colorIndex)) {\n      color = { type: \"table\", index: Number(colorIndex) };\n    }\n  }\n  return [offset, color];\n}\nfunction parseSequence(sequence) {\n  const commands = [];\n  for (let i = 0; i < sequence.length; i++) {\n    const code = sequence[i];\n    const codeInt = Number.parseInt(code);\n    if (Number.isNaN(codeInt))\n      continue;\n    if (codeInt === 0) {\n      commands.push({ type: \"resetAll\" });\n    } else if (codeInt <= 9) {\n      const decoration = decorations[codeInt];\n      if (decoration) {\n        commands.push({\n          type: \"setDecoration\",\n          value: decorations[codeInt]\n        });\n      }\n    } else if (codeInt <= 29) {\n      const decoration = decorations[codeInt - 20];\n      if (decoration) {\n        commands.push({\n          type: \"resetDecoration\",\n          value: decoration\n        });\n      }\n    } else if (codeInt <= 37) {\n      commands.push({\n        type: \"setForegroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 30] }\n      });\n    } else if (codeInt === 38) {\n      const [offset, color] = parseColor(sequence, i);\n      if (color) {\n        commands.push({\n          type: \"setForegroundColor\",\n          value: color\n        });\n      }\n      i += offset;\n    } else if (codeInt === 39) {\n      commands.push({\n        type: \"resetForegroundColor\"\n      });\n    } else if (codeInt <= 47) {\n      commands.push({\n        type: \"setBackgroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 40] }\n      });\n    } else if (codeInt === 48) {\n      const [offset, color] = parseColor(sequence, i);\n      if (color) {\n        commands.push({\n          type: \"setBackgroundColor\",\n          value: color\n        });\n      }\n      i += offset;\n    } else if (codeInt === 49) {\n      commands.push({\n        type: \"resetBackgroundColor\"\n      });\n    } else if (codeInt >= 90 && codeInt <= 97) {\n      commands.push({\n        type: \"setForegroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 90 + 8] }\n      });\n    } else if (codeInt >= 100 && codeInt <= 107) {\n      commands.push({\n        type: \"setBackgroundColor\",\n        value: { type: \"named\", name: namedColors[codeInt - 100 + 8] }\n      });\n    }\n  }\n  return commands;\n}\nfunction createAnsiSequenceParser() {\n  let foreground = null;\n  let background = null;\n  let decorations2 = /* @__PURE__ */ new Set();\n  return {\n    parse(value) {\n      const tokens = [];\n      let position = 0;\n      do {\n        const findResult = findSequence(value, position);\n        const text = findResult.sequence ? value.substring(position, findResult.startPosition) : value.substring(position);\n        if (text.length > 0) {\n          tokens.push({\n            value: text,\n            foreground,\n            background,\n            decorations: new Set(decorations2)\n          });\n        }\n        if (findResult.sequence) {\n          const commands = parseSequence(findResult.sequence);\n          for (const styleToken of commands) {\n            if (styleToken.type === \"resetAll\") {\n              foreground = null;\n              background = null;\n              decorations2.clear();\n            } else if (styleToken.type === \"resetForegroundColor\") {\n              foreground = null;\n            } else if (styleToken.type === \"resetBackgroundColor\") {\n              background = null;\n            } else if (styleToken.type === \"resetDecoration\") {\n              decorations2.delete(styleToken.value);\n            }\n          }\n          for (const styleToken of commands) {\n            if (styleToken.type === \"setForegroundColor\") {\n              foreground = styleToken.value;\n            } else if (styleToken.type === \"setBackgroundColor\") {\n              background = styleToken.value;\n            } else if (styleToken.type === \"setDecoration\") {\n              decorations2.add(styleToken.value);\n            }\n          }\n        }\n        position = findResult.position;\n      } while (position < value.length);\n      return tokens;\n    }\n  };\n}\n\n// src/palette.ts\nvar defaultNamedColorsMap = {\n  black: \"#000000\",\n  red: \"#bb0000\",\n  green: \"#00bb00\",\n  yellow: \"#bbbb00\",\n  blue: \"#0000bb\",\n  magenta: \"#ff00ff\",\n  cyan: \"#00bbbb\",\n  white: \"#eeeeee\",\n  brightBlack: \"#555555\",\n  brightRed: \"#ff5555\",\n  brightGreen: \"#00ff00\",\n  brightYellow: \"#ffff55\",\n  brightBlue: \"#5555ff\",\n  brightMagenta: \"#ff55ff\",\n  brightCyan: \"#55ffff\",\n  brightWhite: \"#ffffff\"\n};\nfunction createColorPalette(namedColorsMap = defaultNamedColorsMap) {\n  function namedColor(name) {\n    return namedColorsMap[name];\n  }\n  function rgbColor(rgb) {\n    return `#${rgb.map((x) => Math.max(0, Math.min(x, 255)).toString(16).padStart(2, \"0\")).join(\"\")}`;\n  }\n  let colorTable;\n  function getColorTable() {\n    if (colorTable) {\n      return colorTable;\n    }\n    colorTable = [];\n    for (let i = 0; i < namedColors.length; i++) {\n      colorTable.push(namedColor(namedColors[i]));\n    }\n    let levels = [0, 95, 135, 175, 215, 255];\n    for (let r = 0; r < 6; r++) {\n      for (let g = 0; g < 6; g++) {\n        for (let b = 0; b < 6; b++) {\n          colorTable.push(rgbColor([levels[r], levels[g], levels[b]]));\n        }\n      }\n    }\n    let level = 8;\n    for (let i = 0; i < 24; i++, level += 10) {\n      colorTable.push(rgbColor([level, level, level]));\n    }\n    return colorTable;\n  }\n  function tableColor(index) {\n    return getColorTable()[index];\n  }\n  function value(color) {\n    switch (color.type) {\n      case \"named\":\n        return namedColor(color.name);\n      case \"rgb\":\n        return rgbColor(color.rgb);\n      case \"table\":\n        return tableColor(color.index);\n    }\n  }\n  return {\n    value\n  };\n}\n\nfunction tokenizeAnsiWithTheme(theme, fileContents, options) {\n    const colorReplacements = resolveColorReplacements(theme, options);\n    const lines = splitLines(fileContents);\n    const colorPalette = createColorPalette(Object.fromEntries(namedColors.map(name => [\n        name,\n        theme.colors?.[`terminal.ansi${name[0].toUpperCase()}${name.substring(1)}`],\n    ])));\n    const parser = createAnsiSequenceParser();\n    return lines.map(line => parser.parse(line[0]).map((token) => {\n        let color;\n        let bgColor;\n        if (token.decorations.has('reverse')) {\n            color = token.background ? colorPalette.value(token.background) : theme.bg;\n            bgColor = token.foreground ? colorPalette.value(token.foreground) : theme.fg;\n        }\n        else {\n            color = token.foreground ? colorPalette.value(token.foreground) : theme.fg;\n            bgColor = token.background ? colorPalette.value(token.background) : undefined;\n        }\n        color = applyColorReplacements(color, colorReplacements);\n        bgColor = applyColorReplacements(bgColor, colorReplacements);\n        if (token.decorations.has('dim'))\n            color = dimColor(color);\n        let fontStyle = FontStyle.None;\n        if (token.decorations.has('bold'))\n            fontStyle |= FontStyle.Bold;\n        if (token.decorations.has('italic'))\n            fontStyle |= FontStyle.Italic;\n        if (token.decorations.has('underline'))\n            fontStyle |= FontStyle.Underline;\n        return {\n            content: token.value,\n            offset: line[1], // TODO: more accurate offset? might need to fork ansi-sequence-parser\n            color,\n            bgColor,\n            fontStyle,\n        };\n    }));\n}\n/**\n * Adds 50% alpha to a hex color string or the \"-dim\" postfix to a CSS variable\n */\nfunction dimColor(color) {\n    const hexMatch = color.match(/#([0-9a-f]{3})([0-9a-f]{3})?([0-9a-f]{2})?/);\n    if (hexMatch) {\n        if (hexMatch[3]) {\n            // convert from #rrggbbaa to #rrggbb(aa/2)\n            const alpha = Math\n                .round(Number.parseInt(hexMatch[3], 16) / 2)\n                .toString(16)\n                .padStart(2, '0');\n            return `#${hexMatch[1]}${hexMatch[2]}${alpha}`;\n        }\n        else if (hexMatch[2]) {\n            // convert from #rrggbb to #rrggbb80\n            return `#${hexMatch[1]}${hexMatch[2]}80`;\n        }\n        else {\n            // convert from #rgb to #rrggbb80\n            return `#${Array\n                .from(hexMatch[1])\n                .map(x => `${x}${x}`)\n                .join('')}80`;\n        }\n    }\n    const cssVarMatch = color.match(/var\\((--[\\w-]+-ansi-[\\w-]+)\\)/);\n    if (cssVarMatch)\n        return `var(${cssVarMatch[1]}-dim)`;\n    return color;\n}\n\n/* ---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *-------------------------------------------------------- */\n/**\n * Code to tokens, with a simple theme.\n */\nfunction codeToTokensBase(internal, code, options = {}) {\n    const { lang = 'text', theme: themeName = internal.getLoadedThemes()[0], } = options;\n    if (isPlainLang(lang) || isNoneTheme(themeName))\n        return splitLines(code).map(line => [{ content: line[0], offset: line[1] }]);\n    const { theme, colorMap } = internal.setTheme(themeName);\n    if (lang === 'ansi')\n        return tokenizeAnsiWithTheme(theme, code, options);\n    const _grammar = internal.getLanguage(lang);\n    if (options.grammarState) {\n        if (options.grammarState.lang !== _grammar.name) {\n            throw new ShikiError(`Grammar state language \"${options.grammarState.lang}\" does not match highlight language \"${_grammar.name}\"`);\n        }\n        if (options.grammarState.theme !== themeName) {\n            throw new ShikiError(`Grammar state theme \"${options.grammarState.theme}\" does not match highlight theme \"${themeName}\"`);\n        }\n    }\n    return tokenizeWithTheme(code, _grammar, theme, colorMap, options);\n}\nfunction getLastGrammarState(internal, code, options = {}) {\n    const { lang = 'text', theme: themeName = internal.getLoadedThemes()[0], } = options;\n    if (isPlainLang(lang) || isNoneTheme(themeName))\n        throw new ShikiError('Plain language does not have grammar state');\n    if (lang === 'ansi')\n        throw new ShikiError('ANSI language does not have grammar state');\n    const { theme, colorMap } = internal.setTheme(themeName);\n    const _grammar = internal.getLanguage(lang);\n    return new GrammarState(_tokenizeWithTheme(code, _grammar, theme, colorMap, options).stateStack, _grammar.name, theme.name);\n}\nfunction tokenizeWithTheme(code, grammar, theme, colorMap, options) {\n    return _tokenizeWithTheme(code, grammar, theme, colorMap, options).tokens;\n}\nfunction _tokenizeWithTheme(code, grammar, theme, colorMap, options) {\n    const colorReplacements = resolveColorReplacements(theme, options);\n    const { tokenizeMaxLineLength = 0, tokenizeTimeLimit = 500, } = options;\n    const lines = splitLines(code);\n    let stateStack = options.grammarState\n        ? getGrammarStack(options.grammarState)\n        : options.grammarContextCode != null\n            ? _tokenizeWithTheme(options.grammarContextCode, grammar, theme, colorMap, {\n                ...options,\n                grammarState: undefined,\n                grammarContextCode: undefined,\n            }).stateStack\n            : INITIAL;\n    let actual = [];\n    const final = [];\n    for (let i = 0, len = lines.length; i < len; i++) {\n        const [line, lineOffset] = lines[i];\n        if (line === '') {\n            actual = [];\n            final.push([]);\n            continue;\n        }\n        // Do not attempt to tokenize if the line length is longer than the `tokenizationMaxLineLength`\n        if (tokenizeMaxLineLength > 0 && line.length >= tokenizeMaxLineLength) {\n            actual = [];\n            final.push([{\n                    content: line,\n                    offset: lineOffset,\n                    color: '',\n                    fontStyle: 0,\n                }]);\n            continue;\n        }\n        let resultWithScopes;\n        let tokensWithScopes;\n        let tokensWithScopesIndex;\n        if (options.includeExplanation) {\n            resultWithScopes = grammar.tokenizeLine(line, stateStack);\n            tokensWithScopes = resultWithScopes.tokens;\n            tokensWithScopesIndex = 0;\n        }\n        const result = grammar.tokenizeLine2(line, stateStack, tokenizeTimeLimit);\n        const tokensLength = result.tokens.length / 2;\n        for (let j = 0; j < tokensLength; j++) {\n            const startIndex = result.tokens[2 * j];\n            const nextStartIndex = j + 1 < tokensLength ? result.tokens[2 * j + 2] : line.length;\n            if (startIndex === nextStartIndex)\n                continue;\n            const metadata = result.tokens[2 * j + 1];\n            const color = applyColorReplacements(colorMap[EncodedTokenMetadata.getForeground(metadata)], colorReplacements);\n            const fontStyle = EncodedTokenMetadata.getFontStyle(metadata);\n            const token = {\n                content: line.substring(startIndex, nextStartIndex),\n                offset: lineOffset + startIndex,\n                color,\n                fontStyle,\n            };\n            if (options.includeExplanation) {\n                const themeSettingsSelectors = [];\n                if (options.includeExplanation !== 'scopeName') {\n                    for (const setting of theme.settings) {\n                        let selectors;\n                        switch (typeof setting.scope) {\n                            case 'string':\n                                selectors = setting.scope.split(/,/).map(scope => scope.trim());\n                                break;\n                            case 'object':\n                                selectors = setting.scope;\n                                break;\n                            default:\n                                continue;\n                        }\n                        themeSettingsSelectors.push({\n                            settings: setting,\n                            selectors: selectors.map(selector => selector.split(/ /)),\n                        });\n                    }\n                }\n                token.explanation = [];\n                let offset = 0;\n                while (startIndex + offset < nextStartIndex) {\n                    const tokenWithScopes = tokensWithScopes[tokensWithScopesIndex];\n                    const tokenWithScopesText = line.substring(tokenWithScopes.startIndex, tokenWithScopes.endIndex);\n                    offset += tokenWithScopesText.length;\n                    token.explanation.push({\n                        content: tokenWithScopesText,\n                        scopes: options.includeExplanation === 'scopeName'\n                            ? explainThemeScopesNameOnly(tokenWithScopes.scopes)\n                            : explainThemeScopesFull(themeSettingsSelectors, tokenWithScopes.scopes),\n                    });\n                    tokensWithScopesIndex += 1;\n                }\n            }\n            actual.push(token);\n        }\n        final.push(actual);\n        actual = [];\n        stateStack = result.ruleStack;\n    }\n    return {\n        tokens: final,\n        stateStack,\n    };\n}\nfunction explainThemeScopesNameOnly(scopes) {\n    return scopes.map(scope => ({ scopeName: scope }));\n}\nfunction explainThemeScopesFull(themeSelectors, scopes) {\n    const result = [];\n    for (let i = 0, len = scopes.length; i < len; i++) {\n        const scope = scopes[i];\n        result[i] = {\n            scopeName: scope,\n            themeMatches: explainThemeScope(themeSelectors, scope, scopes.slice(0, i)),\n        };\n    }\n    return result;\n}\nfunction matchesOne(selector, scope) {\n    return selector === scope\n        || (scope.substring(0, selector.length) === selector && scope[selector.length] === '.');\n}\nfunction matches(selectors, scope, parentScopes) {\n    if (!matchesOne(selectors[selectors.length - 1], scope))\n        return false;\n    let selectorParentIndex = selectors.length - 2;\n    let parentIndex = parentScopes.length - 1;\n    while (selectorParentIndex >= 0 && parentIndex >= 0) {\n        if (matchesOne(selectors[selectorParentIndex], parentScopes[parentIndex]))\n            selectorParentIndex -= 1;\n        parentIndex -= 1;\n    }\n    if (selectorParentIndex === -1)\n        return true;\n    return false;\n}\nfunction explainThemeScope(themeSettingsSelectors, scope, parentScopes) {\n    const result = [];\n    for (const { selectors, settings } of themeSettingsSelectors) {\n        for (const selectorPieces of selectors) {\n            if (matches(selectorPieces, scope, parentScopes)) {\n                result.push(settings);\n                break; // continue to the next theme settings\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * Get tokens with multiple themes\n */\nfunction codeToTokensWithThemes(internal, code, options) {\n    const themes = Object\n        .entries(options.themes)\n        .filter(i => i[1])\n        .map(i => ({ color: i[0], theme: i[1] }));\n    const tokens = syncThemesTokenization(...themes.map(t => codeToTokensBase(internal, code, {\n        ...options,\n        theme: t.theme,\n    })));\n    const mergedTokens = tokens[0]\n        .map((line, lineIdx) => line\n        .map((_token, tokenIdx) => {\n        const mergedToken = {\n            content: _token.content,\n            variants: {},\n            offset: _token.offset,\n        };\n        if ('includeExplanation' in options && options.includeExplanation) {\n            mergedToken.explanation = _token.explanation;\n        }\n        tokens.forEach((t, themeIdx) => {\n            const { content: _, explanation: __, offset: ___, ...styles } = t[lineIdx][tokenIdx];\n            mergedToken.variants[themes[themeIdx].color] = styles;\n        });\n        return mergedToken;\n    }));\n    return mergedTokens;\n}\n/**\n * Break tokens from multiple themes into same tokenization.\n *\n * For example, given two themes that tokenize `console.log(\"hello\")` as:\n *\n * - `console . log (\" hello \")` (6 tokens)\n * - `console .log ( \"hello\" )` (5 tokens)\n *\n * This function will return:\n *\n * - `console . log ( \" hello \" )` (8 tokens)\n * - `console . log ( \" hello \" )` (8 tokens)\n */\nfunction syncThemesTokenization(...themes) {\n    const outThemes = themes.map(() => []);\n    const count = themes.length;\n    for (let i = 0; i < themes[0].length; i++) {\n        const lines = themes.map(t => t[i]);\n        const outLines = outThemes.map(() => []);\n        outThemes.forEach((t, i) => t.push(outLines[i]));\n        const indexes = lines.map(() => 0);\n        const current = lines.map(l => l[0]);\n        while (current.every(t => t)) {\n            const minLength = Math.min(...current.map(t => t.content.length));\n            for (let n = 0; n < count; n++) {\n                const token = current[n];\n                if (token.content.length === minLength) {\n                    outLines[n].push(token);\n                    indexes[n] += 1;\n                    current[n] = lines[n][indexes[n]];\n                }\n                else {\n                    outLines[n].push({\n                        ...token,\n                        content: token.content.slice(0, minLength),\n                    });\n                    current[n] = {\n                        ...token,\n                        content: token.content.slice(minLength),\n                        offset: token.offset + minLength,\n                    };\n                }\n            }\n        }\n    }\n    return outThemes;\n}\n\n/**\n * High-level code-to-tokens API.\n *\n * It will use `codeToTokensWithThemes` or `codeToTokensBase` based on the options.\n */\nfunction codeToTokens(internal, code, options) {\n    let bg;\n    let fg;\n    let tokens;\n    let themeName;\n    let rootStyle;\n    if ('themes' in options) {\n        const { defaultColor = 'light', cssVariablePrefix = '--shiki-', } = options;\n        const themes = Object\n            .entries(options.themes)\n            .filter(i => i[1])\n            .map(i => ({ color: i[0], theme: i[1] }))\n            .sort((a, b) => a.color === defaultColor ? -1 : b.color === defaultColor ? 1 : 0);\n        if (themes.length === 0)\n            throw new ShikiError('`themes` option must not be empty');\n        const themeTokens = codeToTokensWithThemes(internal, code, options);\n        if (defaultColor && !themes.find(t => t.color === defaultColor))\n            throw new ShikiError(`\\`themes\\` option must contain the defaultColor key \\`${defaultColor}\\``);\n        const themeRegs = themes.map(t => internal.getTheme(t.theme));\n        const themesOrder = themes.map(t => t.color);\n        tokens = themeTokens\n            .map(line => line.map(token => mergeToken(token, themesOrder, cssVariablePrefix, defaultColor)));\n        const themeColorReplacements = themes.map(t => resolveColorReplacements(t.theme, options));\n        fg = themes.map((t, idx) => (idx === 0 && defaultColor\n            ? ''\n            : `${cssVariablePrefix + t.color}:`) + (applyColorReplacements(themeRegs[idx].fg, themeColorReplacements[idx]) || 'inherit')).join(';');\n        bg = themes.map((t, idx) => (idx === 0 && defaultColor\n            ? ''\n            : `${cssVariablePrefix + t.color}-bg:`) + (applyColorReplacements(themeRegs[idx].bg, themeColorReplacements[idx]) || 'inherit')).join(';');\n        themeName = `shiki-themes ${themeRegs.map(t => t.name).join(' ')}`;\n        rootStyle = defaultColor ? undefined : [fg, bg].join(';');\n    }\n    else if ('theme' in options) {\n        const colorReplacements = resolveColorReplacements(options.theme, options);\n        tokens = codeToTokensBase(internal, code, options);\n        const _theme = internal.getTheme(options.theme);\n        bg = applyColorReplacements(_theme.bg, colorReplacements);\n        fg = applyColorReplacements(_theme.fg, colorReplacements);\n        themeName = _theme.name;\n    }\n    else {\n        throw new ShikiError('Invalid options, either `theme` or `themes` must be provided');\n    }\n    return {\n        tokens,\n        fg,\n        bg,\n        themeName,\n        rootStyle,\n    };\n}\nfunction mergeToken(merged, variantsOrder, cssVariablePrefix, defaultColor) {\n    const token = {\n        content: merged.content,\n        explanation: merged.explanation,\n        offset: merged.offset,\n    };\n    const styles = variantsOrder.map(t => getTokenStyleObject(merged.variants[t]));\n    // Get all style keys, for themes that missing some style, we put `inherit` to override as needed\n    const styleKeys = new Set(styles.flatMap(t => Object.keys(t)));\n    const mergedStyles = styles.reduce((acc, cur, idx) => {\n        for (const key of styleKeys) {\n            const value = cur[key] || 'inherit';\n            if (idx === 0 && defaultColor) {\n                acc[key] = value;\n            }\n            else {\n                const keyName = key === 'color' ? '' : key === 'background-color' ? '-bg' : `-${key}`;\n                const varKey = cssVariablePrefix + variantsOrder[idx] + (key === 'color' ? '' : keyName);\n                if (acc[key])\n                    acc[key] += `;${varKey}:${value}`;\n                else\n                    acc[key] = `${varKey}:${value}`;\n            }\n        }\n        return acc;\n    }, {});\n    token.htmlStyle = defaultColor\n        ? stringifyTokenStyle(mergedStyles)\n        : Object.values(mergedStyles).join(';');\n    return token;\n}\n\nfunction codeToHast(internal, code, options, transformerContext = {\n    meta: {},\n    options,\n    codeToHast: (_code, _options) => codeToHast(internal, _code, _options),\n    codeToTokens: (_code, _options) => codeToTokens(internal, _code, _options),\n}) {\n    let input = code;\n    for (const transformer of getTransformers(options))\n        input = transformer.preprocess?.call(transformerContext, input, options) || input;\n    let { tokens, fg, bg, themeName, rootStyle, } = codeToTokens(internal, input, options);\n    const { mergeWhitespaces = true, } = options;\n    if (mergeWhitespaces === true)\n        tokens = mergeWhitespaceTokens(tokens);\n    else if (mergeWhitespaces === 'never')\n        tokens = splitWhitespaceTokens(tokens);\n    const contextSource = {\n        ...transformerContext,\n        get source() {\n            return input;\n        },\n    };\n    for (const transformer of getTransformers(options))\n        tokens = transformer.tokens?.call(contextSource, tokens) || tokens;\n    return tokensToHast(tokens, {\n        ...options,\n        fg,\n        bg,\n        themeName,\n        rootStyle,\n    }, contextSource);\n}\nfunction tokensToHast(tokens, options, transformerContext) {\n    const transformers = getTransformers(options);\n    const lines = [];\n    const root = {\n        type: 'root',\n        children: [],\n    };\n    const { structure = 'classic', } = options;\n    let preNode = {\n        type: 'element',\n        tagName: 'pre',\n        properties: {\n            class: `shiki ${options.themeName || ''}`,\n            style: options.rootStyle || `background-color:${options.bg};color:${options.fg}`,\n            tabindex: '0',\n            ...Object.fromEntries(Array.from(Object.entries(options.meta || {}))\n                .filter(([key]) => !key.startsWith('_'))),\n        },\n        children: [],\n    };\n    let codeNode = {\n        type: 'element',\n        tagName: 'code',\n        properties: {},\n        children: lines,\n    };\n    const lineNodes = [];\n    const context = {\n        ...transformerContext,\n        structure,\n        addClassToHast,\n        get source() {\n            return transformerContext.source;\n        },\n        get tokens() {\n            return tokens;\n        },\n        get options() {\n            return options;\n        },\n        get root() {\n            return root;\n        },\n        get pre() {\n            return preNode;\n        },\n        get code() {\n            return codeNode;\n        },\n        get lines() {\n            return lineNodes;\n        },\n    };\n    tokens.forEach((line, idx) => {\n        if (idx) {\n            if (structure === 'inline')\n                root.children.push({ type: 'element', tagName: 'br', properties: {}, children: [] });\n            else if (structure === 'classic')\n                lines.push({ type: 'text', value: '\\n' });\n        }\n        let lineNode = {\n            type: 'element',\n            tagName: 'span',\n            properties: { class: 'line' },\n            children: [],\n        };\n        let col = 0;\n        for (const token of line) {\n            let tokenNode = {\n                type: 'element',\n                tagName: 'span',\n                properties: {},\n                children: [{ type: 'text', value: token.content }],\n            };\n            const style = token.htmlStyle || stringifyTokenStyle(getTokenStyleObject(token));\n            if (style)\n                tokenNode.properties.style = style;\n            for (const transformer of transformers)\n                tokenNode = transformer?.span?.call(context, tokenNode, idx + 1, col, lineNode) || tokenNode;\n            if (structure === 'inline')\n                root.children.push(tokenNode);\n            else if (structure === 'classic')\n                lineNode.children.push(tokenNode);\n            col += token.content.length;\n        }\n        if (structure === 'classic') {\n            for (const transformer of transformers)\n                lineNode = transformer?.line?.call(context, lineNode, idx + 1) || lineNode;\n            lineNodes.push(lineNode);\n            lines.push(lineNode);\n        }\n    });\n    if (structure === 'classic') {\n        for (const transformer of transformers)\n            codeNode = transformer?.code?.call(context, codeNode) || codeNode;\n        preNode.children.push(codeNode);\n        for (const transformer of transformers)\n            preNode = transformer?.pre?.call(context, preNode) || preNode;\n        root.children.push(preNode);\n    }\n    let result = root;\n    for (const transformer of transformers)\n        result = transformer?.root?.call(context, result) || result;\n    return result;\n}\nfunction mergeWhitespaceTokens(tokens) {\n    return tokens.map((line) => {\n        const newLine = [];\n        let carryOnContent = '';\n        let firstOffset = 0;\n        line.forEach((token, idx) => {\n            const isUnderline = token.fontStyle && token.fontStyle & FontStyle.Underline;\n            const couldMerge = !isUnderline;\n            if (couldMerge && token.content.match(/^\\s+$/) && line[idx + 1]) {\n                if (!firstOffset)\n                    firstOffset = token.offset;\n                carryOnContent += token.content;\n            }\n            else {\n                if (carryOnContent) {\n                    if (couldMerge) {\n                        newLine.push({\n                            ...token,\n                            offset: firstOffset,\n                            content: carryOnContent + token.content,\n                        });\n                    }\n                    else {\n                        newLine.push({\n                            content: carryOnContent,\n                            offset: firstOffset,\n                        }, token);\n                    }\n                    firstOffset = 0;\n                    carryOnContent = '';\n                }\n                else {\n                    newLine.push(token);\n                }\n            }\n        });\n        return newLine;\n    });\n}\nfunction splitWhitespaceTokens(tokens) {\n    return tokens.map((line) => {\n        return line.flatMap((token) => {\n            if (token.content.match(/^\\s+$/))\n                return token;\n            // eslint-disable-next-line regexp/no-super-linear-backtracking\n            const match = token.content.match(/^(\\s*)(.*?)(\\s*)$/);\n            if (!match)\n                return token;\n            const [, leading, content, trailing] = match;\n            if (!leading && !trailing)\n                return token;\n            const expanded = [{\n                    ...token,\n                    offset: token.offset + leading.length,\n                    content,\n                }];\n            if (leading) {\n                expanded.unshift({\n                    content: leading,\n                    offset: token.offset,\n                });\n            }\n            if (trailing) {\n                expanded.push({\n                    content: trailing,\n                    offset: token.offset + leading.length + content.length,\n                });\n            }\n            return expanded;\n        });\n    });\n}\n\n/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nconst htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr'\n];\n\n/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nclass Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property;\n    this.normal = normal;\n    if (space) {\n      this.space = space;\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {};\n/** @type {Normal} */\nSchema.prototype.normal = {};\n/** @type {string|null} */\nSchema.prototype.space = null;\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nfunction merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {};\n  /** @type {Normal} */\n  const normal = {};\n  let index = -1;\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property);\n    Object.assign(normal, definitions[index].normal);\n  }\n\n  return new Schema(property, normal, space)\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction normalize(value) {\n  return value.toLowerCase()\n}\n\nclass Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property;\n    /** @type {string} */\n    this.attribute = attribute;\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null;\nInfo.prototype.boolean = false;\nInfo.prototype.booleanish = false;\nInfo.prototype.overloadedBoolean = false;\nInfo.prototype.number = false;\nInfo.prototype.commaSeparated = false;\nInfo.prototype.spaceSeparated = false;\nInfo.prototype.commaOrSpaceSeparated = false;\nInfo.prototype.mustUseProperty = false;\nInfo.prototype.defined = false;\n\nlet powers = 0;\n\nconst boolean = increment();\nconst booleanish = increment();\nconst overloadedBoolean = increment();\nconst number = increment();\nconst spaceSeparated = increment();\nconst commaSeparated = increment();\nconst commaOrSpaceSeparated = increment();\n\nfunction increment() {\n  return 2 ** ++powers\n}\n\nvar types = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  boolean: boolean,\n  booleanish: booleanish,\n  commaOrSpaceSeparated: commaOrSpaceSeparated,\n  commaSeparated: commaSeparated,\n  number: number,\n  overloadedBoolean: overloadedBoolean,\n  spaceSeparated: spaceSeparated\n});\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types);\n\nclass DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1;\n\n    super(property, attribute);\n\n    mark(this, 'space', space);\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index];\n        mark(this, checks[index], (mask & types[check]) === types[check]);\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true;\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value;\n  }\n}\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\n\nconst own$3 = {}.hasOwnProperty;\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nfunction create(definition) {\n  /** @type {Properties} */\n  const property = {};\n  /** @type {Normal} */\n  const normal = {};\n  /** @type {string} */\n  let prop;\n\n  for (prop in definition.properties) {\n    if (own$3.call(definition.properties, prop)) {\n      const value = definition.properties[prop];\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      );\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true;\n      }\n\n      property[prop] = info;\n\n      normal[normalize(prop)] = prop;\n      normal[normalize(info.attribute)] = prop;\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n\nconst xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n});\n\nconst xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n});\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nfunction caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nfunction caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n\nconst xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n});\n\nconst aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n});\n\nconst html$3 = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n});\n\nconst svg$1 = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n});\n\n/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\n\nconst valid = /^data[-\\w.:]+$/i;\nconst dash = /-[a-z]/g;\nconst cap = /[A-Z]/g;\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nfunction find(schema, value) {\n  const normal = normalize(value);\n  let prop = value;\n  let Type = Info;\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase);\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4);\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab);\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes;\n        }\n\n        value = 'data' + dashes;\n      }\n    }\n\n    Type = DefinedInfo;\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n\n/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nconst html$2 = merge([xml, xlink, xmlns, aria, html$3], 'html');\nconst svg = merge([xml, xlink, xmlns, aria, svg$1], 'svg');\n\n/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own$2 = {}.hasOwnProperty;\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nfunction zwitch(key, options) {\n  const settings = options || {};\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid;\n    const handlers = one.handlers;\n\n    if (value && own$2.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key]);\n      // @ts-expect-error Indexable.\n      fn = own$2.call(handlers, id) ? handlers[id] : one.unknown;\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {};\n  one.invalid = settings.invalid;\n  one.unknown = settings.unknown;\n\n  // @ts-expect-error: matches!\n  return one\n}\n\n/**\n * @typedef CoreOptions\n * @property {Array<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nfunction core(value, options) {\n  value = value.replace(\n    options.subset ? charactersToExpression(options.subset) : /[\"&'<>`]/g,\n    basic\n  );\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(\n        // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n        /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g,\n        basic\n      )\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * @param {Array<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = [];\n  let index = -1;\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'));\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n\n/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nfunction toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase();\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n\n/**\n * Configurable ways to encode characters as decimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nfunction toDecimal(code, next, omit) {\n  const value = '&#' + String(code);\n  return omit && next && !/\\d/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n\n/**\n * List of legacy HTML named character references that don’t need a trailing semicolon.\n *\n * @type {Array<string>}\n */\nconst characterEntitiesLegacy = [\n  'AElig',\n  'AMP',\n  'Aacute',\n  'Acirc',\n  'Agrave',\n  'Aring',\n  'Atilde',\n  'Auml',\n  'COPY',\n  'Ccedil',\n  'ETH',\n  'Eacute',\n  'Ecirc',\n  'Egrave',\n  'Euml',\n  'GT',\n  'Iacute',\n  'Icirc',\n  'Igrave',\n  'Iuml',\n  'LT',\n  'Ntilde',\n  'Oacute',\n  'Ocirc',\n  'Ograve',\n  'Oslash',\n  'Otilde',\n  'Ouml',\n  'QUOT',\n  'REG',\n  'THORN',\n  'Uacute',\n  'Ucirc',\n  'Ugrave',\n  'Uuml',\n  'Yacute',\n  'aacute',\n  'acirc',\n  'acute',\n  'aelig',\n  'agrave',\n  'amp',\n  'aring',\n  'atilde',\n  'auml',\n  'brvbar',\n  'ccedil',\n  'cedil',\n  'cent',\n  'copy',\n  'curren',\n  'deg',\n  'divide',\n  'eacute',\n  'ecirc',\n  'egrave',\n  'eth',\n  'euml',\n  'frac12',\n  'frac14',\n  'frac34',\n  'gt',\n  'iacute',\n  'icirc',\n  'iexcl',\n  'igrave',\n  'iquest',\n  'iuml',\n  'laquo',\n  'lt',\n  'macr',\n  'micro',\n  'middot',\n  'nbsp',\n  'not',\n  'ntilde',\n  'oacute',\n  'ocirc',\n  'ograve',\n  'ordf',\n  'ordm',\n  'oslash',\n  'otilde',\n  'ouml',\n  'para',\n  'plusmn',\n  'pound',\n  'quot',\n  'raquo',\n  'reg',\n  'sect',\n  'shy',\n  'sup1',\n  'sup2',\n  'sup3',\n  'szlig',\n  'thorn',\n  'times',\n  'uacute',\n  'ucirc',\n  'ugrave',\n  'uml',\n  'uuml',\n  'yacute',\n  'yen',\n  'yuml'\n];\n\n/**\n * Map of named character references from HTML 4.\n *\n * @type {Record<string, string>}\n */\nconst characterEntitiesHtml4 = {\n  nbsp: ' ',\n  iexcl: '¡',\n  cent: '¢',\n  pound: '£',\n  curren: '¤',\n  yen: '¥',\n  brvbar: '¦',\n  sect: '§',\n  uml: '¨',\n  copy: '©',\n  ordf: 'ª',\n  laquo: '«',\n  not: '¬',\n  shy: '­',\n  reg: '®',\n  macr: '¯',\n  deg: '°',\n  plusmn: '±',\n  sup2: '²',\n  sup3: '³',\n  acute: '´',\n  micro: 'µ',\n  para: '¶',\n  middot: '·',\n  cedil: '¸',\n  sup1: '¹',\n  ordm: 'º',\n  raquo: '»',\n  frac14: '¼',\n  frac12: '½',\n  frac34: '¾',\n  iquest: '¿',\n  Agrave: 'À',\n  Aacute: 'Á',\n  Acirc: 'Â',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Aring: 'Å',\n  AElig: 'Æ',\n  Ccedil: 'Ç',\n  Egrave: 'È',\n  Eacute: 'É',\n  Ecirc: 'Ê',\n  Euml: 'Ë',\n  Igrave: 'Ì',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Iuml: 'Ï',\n  ETH: 'Ð',\n  Ntilde: 'Ñ',\n  Ograve: 'Ò',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Otilde: 'Õ',\n  Ouml: 'Ö',\n  times: '×',\n  Oslash: 'Ø',\n  Ugrave: 'Ù',\n  Uacute: 'Ú',\n  Ucirc: 'Û',\n  Uuml: 'Ü',\n  Yacute: 'Ý',\n  THORN: 'Þ',\n  szlig: 'ß',\n  agrave: 'à',\n  aacute: 'á',\n  acirc: 'â',\n  atilde: 'ã',\n  auml: 'ä',\n  aring: 'å',\n  aelig: 'æ',\n  ccedil: 'ç',\n  egrave: 'è',\n  eacute: 'é',\n  ecirc: 'ê',\n  euml: 'ë',\n  igrave: 'ì',\n  iacute: 'í',\n  icirc: 'î',\n  iuml: 'ï',\n  eth: 'ð',\n  ntilde: 'ñ',\n  ograve: 'ò',\n  oacute: 'ó',\n  ocirc: 'ô',\n  otilde: 'õ',\n  ouml: 'ö',\n  divide: '÷',\n  oslash: 'ø',\n  ugrave: 'ù',\n  uacute: 'ú',\n  ucirc: 'û',\n  uuml: 'ü',\n  yacute: 'ý',\n  thorn: 'þ',\n  yuml: 'ÿ',\n  fnof: 'ƒ',\n  Alpha: 'Α',\n  Beta: 'Β',\n  Gamma: 'Γ',\n  Delta: 'Δ',\n  Epsilon: 'Ε',\n  Zeta: 'Ζ',\n  Eta: 'Η',\n  Theta: 'Θ',\n  Iota: 'Ι',\n  Kappa: 'Κ',\n  Lambda: 'Λ',\n  Mu: 'Μ',\n  Nu: 'Ν',\n  Xi: 'Ξ',\n  Omicron: 'Ο',\n  Pi: 'Π',\n  Rho: 'Ρ',\n  Sigma: 'Σ',\n  Tau: 'Τ',\n  Upsilon: 'Υ',\n  Phi: 'Φ',\n  Chi: 'Χ',\n  Psi: 'Ψ',\n  Omega: 'Ω',\n  alpha: 'α',\n  beta: 'β',\n  gamma: 'γ',\n  delta: 'δ',\n  epsilon: 'ε',\n  zeta: 'ζ',\n  eta: 'η',\n  theta: 'θ',\n  iota: 'ι',\n  kappa: 'κ',\n  lambda: 'λ',\n  mu: 'μ',\n  nu: 'ν',\n  xi: 'ξ',\n  omicron: 'ο',\n  pi: 'π',\n  rho: 'ρ',\n  sigmaf: 'ς',\n  sigma: 'σ',\n  tau: 'τ',\n  upsilon: 'υ',\n  phi: 'φ',\n  chi: 'χ',\n  psi: 'ψ',\n  omega: 'ω',\n  thetasym: 'ϑ',\n  upsih: 'ϒ',\n  piv: 'ϖ',\n  bull: '•',\n  hellip: '…',\n  prime: '′',\n  Prime: '″',\n  oline: '‾',\n  frasl: '⁄',\n  weierp: '℘',\n  image: 'ℑ',\n  real: 'ℜ',\n  trade: '™',\n  alefsym: 'ℵ',\n  larr: '←',\n  uarr: '↑',\n  rarr: '→',\n  darr: '↓',\n  harr: '↔',\n  crarr: '↵',\n  lArr: '⇐',\n  uArr: '⇑',\n  rArr: '⇒',\n  dArr: '⇓',\n  hArr: '⇔',\n  forall: '∀',\n  part: '∂',\n  exist: '∃',\n  empty: '∅',\n  nabla: '∇',\n  isin: '∈',\n  notin: '∉',\n  ni: '∋',\n  prod: '∏',\n  sum: '∑',\n  minus: '−',\n  lowast: '∗',\n  radic: '√',\n  prop: '∝',\n  infin: '∞',\n  ang: '∠',\n  and: '∧',\n  or: '∨',\n  cap: '∩',\n  cup: '∪',\n  int: '∫',\n  there4: '∴',\n  sim: '∼',\n  cong: '≅',\n  asymp: '≈',\n  ne: '≠',\n  equiv: '≡',\n  le: '≤',\n  ge: '≥',\n  sub: '⊂',\n  sup: '⊃',\n  nsub: '⊄',\n  sube: '⊆',\n  supe: '⊇',\n  oplus: '⊕',\n  otimes: '⊗',\n  perp: '⊥',\n  sdot: '⋅',\n  lceil: '⌈',\n  rceil: '⌉',\n  lfloor: '⌊',\n  rfloor: '⌋',\n  lang: '〈',\n  rang: '〉',\n  loz: '◊',\n  spades: '♠',\n  clubs: '♣',\n  hearts: '♥',\n  diams: '♦',\n  quot: '\"',\n  amp: '&',\n  lt: '<',\n  gt: '>',\n  OElig: 'Œ',\n  oelig: 'œ',\n  Scaron: 'Š',\n  scaron: 'š',\n  Yuml: 'Ÿ',\n  circ: 'ˆ',\n  tilde: '˜',\n  ensp: ' ',\n  emsp: ' ',\n  thinsp: ' ',\n  zwnj: '‌',\n  zwj: '‍',\n  lrm: '‎',\n  rlm: '‏',\n  ndash: '–',\n  mdash: '—',\n  lsquo: '‘',\n  rsquo: '’',\n  sbquo: '‚',\n  ldquo: '“',\n  rdquo: '”',\n  bdquo: '„',\n  dagger: '†',\n  Dagger: '‡',\n  permil: '‰',\n  lsaquo: '‹',\n  rsaquo: '›',\n  euro: '€'\n};\n\n/**\n * List of legacy (that don’t need a trailing `;`) named references which could,\n * depending on what follows them, turn into a different meaning\n *\n * @type {Array<string>}\n */\nconst dangerous = [\n  'cent',\n  'copy',\n  'divide',\n  'gt',\n  'lt',\n  'not',\n  'para',\n  'times'\n];\n\nconst own$1 = {}.hasOwnProperty;\n\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Record<string, string>}\n */\nconst characters = {};\n\n/** @type {string} */\nlet key;\n\nfor (key in characterEntitiesHtml4) {\n  if (own$1.call(characterEntitiesHtml4, key)) {\n    characters[characterEntitiesHtml4[key]] = key;\n  }\n}\n\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\nfunction toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code);\n\n  if (own$1.call(characters, character)) {\n    const name = characters[character];\n    const value = '&' + name;\n\n    if (\n      omit &&\n      characterEntitiesLegacy.includes(name) &&\n      !dangerous.includes(name) &&\n      (!attribute ||\n        (next &&\n          next !== 61 /* `=` */ &&\n          /[^\\da-z]/i.test(String.fromCharCode(next))))\n    ) {\n      return value\n    }\n\n    return value + ';'\n  }\n\n  return ''\n}\n\n/**\n * @typedef FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nfunction formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons);\n  /** @type {string|undefined} */\n  let named;\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    );\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if (\n    (options.useShortestReferences || !named) &&\n    options.useShortestReferences\n  ) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons);\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal;\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n\n/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nfunction stringifyEntities(value, options) {\n  return core(value, Object.assign({format: formatSmart}, options))\n}\n\n/**\n * @import {Comment, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\n\nconst htmlCommentRegex = /^>|^->|<!--|-->|--!>|<!-$/g;\n\n// Declare arrays as variables so it can be cached by `stringifyEntities`\nconst bogusCommentEntitySubset = ['>'];\nconst commentEntitySubset = ['<', '>'];\n\n/**\n * Serialize a comment.\n *\n * @param {Comment} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction comment(node, _1, _2, state) {\n  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n  return state.settings.bogusComments\n    ? '<?' +\n        stringifyEntities(\n          node.value,\n          Object.assign({}, state.settings.characterReferences, {\n            subset: bogusCommentEntitySubset\n          })\n        ) +\n        '>'\n    : '<!--' + node.value.replace(htmlCommentRegex, encode) + '-->'\n\n  /**\n   * @param {string} $0\n   */\n  function encode($0) {\n    return stringifyEntities(\n      $0,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: commentEntitySubset\n      })\n    )\n  }\n}\n\n/**\n * @import {Doctype, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\n/**\n * Serialize a doctype.\n *\n * @param {Doctype} _1\n *   Node to handle.\n * @param {number | undefined} _2\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _3\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction doctype(_1, _2, _3, state) {\n  return (\n    '<!' +\n    (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +\n    (state.settings.tightDoctype ? '' : ' ') +\n    'html>'\n  )\n}\n\n/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nfunction ccount(value, character) {\n  const source = String(value);\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0;\n  let index = source.indexOf(character);\n\n  while (index !== -1) {\n    count++;\n    index = source.indexOf(character, index + character.length);\n  }\n\n  return count\n}\n\n/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nfunction stringify$1(values, options) {\n  const settings = options || {};\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values;\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n\n/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nfunction stringify(values) {\n  return values.join(' ').trim()\n}\n\n/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g;\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nfunction whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n\n/**\n * @import {Parents, RootContent} from 'hast'\n */\n\n\nconst siblingAfter = siblings(1);\nconst siblingBefore = siblings(-1);\n\n/** @type {Array<RootContent>} */\nconst emptyChildren$1 = [];\n\n/**\n * Factory to check siblings in a direction.\n *\n * @param {number} increment\n */\nfunction siblings(increment) {\n  return sibling\n\n  /**\n   * Find applicable siblings in a direction.\n   *\n   * @template {Parents} Parent\n   *   Parent type.\n   * @param {Parent | undefined} parent\n   *   Parent.\n   * @param {number | undefined} index\n   *   Index of child in `parent`.\n   * @param {boolean | undefined} [includeWhitespace=false]\n   *   Whether to include whitespace (default: `false`).\n   * @returns {Parent extends {children: Array<infer Child>} ? Child | undefined : never}\n   *   Child of parent.\n   */\n  function sibling(parent, index, includeWhitespace) {\n    const siblings = parent ? parent.children : emptyChildren$1;\n    let offset = (index || 0) + increment;\n    let next = siblings[offset];\n\n    if (!includeWhitespace) {\n      while (next && whitespace(next)) {\n        offset += increment;\n        next = siblings[offset];\n      }\n    }\n\n    // @ts-expect-error: it’s a correct child.\n    return next\n  }\n}\n\n/**\n * @import {Element, Parents} from 'hast'\n */\n\n/**\n * @callback OmitHandle\n *   Check if a tag can be omitted.\n * @param {Element} element\n *   Element to check.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether to omit a tag.\n *\n */\n\nconst own = {}.hasOwnProperty;\n\n/**\n * Factory to check if a given node can have a tag omitted.\n *\n * @param {Record<string, OmitHandle>} handlers\n *   Omission handlers, where each key is a tag name, and each value is the\n *   corresponding handler.\n * @returns {OmitHandle}\n *   Whether to omit a tag of an element.\n */\nfunction omission(handlers) {\n  return omit\n\n  /**\n   * Check if a given node can have a tag omitted.\n   *\n   * @type {OmitHandle}\n   */\n  function omit(node, index, parent) {\n    return (\n      own.call(handlers, node.tagName) &&\n      handlers[node.tagName](node, index, parent)\n    )\n  }\n}\n\n/**\n * @import {Element, Parents} from 'hast'\n */\n\n\nconst closing = omission({\n  body: body$1,\n  caption: headOrColgroupOrCaption,\n  colgroup: headOrColgroupOrCaption,\n  dd,\n  dt,\n  head: headOrColgroupOrCaption,\n  html: html$1,\n  li,\n  optgroup,\n  option,\n  p,\n  rp: rubyElement,\n  rt: rubyElement,\n  tbody: tbody$1,\n  td: cells,\n  tfoot,\n  th: cells,\n  thead,\n  tr\n});\n\n/**\n * Macro for `</head>`, `</colgroup>`, and `</caption>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction headOrColgroupOrCaption(_, index, parent) {\n  const next = siblingAfter(parent, index, true);\n  return (\n    !next ||\n    (next.type !== 'comment' &&\n      !(next.type === 'text' && whitespace(next.value.charAt(0))))\n  )\n}\n\n/**\n * Whether to omit `</html>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction html$1(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</body>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction body$1(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</p>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction p(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return next\n    ? next.type === 'element' &&\n        (next.tagName === 'address' ||\n          next.tagName === 'article' ||\n          next.tagName === 'aside' ||\n          next.tagName === 'blockquote' ||\n          next.tagName === 'details' ||\n          next.tagName === 'div' ||\n          next.tagName === 'dl' ||\n          next.tagName === 'fieldset' ||\n          next.tagName === 'figcaption' ||\n          next.tagName === 'figure' ||\n          next.tagName === 'footer' ||\n          next.tagName === 'form' ||\n          next.tagName === 'h1' ||\n          next.tagName === 'h2' ||\n          next.tagName === 'h3' ||\n          next.tagName === 'h4' ||\n          next.tagName === 'h5' ||\n          next.tagName === 'h6' ||\n          next.tagName === 'header' ||\n          next.tagName === 'hgroup' ||\n          next.tagName === 'hr' ||\n          next.tagName === 'main' ||\n          next.tagName === 'menu' ||\n          next.tagName === 'nav' ||\n          next.tagName === 'ol' ||\n          next.tagName === 'p' ||\n          next.tagName === 'pre' ||\n          next.tagName === 'section' ||\n          next.tagName === 'table' ||\n          next.tagName === 'ul')\n    : !parent ||\n        // Confusing parent.\n        !(\n          parent.type === 'element' &&\n          (parent.tagName === 'a' ||\n            parent.tagName === 'audio' ||\n            parent.tagName === 'del' ||\n            parent.tagName === 'ins' ||\n            parent.tagName === 'map' ||\n            parent.tagName === 'noscript' ||\n            parent.tagName === 'video')\n        )\n}\n\n/**\n * Whether to omit `</li>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction li(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || (next.type === 'element' && next.tagName === 'li')\n}\n\n/**\n * Whether to omit `</dt>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dt(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd')\n  )\n}\n\n/**\n * Whether to omit `</dd>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dd(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd'))\n  )\n}\n\n/**\n * Whether to omit `</rt>` or `</rp>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction rubyElement(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'rp' || next.tagName === 'rt'))\n  )\n}\n\n/**\n * Whether to omit `</optgroup>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction optgroup(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || (next.type === 'element' && next.tagName === 'optgroup')\n}\n\n/**\n * Whether to omit `</option>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction option(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'option' || next.tagName === 'optgroup'))\n  )\n}\n\n/**\n * Whether to omit `</thead>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction thead(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot')\n  )\n}\n\n/**\n * Whether to omit `</tbody>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tbody$1(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot'))\n  )\n}\n\n/**\n * Whether to omit `</tfoot>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tfoot(_, index, parent) {\n  return !siblingAfter(parent, index)\n}\n\n/**\n * Whether to omit `</tr>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tr(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return !next || (next.type === 'element' && next.tagName === 'tr')\n}\n\n/**\n * Whether to omit `</td>` or `</th>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction cells(_, index, parent) {\n  const next = siblingAfter(parent, index);\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'td' || next.tagName === 'th'))\n  )\n}\n\n/**\n * @import {Element, Parents} from 'hast'\n */\n\n\nconst opening = omission({\n  body,\n  colgroup,\n  head,\n  html,\n  tbody\n});\n\n/**\n * Whether to omit `<html>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction html(node) {\n  const head = siblingAfter(node, -1);\n  return !head || head.type !== 'comment'\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction head(node) {\n  const children = node.children;\n  /** @type {Array<string>} */\n  const seen = [];\n  let index = -1;\n\n  while (++index < children.length) {\n    const child = children[index];\n    if (\n      child.type === 'element' &&\n      (child.tagName === 'title' || child.tagName === 'base')\n    ) {\n      if (seen.includes(child.tagName)) return false\n      seen.push(child.tagName);\n    }\n  }\n\n  return children.length > 0\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction body(node) {\n  const head = siblingAfter(node, -1, true);\n\n  return (\n    !head ||\n    (head.type !== 'comment' &&\n      !(head.type === 'text' && whitespace(head.value.charAt(0))) &&\n      !(\n        head.type === 'element' &&\n        (head.tagName === 'meta' ||\n          head.tagName === 'link' ||\n          head.tagName === 'script' ||\n          head.tagName === 'style' ||\n          head.tagName === 'template')\n      ))\n  )\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction colgroup(node, index, parent) {\n  const previous = siblingBefore(parent, index);\n  const head = siblingAfter(node, -1, true);\n\n  // Previous colgroup was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    previous.tagName === 'colgroup' &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'col')\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction tbody(node, index, parent) {\n  const previous = siblingBefore(parent, index);\n  const head = siblingAfter(node, -1);\n\n  // Previous table section was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    (previous.tagName === 'thead' || previous.tagName === 'tbody') &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'tr')\n}\n\n/**\n * @import {Element, Parents, Properties} from 'hast'\n * @import {State} from '../index.js'\n */\n\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'double' | 'name' | 'single' | 'unquoted', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [\n    ['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [\n    ['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [\n    [\"&'\".split(''), '\"&\\'`'.split('')],\n    [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [\n    ['\"&'.split(''), '\"&\\'`'.split('')],\n    ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]\n  ]\n};\n\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction element(node, index, parent, state) {\n  const schema = state.schema;\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags;\n  let selfClosing =\n    schema.space === 'svg'\n      ? state.settings.closeEmptyElements\n      : state.settings.voids.includes(node.tagName.toLowerCase());\n  /** @type {Array<string>} */\n  const parts = [];\n  /** @type {string} */\n  let last;\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = svg;\n  }\n\n  const attributes = serializeAttributes(state, node.properties);\n\n  const content = state.all(\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  );\n\n  state.schema = schema;\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  // Note: `menuitem` has since been removed from the HTML spec, and so is no\n  // longer void.\n  if (content) selfClosing = false;\n\n  if (attributes || !omit || !opening(node, index, parent)) {\n    parts.push('<', node.tagName, attributes ? ' ' + attributes : '');\n\n    if (\n      selfClosing &&\n      (schema.space === 'svg' || state.settings.closeSelfClosing)\n    ) {\n      last = attributes.charAt(attributes.length - 1);\n      if (\n        !state.settings.tightSelfClosing ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ');\n      }\n\n      parts.push('/');\n    }\n\n    parts.push('>');\n  }\n\n  parts.push(content);\n\n  if (!selfClosing && (!omit || !closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>');\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {State} state\n * @param {Properties | null | undefined} properties\n * @returns {string}\n */\nfunction serializeAttributes(state, properties) {\n  /** @type {Array<string>} */\n  const values = [];\n  let index = -1;\n  /** @type {string} */\n  let key;\n\n  if (properties) {\n    for (key in properties) {\n      if (properties[key] !== null && properties[key] !== undefined) {\n        const value = serializeAttribute(state, key, properties[key]);\n        if (value) values.push(value);\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes\n      ? values[index].charAt(values[index].length - 1)\n      : undefined;\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' ';\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {State} state\n * @param {string} key\n * @param {Properties[keyof Properties]} value\n * @returns {string}\n */\nfunction serializeAttribute(state, key, value) {\n  const info = find(state.schema, key);\n  const x =\n    state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1;\n  const y = state.settings.allowDangerousCharacters ? 0 : 1;\n  let quote = state.quote;\n  /** @type {string | undefined} */\n  let result;\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true;\n  } else if (\n    info.boolean ||\n    (info.overloadedBoolean && typeof value !== 'string')\n  ) {\n    value = Boolean(value);\n  }\n\n  if (\n    value === null ||\n    value === undefined ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: constants.name[x][y]\n    })\n  );\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can’t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  value = Array.isArray(value)\n    ? (info.commaSeparated ? stringify$1 : stringify)(value, {\n        padLeft: !state.settings.tightCommaSeparatedLists\n      })\n    : String(value);\n\n  if (state.settings.collapseEmptyAttributes && !value) return name\n\n  // Check unquoted value.\n  if (state.settings.preferUnquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, state.settings.characterReferences, {\n        attribute: true,\n        subset: constants.unquoted[x][y]\n      })\n    );\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (\n      state.settings.quoteSmart &&\n      ccount(value, quote) > ccount(value, state.alternative)\n    ) {\n      quote = state.alternative;\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, state.settings.characterReferences, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n          attribute: true\n        })\n      ) +\n      quote;\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n\n/**\n * @import {Parents, Text} from 'hast'\n * @import {Raw} from 'mdast-util-to-hast'\n * @import {State} from '../index.js'\n */\n\n\n// Declare array as variable so it can be cached by `stringifyEntities`\nconst textEntitySubset = ['<', '&'];\n\n/**\n * Serialize a text node.\n *\n * @param {Raw | Text} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : stringifyEntities(\n        node.value,\n        Object.assign({}, state.settings.characterReferences, {\n          subset: textEntitySubset\n        })\n      )\n}\n\n/**\n * @import {Parents} from 'hast'\n * @import {Raw} from 'mdast-util-to-hast'\n * @import {State} from '../index.js'\n */\n\n\n/**\n * Serialize a raw node.\n *\n * @param {Raw} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction raw(node, index, parent, state) {\n  return state.settings.allowDangerousHtml\n    ? node.value\n    : text(node, index, parent, state)\n}\n\n/**\n * @import {Parents, Root} from 'hast'\n * @import {State} from '../index.js'\n */\n\n/**\n * Serialize a root.\n *\n * @param {Root} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction root(node, _1, _2, state) {\n  return state.all(node)\n}\n\n/**\n * @import {Nodes, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\n\n/**\n * @type {(node: Nodes, index: number | undefined, parent: Parents | undefined, state: State) => string}\n */\nconst handle = zwitch('type', {\n  invalid,\n  unknown,\n  handlers: {comment, doctype, element, raw, root, text}\n});\n\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`')\n}\n\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node_\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\nfunction unknown(node_) {\n  // `type` is guaranteed by runtime JS.\n  const node = /** @type {Nodes} */ (node_);\n  throw new Error('Cannot compile unknown node `' + node.type + '`')\n}\n\n/**\n * @import {Nodes, Parents, RootContent} from 'hast'\n * @import {Schema} from 'property-information'\n * @import {Options as StringifyEntitiesOptions} from 'stringify-entities'\n */\n\n\n/** @type {Options} */\nconst emptyOptions = {};\n\n/** @type {CharacterReferences} */\nconst emptyCharacterReferences = {};\n\n/** @type {Array<never>} */\nconst emptyChildren = [];\n\n/**\n * Serialize hast as HTML.\n *\n * @param {Array<RootContent> | Nodes} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized HTML.\n */\nfunction toHtml(tree, options) {\n  const options_ = options || emptyOptions;\n  const quote = options_.quote || '\"';\n  const alternative = quote === '\"' ? \"'\" : '\"';\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {State} */\n  const state = {\n    one,\n    all,\n    settings: {\n      omitOptionalTags: options_.omitOptionalTags || false,\n      allowParseErrors: options_.allowParseErrors || false,\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\n      quoteSmart: options_.quoteSmart || false,\n      preferUnquoted: options_.preferUnquoted || false,\n      tightAttributes: options_.tightAttributes || false,\n      upperDoctype: options_.upperDoctype || false,\n      tightDoctype: options_.tightDoctype || false,\n      bogusComments: options_.bogusComments || false,\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\n      tightSelfClosing: options_.tightSelfClosing || false,\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\n      allowDangerousHtml: options_.allowDangerousHtml || false,\n      voids: options_.voids || htmlVoidElements,\n      characterReferences:\n        options_.characterReferences || emptyCharacterReferences,\n      closeSelfClosing: options_.closeSelfClosing || false,\n      closeEmptyElements: options_.closeEmptyElements || false\n    },\n    schema: options_.space === 'svg' ? svg : html$2,\n    quote,\n    alternative\n  };\n\n  return state.one(\n    Array.isArray(tree) ? {type: 'root', children: tree} : tree,\n    undefined,\n    undefined\n  )\n}\n\n/**\n * Serialize a node.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Nodes} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node, index, parent) {\n  return handle(node, index, parent, this)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parents | undefined} parent\n *   Parent whose children to serialize.\n * @returns {string}\n */\nfunction all(parent) {\n  /** @type {Array<string>} */\n  const results = [];\n  const children = (parent && parent.children) || emptyChildren;\n  let index = -1;\n\n  while (++index < children.length) {\n    results[index] = this.one(children[index], index, parent);\n  }\n\n  return results.join('')\n}\n\n/**\n * Get highlighted code in HTML.\n */\nfunction codeToHtml(internal, code, options) {\n    const context = {\n        meta: {},\n        options,\n        codeToHast: (_code, _options) => codeToHast(internal, _code, _options),\n        codeToTokens: (_code, _options) => codeToTokens(internal, _code, _options),\n    };\n    let result = toHtml(codeToHast(internal, code, options, context));\n    for (const transformer of getTransformers(options))\n        result = transformer.postprocess?.call(context, result, options) || result;\n    return result;\n}\n\n/**\n * https://github.com/microsoft/vscode/blob/f7f05dee53fb33fe023db2e06e30a89d3094488f/src/vs/platform/theme/common/colorRegistry.ts#L258-L268\n */\nconst VSCODE_FALLBACK_EDITOR_FG = { light: '#333333', dark: '#bbbbbb' };\nconst VSCODE_FALLBACK_EDITOR_BG = { light: '#fffffe', dark: '#1e1e1e' };\nconst RESOLVED_KEY = '__shiki_resolved';\n/**\n * Normalize a textmate theme to shiki theme\n */\nfunction normalizeTheme(rawTheme) {\n    // @ts-expect-error private field\n    if (rawTheme?.[RESOLVED_KEY])\n        return rawTheme;\n    const theme = {\n        ...rawTheme,\n    };\n    // Fallback settings\n    if (theme.tokenColors && !theme.settings) {\n        theme.settings = theme.tokenColors;\n        delete theme.tokenColors;\n    }\n    theme.type ||= 'dark';\n    theme.colorReplacements = { ...theme.colorReplacements };\n    theme.settings ||= [];\n    // Guess fg/bg colors\n    let { bg, fg } = theme;\n    if (!bg || !fg) {\n        /**\n         * First try:\n         * Theme might contain a global `tokenColor` without `name` or `scope`\n         * Used as default value for foreground/background\n         */\n        const globalSetting = theme.settings\n            ? theme.settings.find((s) => !s.name && !s.scope)\n            : undefined;\n        if (globalSetting?.settings?.foreground)\n            fg = globalSetting.settings.foreground;\n        if (globalSetting?.settings?.background)\n            bg = globalSetting.settings.background;\n        /**\n         * Second try:\n         * If there's no global `tokenColor` without `name` or `scope`\n         * Use `editor.foreground` and `editor.background`\n         */\n        if (!fg && theme?.colors?.['editor.foreground'])\n            fg = theme.colors['editor.foreground'];\n        if (!bg && theme?.colors?.['editor.background'])\n            bg = theme.colors['editor.background'];\n        /**\n         * Last try:\n         * If there's no fg/bg color specified in theme, use default\n         */\n        if (!fg)\n            fg = theme.type === 'light' ? VSCODE_FALLBACK_EDITOR_FG.light : VSCODE_FALLBACK_EDITOR_FG.dark;\n        if (!bg)\n            bg = theme.type === 'light' ? VSCODE_FALLBACK_EDITOR_BG.light : VSCODE_FALLBACK_EDITOR_BG.dark;\n        theme.fg = fg;\n        theme.bg = bg;\n    }\n    // Push a no-scope setting with fallback colors\n    if (!(theme.settings[0] && theme.settings[0].settings && !theme.settings[0].scope)) {\n        theme.settings.unshift({\n            settings: {\n                foreground: theme.fg,\n                background: theme.bg,\n            },\n        });\n    }\n    // Push non-hex colors to color replacements, as `vscode-textmate` doesn't support them\n    let replacementCount = 0;\n    const replacementMap = new Map();\n    function getReplacementColor(value) {\n        if (replacementMap.has(value))\n            return replacementMap.get(value);\n        replacementCount += 1;\n        const hex = `#${replacementCount.toString(16).padStart(8, '0').toLowerCase()}`;\n        if (theme.colorReplacements?.[`#${hex}`]) // already exists\n            return getReplacementColor(value);\n        replacementMap.set(value, hex);\n        return hex;\n    }\n    theme.settings = theme.settings.map((setting) => {\n        const replaceFg = setting.settings?.foreground && !setting.settings.foreground.startsWith('#');\n        const replaceBg = setting.settings?.background && !setting.settings.background.startsWith('#');\n        if (!replaceFg && !replaceBg)\n            return setting;\n        const clone = {\n            ...setting,\n            settings: {\n                ...setting.settings,\n            },\n        };\n        if (replaceFg) {\n            const replacement = getReplacementColor(setting.settings.foreground);\n            theme.colorReplacements[replacement] = setting.settings.foreground;\n            clone.settings.foreground = replacement;\n        }\n        if (replaceBg) {\n            const replacement = getReplacementColor(setting.settings.background);\n            theme.colorReplacements[replacement] = setting.settings.background;\n            clone.settings.background = replacement;\n        }\n        return clone;\n    });\n    for (const key of Object.keys(theme.colors || {})) {\n        // Only patch for known keys\n        if (key === 'editor.foreground' || key === 'editor.background' || key.startsWith('terminal.ansi')) {\n            if (!theme.colors[key]?.startsWith('#')) {\n                const replacement = getReplacementColor(theme.colors[key]);\n                theme.colorReplacements[replacement] = theme.colors[key];\n                theme.colors[key] = replacement;\n            }\n        }\n    }\n    Object.defineProperty(theme, RESOLVED_KEY, {\n        enumerable: false,\n        writable: false,\n        value: true,\n    });\n    return theme;\n}\n\n/**\n * Resolve\n */\nasync function resolveLangs(langs) {\n    return Array.from(new Set((await Promise.all(langs\n        .filter(l => !isSpecialLang(l))\n        .map(async (lang) => await normalizeGetter(lang).then(r => Array.isArray(r) ? r : [r])))).flat()));\n}\nasync function resolveThemes(themes) {\n    const resolved = await Promise.all(themes.map(async (theme) => isSpecialTheme(theme)\n        ? null\n        : normalizeTheme(await normalizeGetter(theme))));\n    return resolved.filter(i => !!i);\n}\n\nclass Registry extends Registry$1 {\n    _resolver;\n    _themes;\n    _langs;\n    _alias;\n    _resolvedThemes = new Map();\n    _resolvedGrammars = new Map();\n    _langMap = new Map();\n    _langGraph = new Map();\n    _textmateThemeCache = new WeakMap();\n    _loadedThemesCache = null;\n    _loadedLanguagesCache = null;\n    constructor(_resolver, _themes, _langs, _alias = {}) {\n        super(_resolver);\n        this._resolver = _resolver;\n        this._themes = _themes;\n        this._langs = _langs;\n        this._alias = _alias;\n        this._themes.map(t => this.loadTheme(t));\n        this.loadLanguages(this._langs);\n    }\n    getTheme(theme) {\n        if (typeof theme === 'string')\n            return this._resolvedThemes.get(theme);\n        else\n            return this.loadTheme(theme);\n    }\n    loadTheme(theme) {\n        const _theme = normalizeTheme(theme);\n        if (_theme.name) {\n            this._resolvedThemes.set(_theme.name, _theme);\n            // Reset cache\n            this._loadedThemesCache = null;\n        }\n        return _theme;\n    }\n    getLoadedThemes() {\n        if (!this._loadedThemesCache)\n            this._loadedThemesCache = [...this._resolvedThemes.keys()];\n        return this._loadedThemesCache;\n    }\n    // Override and re-implement this method to cache the textmate themes as `TextMateTheme.createFromRawTheme`\n    // is expensive. Themes can switch often especially for dual-theme support.\n    //\n    // The parent class also accepts `colorMap` as the second parameter, but since we don't use that,\n    // we omit here so it's easier to cache the themes.\n    setTheme(theme) {\n        let textmateTheme = this._textmateThemeCache.get(theme);\n        if (!textmateTheme) {\n            textmateTheme = Theme.createFromRawTheme(theme);\n            this._textmateThemeCache.set(theme, textmateTheme);\n        }\n        // @ts-expect-error Access private `_syncRegistry`, but should work in runtime\n        this._syncRegistry.setTheme(textmateTheme);\n    }\n    getGrammar(name) {\n        if (this._alias[name]) {\n            const resolved = new Set([name]);\n            while (this._alias[name]) {\n                name = this._alias[name];\n                if (resolved.has(name))\n                    throw new ShikiError(`Circular alias \\`${Array.from(resolved).join(' -> ')} -> ${name}\\``);\n                resolved.add(name);\n            }\n        }\n        return this._resolvedGrammars.get(name);\n    }\n    loadLanguage(lang) {\n        if (this.getGrammar(lang.name))\n            return;\n        const embeddedLazilyBy = new Set([...this._langMap.values()]\n            .filter(i => i.embeddedLangsLazy?.includes(lang.name)));\n        this._resolver.addLanguage(lang);\n        const grammarConfig = {\n            balancedBracketSelectors: lang.balancedBracketSelectors || ['*'],\n            unbalancedBracketSelectors: lang.unbalancedBracketSelectors || [],\n        };\n        // @ts-expect-error Private members, set this to override the previous grammar (that can be a stub)\n        this._syncRegistry._rawGrammars.set(lang.scopeName, lang);\n        const g = this.loadGrammarWithConfiguration(lang.scopeName, 1, grammarConfig);\n        g.name = lang.name;\n        this._resolvedGrammars.set(lang.name, g);\n        if (lang.aliases) {\n            lang.aliases.forEach((alias) => {\n                this._alias[alias] = lang.name;\n            });\n        }\n        // Reset cache\n        this._loadedLanguagesCache = null;\n        // If there is a language that embeds this language lazily, we need to reload it\n        if (embeddedLazilyBy.size) {\n            for (const e of embeddedLazilyBy) {\n                this._resolvedGrammars.delete(e.name);\n                // Reset cache\n                this._loadedLanguagesCache = null;\n                // @ts-expect-error clear cache\n                this._syncRegistry?._injectionGrammars?.delete(e.scopeName);\n                // @ts-expect-error clear cache\n                this._syncRegistry?._grammars?.delete(e.scopeName);\n                this.loadLanguage(this._langMap.get(e.name));\n            }\n        }\n    }\n    dispose() {\n        super.dispose();\n        this._resolvedThemes.clear();\n        this._resolvedGrammars.clear();\n        this._langMap.clear();\n        this._langGraph.clear();\n        this._loadedThemesCache = null;\n    }\n    loadLanguages(langs) {\n        for (const lang of langs)\n            this.resolveEmbeddedLanguages(lang);\n        const langsGraphArray = Array.from(this._langGraph.entries());\n        const missingLangs = langsGraphArray.filter(([_, lang]) => !lang);\n        if (missingLangs.length) {\n            const dependents = langsGraphArray\n                .filter(([_, lang]) => lang && lang.embeddedLangs?.some(l => missingLangs.map(([name]) => name).includes(l)))\n                .filter(lang => !missingLangs.includes(lang));\n            throw new ShikiError(`Missing languages ${missingLangs.map(([name]) => `\\`${name}\\``).join(', ')}, required by ${dependents.map(([name]) => `\\`${name}\\``).join(', ')}`);\n        }\n        for (const [_, lang] of langsGraphArray)\n            this._resolver.addLanguage(lang);\n        for (const [_, lang] of langsGraphArray)\n            this.loadLanguage(lang);\n    }\n    getLoadedLanguages() {\n        if (!this._loadedLanguagesCache) {\n            this._loadedLanguagesCache = [\n                ...new Set([...this._resolvedGrammars.keys(), ...Object.keys(this._alias)]),\n            ];\n        }\n        return this._loadedLanguagesCache;\n    }\n    resolveEmbeddedLanguages(lang) {\n        this._langMap.set(lang.name, lang);\n        this._langGraph.set(lang.name, lang);\n        if (lang.embeddedLangs) {\n            for (const embeddedLang of lang.embeddedLangs)\n                this._langGraph.set(embeddedLang, this._langMap.get(embeddedLang));\n        }\n    }\n}\n\nclass Resolver {\n    _langs = new Map();\n    _scopeToLang = new Map();\n    _injections = new Map();\n    _onigLib;\n    constructor(engine, langs) {\n        this._onigLib = {\n            createOnigScanner: patterns => engine.createScanner(patterns),\n            createOnigString: s => engine.createString(s),\n        };\n        langs.forEach(i => this.addLanguage(i));\n    }\n    get onigLib() {\n        return this._onigLib;\n    }\n    getLangRegistration(langIdOrAlias) {\n        return this._langs.get(langIdOrAlias);\n    }\n    loadGrammar(scopeName) {\n        return this._scopeToLang.get(scopeName);\n    }\n    addLanguage(l) {\n        this._langs.set(l.name, l);\n        if (l.aliases) {\n            l.aliases.forEach((a) => {\n                this._langs.set(a, l);\n            });\n        }\n        this._scopeToLang.set(l.scopeName, l);\n        if (l.injectTo) {\n            l.injectTo.forEach((i) => {\n                if (!this._injections.get(i))\n                    this._injections.set(i, []);\n                this._injections.get(i).push(l.scopeName);\n            });\n        }\n    }\n    getInjections(scopeName) {\n        const scopeParts = scopeName.split('.');\n        let injections = [];\n        for (let i = 1; i <= scopeParts.length; i++) {\n            const subScopeName = scopeParts.slice(0, i).join('.');\n            injections = [...injections, ...(this._injections.get(subScopeName) || [])];\n        }\n        return injections;\n    }\n}\n\nlet instancesCount = 0;\n/**\n * Get the minimal shiki context for rendering.\n *\n * Synchronous version of `createShikiInternal`, which requires to provide the engine and all themes and languages upfront.\n */\nfunction createShikiInternalSync(options) {\n    instancesCount += 1;\n    if (options.warnings !== false && instancesCount >= 10 && instancesCount % 10 === 0)\n        console.warn(`[Shiki] ${instancesCount} instances have been created. Shiki is supposed to be used as a singleton, consider refactoring your code to cache your highlighter instance; Or call \\`highlighter.dispose()\\` to release unused instances.`);\n    let isDisposed = false;\n    if (!options.engine)\n        throw new ShikiError('`engine` option is required for synchronous mode');\n    const langs = (options.langs || []).flat(1);\n    const themes = (options.themes || []).flat(1).map(normalizeTheme);\n    const resolver = new Resolver(options.engine, langs);\n    const _registry = new Registry(resolver, themes, langs, options.langAlias);\n    let _lastTheme;\n    function getLanguage(name) {\n        ensureNotDisposed();\n        const _lang = _registry.getGrammar(typeof name === 'string' ? name : name.name);\n        if (!_lang)\n            throw new ShikiError(`Language \\`${name}\\` not found, you may need to load it first`);\n        return _lang;\n    }\n    function getTheme(name) {\n        if (name === 'none')\n            return { bg: '', fg: '', name: 'none', settings: [], type: 'dark' };\n        ensureNotDisposed();\n        const _theme = _registry.getTheme(name);\n        if (!_theme)\n            throw new ShikiError(`Theme \\`${name}\\` not found, you may need to load it first`);\n        return _theme;\n    }\n    function setTheme(name) {\n        ensureNotDisposed();\n        const theme = getTheme(name);\n        if (_lastTheme !== name) {\n            _registry.setTheme(theme);\n            _lastTheme = name;\n        }\n        const colorMap = _registry.getColorMap();\n        return {\n            theme,\n            colorMap,\n        };\n    }\n    function getLoadedThemes() {\n        ensureNotDisposed();\n        return _registry.getLoadedThemes();\n    }\n    function getLoadedLanguages() {\n        ensureNotDisposed();\n        return _registry.getLoadedLanguages();\n    }\n    function loadLanguageSync(...langs) {\n        ensureNotDisposed();\n        _registry.loadLanguages(langs.flat(1));\n    }\n    async function loadLanguage(...langs) {\n        return loadLanguageSync(await resolveLangs(langs));\n    }\n    async function loadThemeSync(...themes) {\n        ensureNotDisposed();\n        for (const theme of themes.flat(1)) {\n            _registry.loadTheme(theme);\n        }\n    }\n    async function loadTheme(...themes) {\n        ensureNotDisposed();\n        return loadThemeSync(await resolveThemes(themes));\n    }\n    function ensureNotDisposed() {\n        if (isDisposed)\n            throw new ShikiError('Shiki instance has been disposed');\n    }\n    function dispose() {\n        if (isDisposed)\n            return;\n        isDisposed = true;\n        _registry.dispose();\n        instancesCount -= 1;\n    }\n    return {\n        setTheme,\n        getTheme,\n        getLanguage,\n        getLoadedThemes,\n        getLoadedLanguages,\n        loadLanguage,\n        loadLanguageSync,\n        loadTheme,\n        loadThemeSync,\n        dispose,\n        [Symbol.dispose]: dispose,\n    };\n}\n\nlet _defaultWasmLoader;\n/**\n * Set the default wasm loader for `loadWasm`.\n * @internal\n */\nfunction setDefaultWasmLoader(_loader) {\n    _defaultWasmLoader = _loader;\n}\n/**\n * Get the minimal shiki context for rendering.\n */\nasync function createShikiInternal(options = {}) {\n    const [themes, langs, engine,] = await Promise.all([\n        resolveThemes(options.themes || []),\n        resolveLangs(options.langs || []),\n        (options.engine || createWasmOnigEngine(options.loadWasm || _defaultWasmLoader)),\n    ]);\n    return createShikiInternalSync({\n        ...options,\n        loadWasm: undefined,\n        themes,\n        langs,\n        engine,\n    });\n}\n/**\n * @deprecated Use `createShikiInternal` instead.\n */\nfunction getShikiInternal(options = {}) {\n    // TODO: next: console.warn('`getShikiInternal` is deprecated. Use `createShikiInternal` instead.')\n    return createShikiInternal(options);\n}\n\n/**\n * Create a Shiki core highlighter instance, with no languages or themes bundled.\n * Wasm and each language and theme must be loaded manually.\n *\n * @see http://shiki.style/guide/bundles#fine-grained-bundle\n */\nasync function createHighlighterCore(options = {}) {\n    const internal = await createShikiInternal(options);\n    return {\n        getLastGrammarState: (code, options) => getLastGrammarState(internal, code, options),\n        codeToTokensBase: (code, options) => codeToTokensBase(internal, code, options),\n        codeToTokensWithThemes: (code, options) => codeToTokensWithThemes(internal, code, options),\n        codeToTokens: (code, options) => codeToTokens(internal, code, options),\n        codeToHast: (code, options) => codeToHast(internal, code, options),\n        codeToHtml: (code, options) => codeToHtml(internal, code, options),\n        ...internal,\n        getInternalContext: () => internal,\n    };\n}\n/**\n * Create a Shiki core highlighter instance, with no languages or themes bundled.\n * Wasm and each language and theme must be loaded manually.\n *\n * Synchronous version of `createHighlighterCore`, which requires to provide the engine and all themes and languages upfront.\n *\n * @see http://shiki.style/guide/bundles#fine-grained-bundle\n */\nfunction createHighlighterCoreSync(options = {}) {\n    const internal = createShikiInternalSync(options);\n    return {\n        getLastGrammarState: (code, options) => getLastGrammarState(internal, code, options),\n        codeToTokensBase: (code, options) => codeToTokensBase(internal, code, options),\n        codeToTokensWithThemes: (code, options) => codeToTokensWithThemes(internal, code, options),\n        codeToTokens: (code, options) => codeToTokens(internal, code, options),\n        codeToHast: (code, options) => codeToHast(internal, code, options),\n        codeToHtml: (code, options) => codeToHtml(internal, code, options),\n        ...internal,\n        getInternalContext: () => internal,\n    };\n}\nfunction makeSingletonHighlighterCore(createHighlighter) {\n    let _shiki;\n    async function getSingletonHighlighterCore(options = {}) {\n        if (!_shiki) {\n            _shiki = createHighlighter({\n                ...options,\n                themes: options.themes || [],\n                langs: options.langs || [],\n            });\n            return _shiki;\n        }\n        else {\n            const s = await _shiki;\n            await Promise.all([\n                s.loadTheme(...(options.themes || [])),\n                s.loadLanguage(...(options.langs || [])),\n            ]);\n            return s;\n        }\n    }\n    return getSingletonHighlighterCore;\n}\nconst getSingletonHighlighterCore = /* @__PURE__ */ makeSingletonHighlighterCore(createHighlighterCore);\n/**\n * @deprecated Use `createHighlighterCore` or `getSingletonHighlighterCore` instead.\n */\n/* v8 ignore next 5 */\nfunction getHighlighterCore(options = {}) {\n    // TODO: next:  console.warn('`getHighlighterCore` is deprecated. Use `createHighlighterCore` or `getSingletonHighlighterCore` instead.')\n    return createHighlighterCore(options);\n}\n\n// Implementation\nfunction createdBundledHighlighter(arg1, arg2, arg3) {\n    let bundledLanguages;\n    let bundledThemes;\n    let engine;\n    if (arg2) {\n        // TODO: next: console.warn('`createdBundledHighlighter` signature with `bundledLanguages` and `bundledThemes` is deprecated. Use the options object signature instead.')\n        bundledLanguages = arg1;\n        bundledThemes = arg2;\n        engine = () => createWasmOnigEngine(arg3);\n    }\n    else {\n        const options = arg1;\n        bundledLanguages = options.langs;\n        bundledThemes = options.themes;\n        engine = options.engine;\n    }\n    async function createHighlighter(options) {\n        function resolveLang(lang) {\n            if (typeof lang === 'string') {\n                if (isSpecialLang(lang))\n                    return [];\n                const bundle = bundledLanguages[lang];\n                if (!bundle)\n                    throw new ShikiError(`Language \\`${lang}\\` is not included in this bundle. You may want to load it from external source.`);\n                return bundle;\n            }\n            return lang;\n        }\n        function resolveTheme(theme) {\n            if (isSpecialTheme(theme))\n                return 'none';\n            if (typeof theme === 'string') {\n                const bundle = bundledThemes[theme];\n                if (!bundle)\n                    throw new ShikiError(`Theme \\`${theme}\\` is not included in this bundle. You may want to load it from external source.`);\n                return bundle;\n            }\n            return theme;\n        }\n        const _themes = (options.themes ?? []).map(i => resolveTheme(i));\n        const langs = (options.langs ?? [])\n            .map(i => resolveLang(i));\n        const core = await createHighlighterCore({\n            engine: engine(),\n            ...options,\n            themes: _themes,\n            langs,\n        });\n        return {\n            ...core,\n            loadLanguage(...langs) {\n                return core.loadLanguage(...langs.map(resolveLang));\n            },\n            loadTheme(...themes) {\n                return core.loadTheme(...themes.map(resolveTheme));\n            },\n        };\n    }\n    return createHighlighter;\n}\nfunction makeSingletonHighlighter(createHighlighter) {\n    let _shiki;\n    async function getSingletonHighlighter(options = {}) {\n        if (!_shiki) {\n            _shiki = createHighlighter({\n                ...options,\n                themes: options.themes || [],\n                langs: options.langs || [],\n            });\n            return _shiki;\n        }\n        else {\n            const s = await _shiki;\n            await Promise.all([\n                s.loadTheme(...(options.themes || [])),\n                s.loadLanguage(...(options.langs || [])),\n            ]);\n            return s;\n        }\n    }\n    return getSingletonHighlighter;\n}\nfunction createSingletonShorthands(createHighlighter) {\n    const getSingletonHighlighter = makeSingletonHighlighter(createHighlighter);\n    return {\n        getSingletonHighlighter(options) {\n            return getSingletonHighlighter(options);\n        },\n        async codeToHtml(code, options) {\n            const shiki = await getSingletonHighlighter({\n                langs: [options.lang],\n                themes: ('theme' in options ? [options.theme] : Object.values(options.themes)),\n            });\n            return shiki.codeToHtml(code, options);\n        },\n        async codeToHast(code, options) {\n            const shiki = await getSingletonHighlighter({\n                langs: [options.lang],\n                themes: ('theme' in options ? [options.theme] : Object.values(options.themes)),\n            });\n            return shiki.codeToHast(code, options);\n        },\n        async codeToTokens(code, options) {\n            const shiki = await getSingletonHighlighter({\n                langs: [options.lang],\n                themes: ('theme' in options ? [options.theme] : Object.values(options.themes)),\n            });\n            return shiki.codeToTokens(code, options);\n        },\n        async codeToTokensBase(code, options) {\n            const shiki = await getSingletonHighlighter({\n                langs: [options.lang],\n                themes: [options.theme],\n            });\n            return shiki.codeToTokensBase(code, options);\n        },\n        async codeToTokensWithThemes(code, options) {\n            const shiki = await getSingletonHighlighter({\n                langs: [options.lang],\n                themes: Object.values(options.themes).filter(Boolean),\n            });\n            return shiki.codeToTokensWithThemes(code, options);\n        },\n        async getLastGrammarState(code, options) {\n            const shiki = await getSingletonHighlighter({\n                langs: [options.lang],\n                themes: [options.theme],\n            });\n            return shiki.getLastGrammarState(code, options);\n        },\n    };\n}\n\nconst MAX = 4294967295;\n/**\n * The default RegExp constructor for JavaScript regex engine.\n */\nfunction defaultJavaScriptRegexConstructor(pattern) {\n    pattern = pattern\n        // YAML specific handling; TODO: move to tm-grammars\n        .replaceAll('[^\\\\s[-?:,\\\\[\\\\]{}#&*!|>\\'\"%@`]]', '[^\\\\s\\\\-?:,\\\\[\\\\]{}#&*!|>\\'\"%@`]');\n    const rewritten = rewrite(pattern, {\n        flags: 'dgm',\n        unicodeSetsPlugin: null,\n        disable: {\n            n: true,\n            v: true,\n            x: true,\n        },\n    });\n    return onigurumaToRegexp(rewritten.expression, {\n        flags: 'dgm',\n        ignoreContiguousAnchors: true,\n    });\n}\nclass JavaScriptScanner {\n    patterns;\n    cache;\n    forgiving;\n    regexConstructor;\n    regexps;\n    constructor(patterns, cache, forgiving, regexConstructor = defaultJavaScriptRegexConstructor) {\n        this.patterns = patterns;\n        this.cache = cache;\n        this.forgiving = forgiving;\n        this.regexConstructor = regexConstructor;\n        this.regexps = patterns.map((p) => {\n            const cached = cache?.get(p);\n            if (cached) {\n                if (cached instanceof RegExp) {\n                    return cached;\n                }\n                if (forgiving)\n                    return null;\n                throw cached;\n            }\n            try {\n                const regex = regexConstructor(p);\n                cache?.set(p, regex);\n                return regex;\n            }\n            catch (e) {\n                cache?.set(p, e);\n                if (forgiving)\n                    return null;\n                // console.error({ ...e })\n                throw e;\n            }\n        });\n    }\n    findNextMatchSync(string, startPosition) {\n        const str = typeof string === 'string'\n            ? string\n            : string.content;\n        const pending = [];\n        function toResult(index, match) {\n            return {\n                index,\n                captureIndices: match.indices.map((indice) => {\n                    if (indice == null) {\n                        return {\n                            end: MAX,\n                            start: MAX,\n                            length: 0,\n                        };\n                    }\n                    return {\n                        start: indice[0],\n                        length: indice[1] - indice[0],\n                        end: indice[1],\n                    };\n                }),\n            };\n        }\n        for (let i = 0; i < this.regexps.length; i++) {\n            const regexp = this.regexps[i];\n            if (!regexp)\n                continue;\n            try {\n                regexp.lastIndex = startPosition;\n                const match = regexp.exec(str);\n                if (!match)\n                    continue;\n                // If the match is at the start position, return it immediately\n                if (match.index === startPosition) {\n                    return toResult(i, match);\n                }\n                // Otherwise, store it for later\n                pending.push([i, match]);\n            }\n            catch (e) {\n                if (this.forgiving)\n                    continue;\n                throw e;\n            }\n        }\n        // Find the closest match to the start position\n        if (pending.length) {\n            const minIndex = Math.min(...pending.map(m => m[1].index));\n            for (const [i, match] of pending) {\n                if (match.index === minIndex) {\n                    return toResult(i, match);\n                }\n            }\n        }\n        return null;\n    }\n}\n/**\n * Use the modern JavaScript RegExp engine to implement the OnigScanner.\n *\n * As Oniguruma regex is more powerful than JavaScript regex, some patterns may not be supported.\n * Errors will be thrown when parsing TextMate grammars with unsupported patterns.\n * Set `forgiving` to `true` to ignore these errors and skip the unsupported patterns.\n *\n * @experimental\n */\nfunction createJavaScriptRegexEngine(options = {}) {\n    const { forgiving = false, cache = new Map(), } = options;\n    return {\n        createScanner(patterns) {\n            return new JavaScriptScanner(patterns, cache, forgiving, options.regexConstructor);\n        },\n        createString(s) {\n            return {\n                content: s,\n            };\n        },\n    };\n}\n\nexport { FontStyle, ShikiError, addClassToHast, applyColorReplacements, codeToHast, codeToHtml, codeToTokens, codeToTokensBase, codeToTokensWithThemes, createHighlighterCore, createHighlighterCoreSync, createJavaScriptRegexEngine, createPositionConverter, createShikiInternal, createShikiInternalSync, createSingletonShorthands, createWasmOnigEngine, createdBundledHighlighter, defaultJavaScriptRegexConstructor, getHighlighterCore, getShikiInternal, getSingletonHighlighterCore, getTokenStyleObject, toHtml as hastToHtml, isNoneTheme, isPlainLang, isSpecialLang, isSpecialTheme, loadWasm, makeSingletonHighlighter, makeSingletonHighlighterCore, normalizeGetter, normalizeTheme, resolveColorReplacements, setDefaultWasmLoader, splitLines, splitToken, splitTokens, stringifyTokenStyle, toArray, tokenizeAnsiWithTheme, tokenizeWithTheme, tokensToHast, transformerDecorations };\n"],"names":["initPromise","key","_defaultWasmLoader","ShikiError","Error","constructor","message","name","_emscripten_get_now","performance","now","Date","alignUp","x","multiple","main","init","wasmMemory","buffer","binding","updateGlobalBufferAndViews","buf","HEAPU8","Uint8Array","HEAPU32","Uint32Array","UTF8Decoder","TextDecoder","undefined","UTF8ToString","ptr","maxBytesToRead","UTF8ArrayToString","heapOrArray","idx","endIdx","endPtr","decode","subarray","str","u0","String","fromCharCode","u1","u2","ch","asmLibraryArg","emscripten_get_now","emscripten_memcpy_big","dest","src","num","copyWithin","emscripten_resize_heap","requestedSize","oldSize","length","cutDown","overGrownHeapSize","Math","min","emscripten_realloc_buffer","size","grow","byteLength","max","fd_write","createWasm","exports","env","wasi_snapshot_preview1","memory","Object","assign","onigBinding","UtfString","_utf8ByteLength","result","i","len","charCode","charCodeAt","codepoint","wasSurrogatePair","nextCharCode","utf16Length","utf8Length","utf16Value","utf8Value","utf16OffsetToUtf8","utf8OffsetToUtf16","computeIndicesMapping","i8","i16","codePoint","createString","omalloc","set","OnigString","LAST_ID","_sharedPtr","_sharedPtrInUse","id","_onigBinding","content","utfString","convertUtf8OffsetToUtf16","utf8Offset","convertUtf16OffsetToUtf8","utf16Offset","dispose","ofree","OnigScanner","_ptr","patterns","strPtrsArr","strLenArr","strPtrsPtr","strLenPtr","scannerPtr","createOnigScanner","throwLastOnigError","getLastOnigError","freeOnigScanner","findNextMatchSync","string","startPosition","arg","options","_findNextMatchSync","debugCall","resultPtr","findNextOnigScannerMatch","offset","index","count","captureIndices","beg","end","start","_makeArrayBufferLoader","data","importObject","WebAssembly","instantiate","createWasmOnigEngine","_load","info","instance","dataOrOptions","instantiator","default","Response","instantiateStreaming","_makeResponseStreamingLoader","_makeResponseNonStreamingLoader","arrayBuffer","ArrayBuffer","isView","Buffer","isBuffer","SharedArrayBuffer","Module","createScanner","s","splitLines","code","preserveEnding","parts","split","lines","line","push","isPlainLang","lang","includes","isSpecialLang","isNoneTheme","theme","addClassToHast","node","className","c","properties","class","Array","isArray","normalizeGetter","p","Promise","resolve","then","r","resolveColorReplacements","replacements","colorReplacements","themeName","value","entries","applyColorReplacements","color","toLowerCase","getTokenStyleObject","token","styles","bgColor","fontStyle","_types_mjs__WEBPACK_IMPORTED_MODULE_2__","H","Italic","Bold","Underline","stringifyTokenStyle","map","join","builtInTransformers","transformerDecorations","WeakMap","getContext","shiki","has","meta","converter","createPositionConverter","indexToPos","character","lineText","posToIndex","source","normalizePosition","JSON","stringify","decorations","d","verifyIntersections","items","foo","j","bar","isFooHasBarStart","isFooHasBarEnd","isBarHasFooStart","isBarHasFooEnd","get","tokens","splitTokens","breakpoints","sorted","from","Set","sort","a","b","flatMap","breakpointsInToken","filter","splitToken","offsets","lastOffset","slice","ctx","codeEl","children","type","tagName","applyLineSection","decoration","lineEl","text","startIndex","endIndex","Number","POSITIVE_INFINITY","stringify$2","el","alwaysWrap","wrapper","applyDecoration","splice","transform","lineApplies","unshift","forEach","getTransformers","transformers","GrammarState","_stack","initial","_shikijs_vscode_textmate__WEBPACK_IMPORTED_MODULE_0__","_X","scopes","getScopes","stack","visited","pushScope","add","nameScopesList","scopeName","parent","toJSON","namedColors","parseColor","sequence","colorMode","rgb","parseInt","some","isNaN","colorIndex","defaultNamedColorsMap","black","red","green","yellow","blue","magenta","cyan","white","brightBlack","brightRed","brightGreen","brightYellow","brightBlue","brightMagenta","brightCyan","brightWhite","codeToTokensBase","internal","getLoadedThemes","colorMap","setTheme","tokenizeAnsiWithTheme","fileContents","foreground","background","decorations2","colorPalette","createColorPalette","namedColorsMap","colorTable","rgbColor","toString","padStart","getColorTable","levels","g","level","fromEntries","colors","toUpperCase","substring","parser","parse","position","findResult","findSequence","nextEscape","indexOf","nextClose","commands","parseSequence","codeInt","styleToken","clear","delete","bg","fg","dimColor","hexMatch","match","alpha","round","cssVarMatch","None","_grammar","getLanguage","grammarState","_tokenizeWithTheme","grammar","tokenizeMaxLineLength","tokenizeTimeLimit","stateStack","getGrammarStack","state","grammarContextCode","actual","final","tokensWithScopes","tokensWithScopesIndex","lineOffset","includeExplanation","resultWithScopes","tokenizeLine","tokenizeLine2","tokensLength","nextStartIndex","metadata","E9","getForeground","getFontStyle","themeSettingsSelectors","setting","settings","selectors","scope","trim","selector","explanation","tokenWithScopes","tokenWithScopesText","explainThemeScopesFull","themeSelectors","themeMatches","explainThemeScope","parentScopes","selectorPieces","matches","matchesOne","selectorParentIndex","parentIndex","ruleStack","codeToTokensWithThemes","themes","syncThemesTokenization","outThemes","t","outLines","indexes","current","l","every","minLength","n","lineIdx","_token","tokenIdx","mergedToken","variants","themeIdx","_","__","___","codeToTokens","rootStyle","defaultColor","cssVariablePrefix","themeTokens","find","themeRegs","getTheme","themesOrder","mergeToken","merged","variantsOrder","styleKeys","keys","mergedStyles","reduce","acc","cur","keyName","varKey","htmlStyle","values","themeColorReplacements","_theme","codeToHast","transformerContext","_code","_options","input","transformer","preprocess","call","mergeWhitespaces","newLine","carryOnContent","firstOffset","couldMerge","leading","trailing","expanded","contextSource","tokensToHast","root","structure","preNode","style","tabindex","startsWith","codeNode","lineNodes","context","pre","lineNode","col","tokenNode","span","htmlVoidElements","Schema","property","normal","space","merge","definitions","normalize","prototype","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","types","freeze","__proto__","checks","DefinedInfo","mask","mark","check","own$3","hasOwnProperty","create","definition","prop","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html$3","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","language","list","loading","loop","low","manifest","maxLength","media","method","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scoped","seamless","selected","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","target","title","translate","typeMustMatch","useMap","width","wrap","align","aLink","archive","axis","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","codeBase","codeType","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg$1","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","unicode","viewBox","viewTarget","visibility","widths","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","valid","dash","cap","kebab","$0","camelcase","charAt","html$2","svg","own$2","characterEntitiesLegacy","characterEntitiesHtml4","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","rang","loz","spades","clubs","hearts","diams","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","dangerous","own$1","characters","formatSmart","next","named","numeric","toHexadecimal","omit","test","omitOptionalSemicolons","useNamedReferences","useShortestReferences","toNamed","decimal","toDecimal","stringifyEntities","core","replace","subset","charactersToExpression","groups","basic","escapeOnly","pair","all","htmlCommentRegex","bogusCommentEntitySubset","commentEntitySubset","ccount","re","whitespace","thing","siblingAfter","siblings","siblingBefore","emptyChildren$1","includeWhitespace","own","omission","handlers","closing","body","caption","headOrColgroupOrCaption","colgroup","dd","dt","Boolean","head","html","li","optgroup","option","rp","rubyElement","rt","tbody","td","cells","tfoot","th","thead","tr","opening","previous","seen","child","constants","unquoted","single","double","textEntitySubset","characterReferences","handle","zwitch","one","parameters","fn","invalid","unknown","node_","comment","_1","_2","bogusComments","doctype","_3","upperDoctype","tightDoctype","element","last","schema","omitOptionalTags","selfClosing","closeEmptyElements","voids","serializeAttributes","serializeAttribute","Type","rest","dashes","allowParseErrors","allowDangerousCharacters","quote","padRight","padLeft","tightCommaSeparatedLists","collapseEmptyAttributes","preferUnquoted","quoteSmart","alternative","tightAttributes","closeSelfClosing","tightSelfClosing","raw","allowDangerousHtml","emptyOptions","emptyCharacterReferences","emptyChildren","VSCODE_FALLBACK_EDITOR_FG","light","dark","VSCODE_FALLBACK_EDITOR_BG","RESOLVED_KEY","normalizeTheme","rawTheme","tokenColors","globalSetting","replacementCount","replacementMap","Map","getReplacementColor","hex","replaceFg","replaceBg","clone","replacement","defineProperty","enumerable","writable","resolveLangs","langs","flat","resolveThemes","resolved","isSpecialTheme","Registry","Bz","_resolver","_themes","_langs","_alias","_resolvedThemes","_resolvedGrammars","_langMap","_langGraph","_textmateThemeCache","_loadedThemesCache","_loadedLanguagesCache","loadTheme","loadLanguages","textmateTheme","Q2","createFromRawTheme","_syncRegistry","getGrammar","loadLanguage","embeddedLazilyBy","embeddedLangsLazy","addLanguage","grammarConfig","balancedBracketSelectors","unbalancedBracketSelectors","_rawGrammars","loadGrammarWithConfiguration","aliases","alias","e","_injectionGrammars","_grammars","resolveEmbeddedLanguages","langsGraphArray","missingLangs","dependents","embeddedLangs","getLoadedLanguages","embeddedLang","Resolver","_scopeToLang","_injections","_onigLib","engine","createOnigString","onigLib","getLangRegistration","langIdOrAlias","loadGrammar","injectTo","getInjections","scopeParts","injections","subScopeName","instancesCount","createShikiInternal","loadWasm","createShikiInternalSync","_lastTheme","warnings","console","warn","isDisposed","_registry","langAlias","ensureNotDisposed","loadLanguageSync","loadThemeSync","getColorMap","_lang","Symbol","createHighlighterCore","getLastGrammarState","codeToHtml","toHtml","tree","options_","postprocess","getInternalContext","createdBundledHighlighter","arg1","arg2","arg3","bundledLanguages","bundledThemes","resolveLang","bundle","resolveTheme","createSingletonShorthands","createHighlighter","_shiki","getSingletonHighlighter"],"sourceRoot":""}