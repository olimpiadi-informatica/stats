{"version":3,"file":"static/chunks/147.af11175abd8991c0.js","mappings":"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","sources":["webpack://_N_E/./node_modules/shiki/dist/langs/rust.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"Rust\", \"name\": \"rust\", \"patterns\": [{ \"begin\": \"(<)(\\\\[)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.brackets.angle.rust\" }, \"2\": { \"name\": \"punctuation.brackets.square.rust\" } }, \"comment\": \"boxed slice literal\", \"end\": \">\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.brackets.angle.rust\" } }, \"patterns\": [{ \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#gtypes\" }, { \"include\": \"#lvariables\" }, { \"include\": \"#lifetimes\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#types\" }] }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.macro.dollar.rust\" }, \"3\": { \"name\": \"keyword.other.crate.rust\" }, \"4\": { \"name\": \"entity.name.type.metavariable.rust\" }, \"6\": { \"name\": \"keyword.operator.key-value.rust\" }, \"7\": { \"name\": \"variable.other.metavariable.specifier.rust\" } }, \"comment\": \"macro type metavariables\", \"match\": \"(\\\\$)((crate)|([A-Z][A-Za-z0-9_]*))((:)(block|expr|ident|item|lifetime|literal|meta|path?|stmt|tt|ty|vis))?\", \"name\": \"meta.macro.metavariable.type.rust\", \"patterns\": [{ \"include\": \"#keywords\" }] }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.macro.dollar.rust\" }, \"2\": { \"name\": \"variable.other.metavariable.name.rust\" }, \"4\": { \"name\": \"keyword.operator.key-value.rust\" }, \"5\": { \"name\": \"variable.other.metavariable.specifier.rust\" } }, \"comment\": \"macro metavariables\", \"match\": \"(\\\\$)([a-z][A-Za-z0-9_]*)((:)(block|expr|ident|item|lifetime|literal|meta|path?|stmt|tt|ty|vis))?\", \"name\": \"meta.macro.metavariable.rust\", \"patterns\": [{ \"include\": \"#keywords\" }] }, { \"captures\": { \"1\": { \"name\": \"entity.name.function.macro.rules.rust\" }, \"3\": { \"name\": \"entity.name.function.macro.rust\" }, \"4\": { \"name\": \"entity.name.type.macro.rust\" }, \"5\": { \"name\": \"punctuation.brackets.curly.rust\" } }, \"comment\": \"macro rules\", \"match\": \"\\\\b(macro_rules!)\\\\s+(([a-z0-9_]+)|([A-Z][a-z0-9_]*))\\\\s+(\\\\{)\", \"name\": \"meta.macro.rules.rust\" }, { \"captures\": { \"1\": { \"name\": \"storage.type.rust\" }, \"2\": { \"name\": \"entity.name.module.rust\" } }, \"comment\": \"modules\", \"match\": \"(mod)\\\\s+((?:r#(?!crate|[Ss]elf|super))?[a-z][A-Za-z0-9_]*)\" }, { \"begin\": \"\\\\b(extern)\\\\s+(crate)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.rust\" }, \"2\": { \"name\": \"keyword.other.crate.rust\" } }, \"comment\": \"external crate imports\", \"end\": \";\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.semi.rust\" } }, \"name\": \"meta.import.rust\", \"patterns\": [{ \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#keywords\" }, { \"include\": \"#punctuation\" }] }, { \"begin\": \"\\\\b(use)\\\\s\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.rust\" } }, \"comment\": \"use statements\", \"end\": \";\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.semi.rust\" } }, \"name\": \"meta.use.rust\", \"patterns\": [{ \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#keywords\" }, { \"include\": \"#namespaces\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#types\" }, { \"include\": \"#lvariables\" }] }, { \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#attributes\" }, { \"include\": \"#lvariables\" }, { \"include\": \"#constants\" }, { \"include\": \"#gtypes\" }, { \"include\": \"#functions\" }, { \"include\": \"#types\" }, { \"include\": \"#keywords\" }, { \"include\": \"#lifetimes\" }, { \"include\": \"#macros\" }, { \"include\": \"#namespaces\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#strings\" }, { \"include\": \"#variables\" }], \"repository\": { \"attributes\": { \"begin\": \"(#)(!?)(\\\\[)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.attribute.rust\" }, \"3\": { \"name\": \"punctuation.brackets.attribute.rust\" } }, \"comment\": \"attributes\", \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.brackets.attribute.rust\" } }, \"name\": \"meta.attribute.rust\", \"patterns\": [{ \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#keywords\" }, { \"include\": \"#lifetimes\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#strings\" }, { \"include\": \"#gtypes\" }, { \"include\": \"#types\" }] }, \"block-comments\": { \"patterns\": [{ \"comment\": \"empty block comments\", \"match\": \"/\\\\*\\\\*/\", \"name\": \"comment.block.rust\" }, { \"begin\": \"/\\\\*\\\\*\", \"comment\": \"block documentation comments\", \"end\": \"\\\\*/\", \"name\": \"comment.block.documentation.rust\", \"patterns\": [{ \"include\": \"#block-comments\" }] }, { \"begin\": \"/\\\\*(?!\\\\*)\", \"comment\": \"block comments\", \"end\": \"\\\\*/\", \"name\": \"comment.block.rust\", \"patterns\": [{ \"include\": \"#block-comments\" }] }] }, \"comments\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"punctuation.definition.comment.rust\" } }, \"comment\": \"documentation comments\", \"match\": \"(///).*$\", \"name\": \"comment.line.documentation.rust\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.definition.comment.rust\" } }, \"comment\": \"line comments\", \"match\": \"(//).*$\", \"name\": \"comment.line.double-slash.rust\" }] }, \"constants\": { \"patterns\": [{ \"comment\": \"ALL CAPS constants\", \"match\": \"\\\\b[A-Z]{2}[A-Z0-9_]*\\\\b\", \"name\": \"constant.other.caps.rust\" }, { \"captures\": { \"1\": { \"name\": \"storage.type.rust\" }, \"2\": { \"name\": \"constant.other.caps.rust\" } }, \"comment\": \"constant declarations\", \"match\": \"\\\\b(const)\\\\s+([A-Z][A-Za-z0-9_]*)\\\\b\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.separator.dot.decimal.rust\" }, \"2\": { \"name\": \"keyword.operator.exponent.rust\" }, \"3\": { \"name\": \"keyword.operator.exponent.sign.rust\" }, \"4\": { \"name\": \"constant.numeric.decimal.exponent.mantissa.rust\" }, \"5\": { \"name\": \"entity.name.type.numeric.rust\" } }, \"comment\": \"decimal integers and floats\", \"match\": \"\\\\b\\\\d[\\\\d_]*(\\\\.?)[\\\\d_]*(?:(E|e)([+-]?)([\\\\d_]+))?(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\\\b\", \"name\": \"constant.numeric.decimal.rust\" }, { \"captures\": { \"1\": { \"name\": \"entity.name.type.numeric.rust\" } }, \"comment\": \"hexadecimal integers\", \"match\": \"\\\\b0x[\\\\da-fA-F_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\\\b\", \"name\": \"constant.numeric.hex.rust\" }, { \"captures\": { \"1\": { \"name\": \"entity.name.type.numeric.rust\" } }, \"comment\": \"octal integers\", \"match\": \"\\\\b0o[0-7_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\\\b\", \"name\": \"constant.numeric.oct.rust\" }, { \"captures\": { \"1\": { \"name\": \"entity.name.type.numeric.rust\" } }, \"comment\": \"binary integers\", \"match\": \"\\\\b0b[01_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\\\b\", \"name\": \"constant.numeric.bin.rust\" }, { \"comment\": \"booleans\", \"match\": \"\\\\b(true|false)\\\\b\", \"name\": \"constant.language.bool.rust\" }] }, \"escapes\": { \"captures\": { \"1\": { \"name\": \"constant.character.escape.backslash.rust\" }, \"2\": { \"name\": \"constant.character.escape.bit.rust\" }, \"3\": { \"name\": \"constant.character.escape.unicode.rust\" }, \"4\": { \"name\": \"constant.character.escape.unicode.punctuation.rust\" }, \"5\": { \"name\": \"constant.character.escape.unicode.punctuation.rust\" } }, \"comment\": \"escapes: ASCII, byte, Unicode, quote, regex\", \"match\": \"(\\\\\\\\)(?:(?:(x[0-7][\\\\da-fA-F])|(u(\\\\{)[\\\\da-fA-F]{4,6}(\\\\}))|.))\", \"name\": \"constant.character.escape.rust\" }, \"functions\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"keyword.other.rust\" }, \"2\": { \"name\": \"punctuation.brackets.round.rust\" } }, \"comment\": \"pub as a function\", \"match\": \"\\\\b(pub)(\\\\()\" }, { \"begin\": \"\\\\b(fn)\\\\s+((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)((\\\\()|(<))\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.fn.rust\" }, \"2\": { \"name\": \"entity.name.function.rust\" }, \"4\": { \"name\": \"punctuation.brackets.round.rust\" }, \"5\": { \"name\": \"punctuation.brackets.angle.rust\" } }, \"comment\": \"function definition\", \"end\": \"(\\\\{)|(;)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.brackets.curly.rust\" }, \"2\": { \"name\": \"punctuation.semi.rust\" } }, \"name\": \"meta.function.definition.rust\", \"patterns\": [{ \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#keywords\" }, { \"include\": \"#lvariables\" }, { \"include\": \"#constants\" }, { \"include\": \"#gtypes\" }, { \"include\": \"#functions\" }, { \"include\": \"#lifetimes\" }, { \"include\": \"#macros\" }, { \"include\": \"#namespaces\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#strings\" }, { \"include\": \"#types\" }, { \"include\": \"#variables\" }] }, { \"begin\": \"((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.function.rust\" }, \"2\": { \"name\": \"punctuation.brackets.round.rust\" } }, \"comment\": \"function/method calls, chaining\", \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.brackets.round.rust\" } }, \"name\": \"meta.function.call.rust\", \"patterns\": [{ \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#attributes\" }, { \"include\": \"#keywords\" }, { \"include\": \"#lvariables\" }, { \"include\": \"#constants\" }, { \"include\": \"#gtypes\" }, { \"include\": \"#functions\" }, { \"include\": \"#lifetimes\" }, { \"include\": \"#macros\" }, { \"include\": \"#namespaces\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#strings\" }, { \"include\": \"#types\" }, { \"include\": \"#variables\" }] }, { \"begin\": \"((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)(?=::<.*>\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.function.rust\" } }, \"comment\": \"function/method calls with turbofish\", \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.brackets.round.rust\" } }, \"name\": \"meta.function.call.rust\", \"patterns\": [{ \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#attributes\" }, { \"include\": \"#keywords\" }, { \"include\": \"#lvariables\" }, { \"include\": \"#constants\" }, { \"include\": \"#gtypes\" }, { \"include\": \"#functions\" }, { \"include\": \"#lifetimes\" }, { \"include\": \"#macros\" }, { \"include\": \"#namespaces\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#strings\" }, { \"include\": \"#types\" }, { \"include\": \"#variables\" }] }] }, \"gtypes\": { \"patterns\": [{ \"comment\": \"option types\", \"match\": \"\\\\b(Some|None)\\\\b\", \"name\": \"entity.name.type.option.rust\" }, { \"comment\": \"result types\", \"match\": \"\\\\b(Ok|Err)\\\\b\", \"name\": \"entity.name.type.result.rust\" }] }, \"interpolations\": { \"captures\": { \"1\": { \"name\": \"punctuation.definition.interpolation.rust\" }, \"2\": { \"name\": \"punctuation.definition.interpolation.rust\" } }, \"comment\": \"curly brace interpolations\", \"match\": '({)[^\"{}]*(})', \"name\": \"meta.interpolation.rust\" }, \"keywords\": { \"patterns\": [{ \"comment\": \"control flow keywords\", \"match\": \"\\\\b(await|break|continue|do|else|for|if|loop|match|return|try|while|yield)\\\\b\", \"name\": \"keyword.control.rust\" }, { \"comment\": \"storage keywords\", \"match\": \"\\\\b(extern|let|macro|mod)\\\\b\", \"name\": \"keyword.other.rust storage.type.rust\" }, { \"comment\": \"const keyword\", \"match\": \"\\\\b(const)\\\\b\", \"name\": \"storage.modifier.rust\" }, { \"comment\": \"type keyword\", \"match\": \"\\\\b(type)\\\\b\", \"name\": \"keyword.declaration.type.rust storage.type.rust\" }, { \"comment\": \"enum keyword\", \"match\": \"\\\\b(enum)\\\\b\", \"name\": \"keyword.declaration.enum.rust storage.type.rust\" }, { \"comment\": \"trait keyword\", \"match\": \"\\\\b(trait)\\\\b\", \"name\": \"keyword.declaration.trait.rust storage.type.rust\" }, { \"comment\": \"struct keyword\", \"match\": \"\\\\b(struct)\\\\b\", \"name\": \"keyword.declaration.struct.rust storage.type.rust\" }, { \"comment\": \"storage modifiers\", \"match\": \"\\\\b(abstract|static)\\\\b\", \"name\": \"storage.modifier.rust\" }, { \"comment\": \"other keywords\", \"match\": \"\\\\b(as|async|become|box|dyn|move|final|gen|impl|in|override|priv|pub|ref|typeof|union|unsafe|unsized|use|virtual|where)\\\\b\", \"name\": \"keyword.other.rust\" }, { \"comment\": \"fn\", \"match\": \"\\\\bfn\\\\b\", \"name\": \"keyword.other.fn.rust\" }, { \"comment\": \"crate\", \"match\": \"\\\\bcrate\\\\b\", \"name\": \"keyword.other.crate.rust\" }, { \"comment\": \"mut\", \"match\": \"\\\\bmut\\\\b\", \"name\": \"storage.modifier.mut.rust\" }, { \"comment\": \"logical operators\", \"match\": \"(\\\\^|\\\\||\\\\|\\\\||&&|<<|>>|!)(?!=)\", \"name\": \"keyword.operator.logical.rust\" }, { \"comment\": \"logical AND, borrow references\", \"match\": \"&(?![&=])\", \"name\": \"keyword.operator.borrow.and.rust\" }, { \"comment\": \"assignment operators\", \"match\": \"(\\\\+=|-=|\\\\*=|/=|%=|\\\\^=|&=|\\\\|=|<<=|>>=)\", \"name\": \"keyword.operator.assignment.rust\" }, { \"comment\": \"single equal\", \"match\": \"(?<![<>])=(?!=|>)\", \"name\": \"keyword.operator.assignment.equal.rust\" }, { \"comment\": \"comparison operators\", \"match\": \"(=(=)?(?!>)|!=|<=|(?<!=)>=)\", \"name\": \"keyword.operator.comparison.rust\" }, { \"comment\": \"math operators\", \"match\": \"(([+%]|(\\\\*(?!\\\\w)))(?!=))|(-(?!>))|(/(?!/))\", \"name\": \"keyword.operator.math.rust\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.brackets.round.rust\" }, \"2\": { \"name\": \"punctuation.brackets.square.rust\" }, \"3\": { \"name\": \"punctuation.brackets.curly.rust\" }, \"4\": { \"name\": \"keyword.operator.comparison.rust\" }, \"5\": { \"name\": \"punctuation.brackets.round.rust\" }, \"6\": { \"name\": \"punctuation.brackets.square.rust\" }, \"7\": { \"name\": \"punctuation.brackets.curly.rust\" } }, \"comment\": \"less than, greater than (special case)\", \"match\": \"(?:\\\\b|(?:(\\\\))|(\\\\])|(\\\\})))[ \\\\t]+([<>])[ \\\\t]+(?:\\\\b|(?:(\\\\()|(\\\\[)|(\\\\{)))\" }, { \"comment\": \"namespace operator\", \"match\": \"::\", \"name\": \"keyword.operator.namespace.rust\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.dereference.rust\" } }, \"comment\": \"dereference asterisk\", \"match\": \"(\\\\*)(?=\\\\w+)\" }, { \"comment\": \"subpattern binding\", \"match\": \"@\", \"name\": \"keyword.operator.subpattern.rust\" }, { \"comment\": \"dot access\", \"match\": \"\\\\.(?!\\\\.)\", \"name\": \"keyword.operator.access.dot.rust\" }, { \"comment\": \"ranges, range patterns\", \"match\": \"\\\\.{2}(=|\\\\.)?\", \"name\": \"keyword.operator.range.rust\" }, { \"comment\": \"colon\", \"match\": \":(?!:)\", \"name\": \"keyword.operator.key-value.rust\" }, { \"comment\": \"dashrocket, skinny arrow\", \"match\": \"->|<-\", \"name\": \"keyword.operator.arrow.skinny.rust\" }, { \"comment\": \"hashrocket, fat arrow\", \"match\": \"=>\", \"name\": \"keyword.operator.arrow.fat.rust\" }, { \"comment\": \"dollar macros\", \"match\": \"\\\\$\", \"name\": \"keyword.operator.macro.dollar.rust\" }, { \"comment\": \"question mark operator, questionably sized, macro kleene matcher\", \"match\": \"\\\\?\", \"name\": \"keyword.operator.question.rust\" }] }, \"lifetimes\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"punctuation.definition.lifetime.rust\" }, \"2\": { \"name\": \"entity.name.type.lifetime.rust\" } }, \"comment\": \"named lifetime parameters\", \"match\": \"(['])([a-zA-Z_][0-9a-zA-Z_]*)(?!['])\\\\b\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.borrow.rust\" }, \"2\": { \"name\": \"punctuation.definition.lifetime.rust\" }, \"3\": { \"name\": \"entity.name.type.lifetime.rust\" } }, \"comment\": \"borrowing references to named lifetimes\", \"match\": \"(\\\\&)(['])([a-zA-Z_][0-9a-zA-Z_]*)(?!['])\\\\b\" }] }, \"lvariables\": { \"patterns\": [{ \"comment\": \"self\", \"match\": \"\\\\b[Ss]elf\\\\b\", \"name\": \"variable.language.self.rust\" }, { \"comment\": \"super\", \"match\": \"\\\\bsuper\\\\b\", \"name\": \"variable.language.super.rust\" }] }, \"macros\": { \"patterns\": [{ \"captures\": { \"2\": { \"name\": \"entity.name.function.macro.rust\" }, \"3\": { \"name\": \"entity.name.type.macro.rust\" } }, \"comment\": \"macros\", \"match\": \"(([a-z_][A-Za-z0-9_]*!)|([A-Z_][A-Za-z0-9_]*!))\", \"name\": \"meta.macro.rust\" }] }, \"namespaces\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"entity.name.namespace.rust\" }, \"2\": { \"name\": \"keyword.operator.namespace.rust\" } }, \"comment\": \"namespace (non-type, non-function path segment)\", \"match\": \"(?<![A-Za-z0-9_])([A-Za-z0-9_]+)((?<!super|self)::)\" }] }, \"punctuation\": { \"patterns\": [{ \"comment\": \"comma\", \"match\": \",\", \"name\": \"punctuation.comma.rust\" }, { \"comment\": \"curly braces\", \"match\": \"[{}]\", \"name\": \"punctuation.brackets.curly.rust\" }, { \"comment\": \"parentheses, round brackets\", \"match\": \"[()]\", \"name\": \"punctuation.brackets.round.rust\" }, { \"comment\": \"semicolon\", \"match\": \";\", \"name\": \"punctuation.semi.rust\" }, { \"comment\": \"square brackets\", \"match\": \"[\\\\[\\\\]]\", \"name\": \"punctuation.brackets.square.rust\" }, { \"comment\": \"angle brackets\", \"match\": \"(?<!=)[<>]\", \"name\": \"punctuation.brackets.angle.rust\" }] }, \"strings\": { \"patterns\": [{ \"begin\": '(b?)(\")', \"beginCaptures\": { \"1\": { \"name\": \"string.quoted.byte.raw.rust\" }, \"2\": { \"name\": \"punctuation.definition.string.rust\" } }, \"comment\": \"double-quoted strings and byte strings\", \"end\": '\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.rust\" } }, \"name\": \"string.quoted.double.rust\", \"patterns\": [{ \"include\": \"#escapes\" }, { \"include\": \"#interpolations\" }] }, { \"begin\": '(b?r)(#*)(\")', \"beginCaptures\": { \"1\": { \"name\": \"string.quoted.byte.raw.rust\" }, \"2\": { \"name\": \"punctuation.definition.string.raw.rust\" }, \"3\": { \"name\": \"punctuation.definition.string.rust\" } }, \"comment\": \"double-quoted raw strings and raw byte strings\", \"end\": '(\")(\\\\2)', \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.rust\" }, \"2\": { \"name\": \"punctuation.definition.string.raw.rust\" } }, \"name\": \"string.quoted.double.rust\" }, { \"begin\": \"(b)?(')\", \"beginCaptures\": { \"1\": { \"name\": \"string.quoted.byte.raw.rust\" }, \"2\": { \"name\": \"punctuation.definition.char.rust\" } }, \"comment\": \"characters and bytes\", \"end\": \"'\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.char.rust\" } }, \"name\": \"string.quoted.single.char.rust\", \"patterns\": [{ \"include\": \"#escapes\" }] }] }, \"types\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"entity.name.type.numeric.rust\" } }, \"comment\": \"numeric types\", \"match\": \"(?<![A-Za-z])(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)\\\\b\" }, { \"begin\": \"\\\\b(_?[A-Z][A-Za-z0-9_]*)(<)\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.type.rust\" }, \"2\": { \"name\": \"punctuation.brackets.angle.rust\" } }, \"comment\": \"parameterized types\", \"end\": \">\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.brackets.angle.rust\" } }, \"patterns\": [{ \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#keywords\" }, { \"include\": \"#lvariables\" }, { \"include\": \"#lifetimes\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#types\" }, { \"include\": \"#variables\" }] }, { \"comment\": \"primitive types\", \"match\": \"\\\\b(bool|char|str)\\\\b\", \"name\": \"entity.name.type.primitive.rust\" }, { \"captures\": { \"1\": { \"name\": \"keyword.declaration.trait.rust storage.type.rust\" }, \"2\": { \"name\": \"entity.name.type.trait.rust\" } }, \"comment\": \"trait declarations\", \"match\": \"\\\\b(trait)\\\\s+(_?[A-Z][A-Za-z0-9_]*)\\\\b\" }, { \"captures\": { \"1\": { \"name\": \"keyword.declaration.struct.rust storage.type.rust\" }, \"2\": { \"name\": \"entity.name.type.struct.rust\" } }, \"comment\": \"struct declarations\", \"match\": \"\\\\b(struct)\\\\s+(_?[A-Z][A-Za-z0-9_]*)\\\\b\" }, { \"captures\": { \"1\": { \"name\": \"keyword.declaration.enum.rust storage.type.rust\" }, \"2\": { \"name\": \"entity.name.type.enum.rust\" } }, \"comment\": \"enum declarations\", \"match\": \"\\\\b(enum)\\\\s+(_?[A-Z][A-Za-z0-9_]*)\\\\b\" }, { \"captures\": { \"1\": { \"name\": \"keyword.declaration.type.rust storage.type.rust\" }, \"2\": { \"name\": \"entity.name.type.declaration.rust\" } }, \"comment\": \"type declarations\", \"match\": \"\\\\b(type)\\\\s+(_?[A-Z][A-Za-z0-9_]*)\\\\b\" }, { \"comment\": \"types\", \"match\": \"\\\\b_?[A-Z][A-Za-z0-9_]*\\\\b(?!!)\", \"name\": \"entity.name.type.rust\" }] }, \"variables\": { \"patterns\": [{ \"comment\": \"variables\", \"match\": \"\\\\b(?<!(?<!\\\\.)\\\\.)(?:r#(?!(crate|[Ss]elf|super)))?[a-z0-9_]+\\\\b\", \"name\": \"variable.other.rust\" }] } }, \"scopeName\": \"source.rust\", \"aliases\": [\"rs\"] });\nvar rust = [\n  lang\n];\n\nexport { rust as default };\n"],"names":["rust","Object","freeze"],"sourceRoot":""}