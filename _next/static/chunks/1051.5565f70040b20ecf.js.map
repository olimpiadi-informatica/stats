{"version":3,"file":"static/chunks/1051.5565f70040b20ecf.js","mappings":"uIACA,IAAAA,EAAA,CADAC,OAAAC,MAAA,EAA6B,6EAA8F,kBAAqB,CAAI,8BAAiC,CAAI,qBAAwB,CAAI,6BAAgC,CAAI,8BAAiC,CAAI,sBAAyB,CAAI,yBAA4B,CAAI,qBAAwB,CAAI,6BAAgC,CAAI,wBAA2B,CAAI,6BAAgC,CAAI,uBAA0B,aAAmB,cAAkB,yDAAoE,eAAqB,kFAAyF,cAAoB,UAAc,GAAO,6CAAgD,GAAS,0CAA8C,iDAAsD,gBAAsB,4BAAoC,GAAO,gEAAoE,uBAAiC,GAAO,8DAAkE,+DAAyE,oEAAyD,EAAgB,CAAI,+DAAsE,EAAG,aAAmB,kFAAyF,WAAiB,2EAAkF,YAAkB,UAAc,GAAO,wDAA2D,GAAS,gCAAoC,gXAA4W,EAAW,kBAAwB,qEAA4E,qBAA2B,UAAc,GAAO,wCAA4C,WAAgB,WAAiB,UAAc,GAAO,6CAAiD,sBAA2B,mBAAyB,UAAc,GAAO,wDAA4D,6CAAkD,UAAgB,UAAc,GAAO,iDAAoD,GAAS,+CAAkD,GAAS,6CAAgD,GAAS,iCAAoC,GAAS,4BAAgC,oHAAyH,aAAmB,0DAAiE,mBAAyB,WAAe,mBAAsB,CAAI,4BAA+B,CAAI,4BAA+B,CAAI,yBAA4B,CAAI,wBAA2B,CAAI,0BAA6B,CAAI,sBAAyB,CAAI,sBAAyB,EAAG,iBAAuB,wEAA+E,OAAa,WAAe,yBAA4B,CAAI,wBAA2B,CAAI,uBAA0B,EAAG,cAAoB,+DAAsE,iBAAuB,UAAc,GAAO,oDAAwD,0CAA+C,WAAiB,UAAc,GAAO,6CAAgD,GAAS,6DAAgE,GAAS,+CAAkD,GAAS,gDAAmD,GAAS,+CAAkD,GAAS,kDAAqD,GAAS,8CAAkD,+DAAoE,aAAmB,UAAc,GAAO,yCAA4C,GAAS,oDAAuD,GAAS,kDAAqD,GAAS,oDAAuD,GAAS,mDAAuD,+BAAkC,EAAI,kBAAwB,0BAAkC,GAAO,kEAAsE,0BAAoC,GAAO,gEAAoE,yCAAmD,8DAAqE,CAAI,2BAA8B,EAAG,kBAAwB,2BAAmC,GAAO,uDAA2D,sEAAoF,GAAO,qDAAyD,WAAiB,iBAAoB,EAAG,QAAc,yBAAiC,GAAO,wDAA4D,0BAAoC,GAAO,sDAA0D,kDAA4D,8DAAqE,CAAI,2BAA8B,EAAG,UAAgB,UAAc,GAAO,oCAAuC,GAAS,iCAAqC,wKAA6K,YAAkB,eAAmB,gCAG7gM","sources":["webpack://_N_E/./node_modules/shiki/dist/langs/powerquery.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"PowerQuery\", \"fileTypes\": [\"pq\", \"pqm\"], \"name\": \"powerquery\", \"patterns\": [{ \"include\": \"#Noise\" }, { \"include\": \"#LiteralExpression\" }, { \"include\": \"#Keywords\" }, { \"include\": \"#ImplicitVariable\" }, { \"include\": \"#IntrinsicVariable\" }, { \"include\": \"#Operators\" }, { \"include\": \"#DotOperators\" }, { \"include\": \"#TypeName\" }, { \"include\": \"#RecordExpression\" }, { \"include\": \"#Punctuation\" }, { \"include\": \"#QuotedIdentifier\" }, { \"include\": \"#Identifier\" }], \"repository\": { \"BlockComment\": { \"begin\": \"/\\\\*\", \"end\": \"\\\\*/\", \"name\": \"comment.block.powerquery\" }, \"DecimalNumber\": { \"match\": \"(?<![\\\\d\\\\w])(\\\\d*\\\\.\\\\d+)\\\\b\", \"name\": \"constant.numeric.decimal.powerquery\" }, \"DotOperators\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.ellipsis.powerquery\" }, \"2\": { \"name\": \"keyword.operator.list.powerquery\" } }, \"match\": \"(?<!\\\\.)(?:(\\\\.\\\\.\\\\.)|(\\\\.\\\\.))(?!\\\\.)\" }, \"EscapeSequence\": { \"begin\": \"#\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.escapesequence.begin.powerquery\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.escapesequence.end.powerquery\" } }, \"name\": \"constant.character.escapesequence.powerquery\", \"patterns\": [{ \"match\": \"(#|\\\\h{4}|\\\\h{8}|cr|lf|tab)(?:,(#|\\\\h{4}|\\\\h{8}|cr|lf|tab))*\" }, { \"match\": \"[^)]\", \"name\": \"invalid.illegal.escapesequence.powerquery\" }] }, \"FloatNumber\": { \"match\": \"(\\\\d*\\\\.)?\\\\d+(e|E)(\\\\+|-)?\\\\d+\", \"name\": \"constant.numeric.float.powerquery\" }, \"HexNumber\": { \"match\": \"0(x|X)\\\\h+\", \"name\": \"constant.numeric.integer.hexadecimal.powerquery\" }, \"Identifier\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.inclusiveidentifier.powerquery\" }, \"2\": { \"name\": \"entity.name.powerquery\" } }, \"match\": \"(?:(?<![\\\\._\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}\\\\p{Mn}\\\\p{Mc}\\\\p{Cf}])(@?)([_\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}][_\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}\\\\p{Mn}\\\\p{Mc}\\\\p{Cf}]*(?:\\\\.[_\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}][_\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}\\\\p{Mn}\\\\p{Mc}\\\\p{Cf}])*)\\\\b)\" }, \"ImplicitVariable\": { \"match\": \"\\\\b_\\\\b\", \"name\": \"keyword.operator.implicitvariable.powerquery\" }, \"InclusiveIdentifier\": { \"captures\": { \"0\": { \"name\": \"inclusiveidentifier.powerquery\" } }, \"match\": \"@\" }, \"IntNumber\": { \"captures\": { \"1\": { \"name\": \"constant.numeric.integer.powerquery\" } }, \"match\": \"\\\\b(\\\\d+)\\\\b\" }, \"IntrinsicVariable\": { \"captures\": { \"1\": { \"name\": \"constant.language.intrinsicvariable.powerquery\" } }, \"match\": \"(?<![\\\\d\\\\w])(#sections|#shared)\\\\b\" }, \"Keywords\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.word.logical.powerquery\" }, \"2\": { \"name\": \"keyword.control.conditional.powerquery\" }, \"3\": { \"name\": \"keyword.control.exception.powerquery\" }, \"4\": { \"name\": \"keyword.other.powerquery\" }, \"5\": { \"name\": \"keyword.powerquery\" } }, \"match\": \"\\\\b(?:(and|or|not)|(if|then|else)|(try|otherwise)|(as|each|in|is|let|meta|type|error)|(section|shared))\\\\b\" }, \"LineComment\": { \"match\": \"//.*\", \"name\": \"comment.line.double-slash.powerquery\" }, \"LiteralExpression\": { \"patterns\": [{ \"include\": \"#String\" }, { \"include\": \"#NumericConstant\" }, { \"include\": \"#LogicalConstant\" }, { \"include\": \"#NullConstant\" }, { \"include\": \"#FloatNumber\" }, { \"include\": \"#DecimalNumber\" }, { \"include\": \"#HexNumber\" }, { \"include\": \"#IntNumber\" }] }, \"LogicalConstant\": { \"match\": \"\\\\b(true|false)\\\\b\", \"name\": \"constant.language.logical.powerquery\" }, \"Noise\": { \"patterns\": [{ \"include\": \"#BlockComment\" }, { \"include\": \"#LineComment\" }, { \"include\": \"#Whitespace\" }] }, \"NullConstant\": { \"match\": \"\\\\b(null)\\\\b\", \"name\": \"constant.language.null.powerquery\" }, \"NumericConstant\": { \"captures\": { \"1\": { \"name\": \"constant.language.numeric.float.powerquery\" } }, \"match\": \"(?<![\\\\d\\\\w])(#infinity|#nan)\\\\b\" }, \"Operators\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.function.powerquery\" }, \"2\": { \"name\": \"keyword.operator.assignment-or-comparison.powerquery\" }, \"3\": { \"name\": \"keyword.operator.comparison.powerquery\" }, \"4\": { \"name\": \"keyword.operator.combination.powerquery\" }, \"5\": { \"name\": \"keyword.operator.arithmetic.powerquery\" }, \"6\": { \"name\": \"keyword.operator.sectionaccess.powerquery\" }, \"7\": { \"name\": \"keyword.operator.optional.powerquery\" } }, \"match\": \"(=>)|(=)|(<>|<|>|<=|>=)|(&)|(\\\\+|-|\\\\*|\\\\/)|(!)|(\\\\?)\" }, \"Punctuation\": { \"captures\": { \"1\": { \"name\": \"punctuation.separator.powerquery\" }, \"2\": { \"name\": \"punctuation.section.parens.begin.powerquery\" }, \"3\": { \"name\": \"punctuation.section.parens.end.powerquery\" }, \"4\": { \"name\": \"punctuation.section.braces.begin.powerquery\" }, \"5\": { \"name\": \"punctuation.section.braces.end.powerquery\" } }, \"match\": \"(,)|(\\\\()|(\\\\))|({)|(})\" }, \"QuotedIdentifier\": { \"begin\": '#\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.quotedidentifier.begin.powerquery\" } }, \"end\": '\"(?!\")', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.quotedidentifier.end.powerquery\" } }, \"name\": \"entity.name.powerquery\", \"patterns\": [{ \"match\": '\"\"', \"name\": \"constant.character.escape.quote.powerquery\" }, { \"include\": \"#EscapeSequence\" }] }, \"RecordExpression\": { \"begin\": \"\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.section.brackets.begin.powerquery\" } }, \"contentName\": \"meta.recordexpression.powerquery\", \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.brackets.end.powerquery\" } }, \"patterns\": [{ \"include\": \"$self\" }] }, \"String\": { \"begin\": '\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.powerquery\" } }, \"end\": '\"(?!\")', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.powerquery\" } }, \"name\": \"string.quoted.double.powerquery\", \"patterns\": [{ \"match\": '\"\"', \"name\": \"constant.character.escape.quote.powerquery\" }, { \"include\": \"#EscapeSequence\" }] }, \"TypeName\": { \"captures\": { \"1\": { \"name\": \"storage.modifier.powerquery\" }, \"2\": { \"name\": \"storage.type.powerquery\" } }, \"match\": \"\\\\b(?:(optional|nullable)|(action|any|anynonnull|binary|date|datetime|datetimezone|duration|function|list|logical|none|null|number|record|table|text|type))\\\\b\" }, \"Whitespace\": { \"match\": \"\\\\s+\" } }, \"scopeName\": \"source.powerquery\" });\nvar powerquery = [\n  lang\n];\n\nexport { powerquery as default };\n"],"names":["powerquery","Object","freeze"],"sourceRoot":""}