{"version":3,"file":"static/chunks/6778-0ae1dc12dbbdde78.js","mappings":"uSCiBA,SAAAA,EAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAEA,UAAAD,CAAAA,GAAAA,CAAAA,EAAAE,OAAA,YAAAC,CAAA,CAAAC,CAAA,EACA,SAAAC,EAAAC,CAAA,EAAoC,IAAMC,EAAAN,EAAAO,IAAA,CAAAF,GAAA,CAA+B,MAAAG,EAAA,CAAYL,EAAAK,EAAA,EACrF,SAAAC,EAAAJ,CAAA,EAAmC,IAAMC,EAAAN,EAAA,MAAAK,GAAA,CAAmC,MAAAG,EAAA,CAAYL,EAAAK,EAAA,EACxF,SAAAF,EAAAI,CAAA,MAJAL,CAIgCK,CAAAA,EAAAC,IAAA,CAAAT,EAAAQ,EAAAL,KAAA,EAAAO,CAJJP,CAA5BA,EAIgCK,EAAAL,KAAA,YAJJN,EAAAM,EAAA,IAAAN,EAAA,SAAAG,CAAA,EAA+DA,EAAAG,EAAA,EAAiB,EAI5EQ,IAAA,CAAAT,EAAAK,EAAA,CAChCH,EAAA,CAAAN,EAAAA,EAAAc,KAAA,CAAAjB,EAAAC,GAAA,KAAAS,IAAA,GACA,EACA,kBAEA,mBAAAQ,iBAAAA,gBAQA,IAAAC,EAAA,OAEAC,EAAA,QAMA,OAAAC,EACAC,YAAAC,CAAA,CAAAC,CAAA,EACA,IAAAC,EAAAF,EAAAG,KAAA,CACAC,EAAAC,MAAAC,IAAA,CAAAJ,EAAAE,IAAA,GACA,MAAAJ,GAAA,CAAAA,EACA,KAAAO,KAAA,CAAAN,EACA,KAAAO,KAAA,CAAAJ,EAAAK,MAAA,KAA0CP,KAAAA,EAAAE,KAAAA,CAAA,EAAY,IAEtDjB,MAAA,CACA,IAAAF,EAAA,KAAAyB,IAAA,GAEA,OADA,KAAAC,SAAA,GACA1B,CACA,CACAyB,MAAA,CACA,YAAAF,KAAA,CAAAC,MAAA,CACA,OAAqBlB,KAAA,GAAAN,MAAA2B,KAAAA,CAAA,EAErB,IAAgBV,KAAAA,CAAA,CAAAE,KAAAA,CAAA,EAAaS,EAAA,KAAAL,KAAA,EAC7B,GAAAK,KAAAA,EAAAT,GACA,OAAqBb,KAAA,GAAAN,MAAA,KAAAK,MAAA,IAErB,IAAAwB,EAAAZ,EAAAa,GAAA,CAAAF,EAAAT,IAEA,OADA,KAAAI,KAAA,CAAAQ,IAAA,EAA0Bd,KAAAY,EAAAV,KAAAC,MAAAC,IAAA,CAAAQ,EAAAV,IAAA,MAC1B,KAAAM,IAAA,EACA,CACAC,WAAA,CACA,YAAAH,KAAA,CAAAC,MAAA,CACA,OAEA,IAAAL,EAAAS,EAAA,KAAAL,KAAA,EAAAJ,IAAA,CACAA,EAAAa,GAAA,GACAb,EAAAK,MAAA,KAGA,KAAAD,KAAA,CAAAS,GAAA,GACA,KAAAN,SAAA,GACA,CACAO,KAAA,CACA,YAAAlB,GAAA,CAAAmB,OAAA,MAAAX,KAAA,CACAY,GAAA,GAAoBhB,KAAAA,CAAA,CAAM,GAAAS,EAAAT,IAC1BiB,MAAA,CAAAH,GAAAA,KAAAA,GACAI,IAAA,IACA,CACArC,OAAA,CACA,OAAA4B,EAAA,KAAAL,KAAA,EAAAN,IAAA,CAAAa,GAAA,CAhDA,GAiDA,CACAzB,QAAA,CACA,YAAAiB,KAAA,EACA,KAAAV,EAAA,YAAAZ,KAAA,EACA,MAAAW,EAAA,YAAAsB,GAAA,EACA,qBAAAA,GAAA,QAAAjC,KAAA,IAEA,CACA,CAAAsC,OAAAC,QAAA,IACA,YAEA,CACA,IAAAX,EAAA,GACAY,CAAA,CAAAA,EAAAhB,MAAA,IAOAiB,EAAA,CAAAxB,EAAAyB,EAAAC,KACA,IAAAC,EAAA,IAAAC,IACA,GAAAH,KAAAf,IAAAe,EACA,OAAAE,EAEA,IAAAE,EAAAJ,EAAAlB,MAAA,GAEAuB,EAAAD,EAAAH,EAEAK,EAAA,IAAAC,WAAAF,EAAAD,GAAAI,IAAA,CAAAP,EAAA,GACA,QAAAQ,EAAA,EAAoBA,EAAAL,EAAO,EAAAK,EAC3BH,CAAA,CAAAG,EAAA,CAAAA,EACA,QAAAC,EAAA,EAAoBA,EAAAL,EAAO,EAAAK,EAC3BJ,CAAA,CAAAI,EAAAN,EAAA,CAAAM,EAEA,OADAC,EAAApC,EAAAyB,EAAAC,EAAAC,EAAAI,EAAA,EAAAF,EAAA,IACAF,CACA,EAcAS,EAAA,CAAApC,EAAAyB,EAAAC,EAAAC,EAAAI,EAAAD,EAAAD,EAAAQ,KACA,IAAAC,EAAAR,EAAAD,EACAb,EAAA,QAAAA,KAAAhB,EAAAE,IAAA,GACA,GAAAc,KAAAA,EAAA,CAGA,IAAAuB,EAAAR,CAAA,CAAAO,EAAA,GACAC,GAAAb,GACAC,EAAA7B,GAAA,CAAAuC,EAAA,CAAArC,EAAAa,GAAA,CAAAG,GAAAuB,EAAA,CAEA,KACA,CAIA,IAAAJ,EAAAL,EACA,QAAAU,EAAA,EAA8BA,EAAAxB,EAAAT,MAAA,CAAkB,EAAAiC,EAAA,EAAAL,EAAA,CAChD,IAAAM,EAAAzB,CAAA,CAAAwB,EAAA,CACAE,EAAAb,EAAAM,EACAQ,EAAAD,EAAAb,EAGAe,EAAAb,CAAA,CAAAW,EAAA,CACAG,EAAAC,KAAAC,GAAA,GAAAZ,EAAAT,EAAA,GACAsB,EAAAF,KAAAG,GAAA,CAAApB,EAAA,EAAAM,EAAAT,GAEA,QAAAQ,EAAAW,EAAmCX,EAAAc,EAAU,EAAAd,EAAA,CAC7C,IAAAgB,EAAAT,IAAAhB,CAAA,CAAAS,EAAA,CAIAiB,EAAApB,CAAA,CAAAY,EAAAT,EAAA,GAAAgB,EACAE,EAAArB,CAAA,CAAAY,EAAAT,EAAA,KACAmB,EAAAtB,CAAA,CAAAW,EAAAR,EAAA,GACAoB,EAAAvB,CAAA,CAAAW,EAAAR,EAAA,GAAAY,KAAAG,GAAA,CAAAE,EAAAC,EAAAC,GACAC,EAAAV,GACAA,CAAAA,EAAAU,CAAA,CACA,CAGA,GAAAV,EAAAlB,EACA,SAAAV,CAEA,CACAoB,EAAApC,EAAAa,GAAA,CAAAG,GAAAS,EAAAC,EAAAC,EAAAI,EAAAI,EAAAN,EAAAQ,EAAArB,EACA,CAEA,CAiBA,OAAAuC,EAUA1D,YAAA2D,EAAA,IAAA5B,GAAA,CAAAS,EAAA,IACA,KAAAoB,KAAA,CAAA/C,KAAAA,EACA,KAAAT,KAAA,CAAAuD,EACA,KAAAvC,OAAA,CAAAoB,CACA,CA8BAqB,SAAArB,CAAA,EACA,IAAAA,EAAAsB,UAAA,MAAA1C,OAAA,EACA,iCAEA,IAAAjB,EAAA4D,EAAA,CAAAC,EAAA,KAAA5D,KAAA,CAAAoC,EAAAyB,KAAA,MAAA7C,OAAA,CAAAV,MAAA,GACA,GAAAP,KAAAU,IAAAV,EAAA,CACA,IAAA+D,EAAA/C,EAAA,CAAAgD,EAAAJ,GACA,QAAAK,KAAAF,EAAA7D,IAAA,GACA,GAAA+D,KAAAA,GAAAA,EAAAN,UAAA,CAAA3C,GAAA,CACA,IAAAhB,EAAA,IAAA4B,IAEA,OADA5B,EAAAF,GAAA,CAAAmE,EAAAH,KAAA,CAAA9C,EAAAT,MAAA,EAAAwD,EAAAlD,GAAA,CAAAoD,IACA,IAAAV,EAAAvD,EAAAqC,EACA,CAEA,CACA,WAAAkB,EAAAvD,EAAAqC,EACA,CAIA6B,OAAA,CACA,KAAAT,KAAA,CAAA/C,KAAAA,EACA,KAAAT,KAAA,CAAAiE,KAAA,EACA,CAKAC,OAAAnD,CAAA,EAEA,OADA,KAAAyC,KAAA,CAAA/C,KAAAA,EACA0D,EAAA,KAAAnE,KAAA,CAAAe,EACA,CAKAqD,SAAA,CACA,WAAAzE,EAAA,KA1PA,UA2PA,CAKA0E,QAAAC,CAAA,EACA,QAAAvD,EAAAjC,EAAA,QACAwF,EAAAvD,EAAAjC,EAAA,KAEA,CA6BAyF,SAAAxD,CAAA,CAAAyD,CAAA,EACA,OAAAjD,EAAA,KAAAvB,KAAA,CAAAe,EAAAyD,EACA,CAOA5D,IAAAG,CAAA,EACA,IAAAhB,EAAA0E,EAAA,KAAAzE,KAAA,CAAAe,GACA,OAAAhB,KAAAU,IAAAV,EAAAA,EAAAa,GAAA,CAtSA,IAsSAH,KAAAA,CACA,CAMAiE,IAAA3D,CAAA,EACA,IAAAhB,EAAA0E,EAAA,KAAAzE,KAAA,CAAAe,GACA,OAAAhB,KAAAU,IAAAV,GAAAA,EAAA2E,GAAA,CA/SA,GAgTA,CAKAzE,MAAA,CACA,WAAAN,EAAA,KAAAF,EACA,CAOAI,IAAAkB,CAAA,CAAAjC,CAAA,EACA,oBAAAiC,EACA,oCAKA,OAHA,KAAAyC,KAAA,CAAA/C,KAAAA,EAEAV,EADA,KAAAC,KAAA,CAAAe,GACAlB,GAAA,CApUA,GAoUAf,GACA,KAKA,IAAA6F,MAAA,CACA,QAAAnB,KAAA,CACA,YAAAA,KAAA,CAGA,KAAAA,KAAA,GACA,IAAAoB,EAAA,KAAAR,OAAA,GACA,MAAAQ,EAAA5F,IAAA,GAAAI,IAAA,EACA,KAAAoE,KAAA,IACA,YAAAA,KAAA,CAsBAqB,OAAA9D,CAAA,CAAAuD,CAAA,EACA,oBAAAvD,EACA,mCAEA,MAAAyC,KAAA,CAAA/C,KAAAA,EACA,IAAAV,EAAA+E,EAAA,KAAA9E,KAAA,CAAAe,GAEA,OADAhB,EAAAF,GAAA,CA/WA,GA+WAyE,EAAAvE,EAAAa,GAAA,CA/WA,MAgXA,KAkBAmE,MAAAhE,CAAA,CAAAiE,CAAA,EACA,oBAAAjE,EACA,mCAEA,MAAAyC,KAAA,CAAA/C,KAAAA,EACA,IAAAV,EAAA+E,EAAA,KAAA9E,KAAA,CAAAe,GACAjC,EAAAiB,EAAAa,GAAA,CAxYA,IA4YA,OAHAH,KAAAA,IAAA3B,GACAiB,EAAAF,GAAA,CA1YA,GA0YAf,EAAAkG,KAEAlG,CACA,CAKAmG,QAAA,CACA,WAAAtF,EAAA,KAAAD,EACA,CAIA,CAAA0B,OAAAC,QAAA,IACA,YAAA+C,OAAA,EACA,CAOA,OAAAjE,KAAAiE,CAAA,EACA,IAAAb,EAAA,IAAAD,EACA,QAAAvC,EAAAjC,EAAA,GAAAsF,EACAb,EAAA1D,GAAA,CAAAkB,EAAAjC,GAEA,OAAAyE,CACA,CAOA,OAAA2B,WAAAC,CAAA,EACA,OAAA7B,EAAAnD,IAAA,CAAAiF,OAAAhB,OAAA,CAAAe,GACA,CACA,CACA,IAAAvB,EAAA,CAAAL,EAAAxC,EAAA4C,EAAA,MACA,GAAA5C,IAAAA,EAAAT,MAAA,EAAAiD,MAAAA,EACA,OAAAA,EAAAI,EAAA,CAEA,QAAAK,KAAAT,EAAAtD,IAAA,GACA,GAAA+D,KAAAA,GAAAjD,EAAA2C,UAAA,CAAAM,GAEA,OADAL,EAAA9C,IAAA,EAAA0C,EAAAS,EAAA,EACAJ,EAAAL,EAAA3C,GAAA,CAAAoD,GAAAjD,EAAA8C,KAAA,CAAAG,EAAA1D,MAAA,EAAAqD,GAIA,OADAA,EAAA9C,IAAA,EAAA0C,EAAAxC,EAAA,EACA6C,EAAAnD,KAAAA,EAAA,GAAAkD,EACA,EACAc,EAAA,CAAAlB,EAAAxC,KACA,GAAAA,IAAAA,EAAAT,MAAA,EAAAiD,MAAAA,EACA,OAAAA,EAEA,QAAAS,KAAAT,EAAAtD,IAAA,GACA,GAAA+D,KAAAA,GAAAjD,EAAA2C,UAAA,CAAAM,GACA,OAAAS,EAAAlB,EAAA3C,GAAA,CAAAoD,GAAAjD,EAAA8C,KAAA,CAAAG,EAAA1D,MAAA,EAGA,EAIAwE,EAAA,CAAA/E,EAAAgB,KACA,IAAAsE,EAAAtE,EAAAT,MAAA,CACAgF,EAAA,QAAA/C,EAAA,EAA6BxC,GAAAwC,EAAA8C,GAAwB,CACrD,QAAArB,KAAAjE,EAAAE,IAAA,GAEA,GAAA+D,KAAAA,GAAAjD,CAAA,CAAAwB,EAAA,GAAAyB,CAAA,KACA,IAAAuB,EAAA1C,KAAAG,GAAA,CAAAqC,EAAA9C,EAAAyB,EAAA1D,MAAA,EAEA+B,EAAA,EACA,KAAAA,EAAAkD,GAAAxE,CAAA,CAAAwB,EAAAF,EAAA,GAAA2B,CAAA,CAAA3B,EAAA,EACA,EAAAA,EACA,IAAA1B,EAAAZ,EAAAa,GAAA,CAAAoD,GACA,GAAA3B,IAAA2B,EAAA1D,MAAA,CAEAP,EAAAY,MAEA,CAGA,IAAA6E,EAAA,IAAA7D,IACA6D,EAAA3F,GAAA,CAAAmE,EAAAH,KAAA,CAAAxB,GAAA1B,GACAZ,EAAAF,GAAA,CAAAkB,EAAA8C,KAAA,CAAAtB,EAAAA,EAAAF,GAAAmD,GACAzF,EAAAmE,MAAA,CAAAF,GACAjE,EAAAyF,CACA,CACAjD,GAAAF,EACA,SAAAiD,CACA,CAGA,IAAA3E,EAAA,IAAAgB,IAEA,OADA5B,EAAAF,GAAA,CAAAkB,EAAA8C,KAAA,CAAAtB,GAAA5B,GACAA,CACA,CACA,OAAAZ,CACA,EACAoE,EAAA,CAAAZ,EAAAxC,KACA,IAAAhB,EAAA4D,EAAA,CAAAC,EAAAL,EAAAxC,GACA,GAAAhB,KAAAU,IAAAV,GAIA,GADAA,EAAAmE,MAAA,CArfA,IAsfAnE,IAAAA,EAAA4E,IAAA,CACAc,EAAA9B,QAEA,GAAA5D,IAAAA,EAAA4E,IAAA,EACA,IAAA5D,EAAAjC,EAAA,CAAAiB,EAAAqE,OAAA,GAAApF,IAAA,GAAAF,KAAA,CACA4G,EAAA/B,EAAA5C,EAAAjC,EACA,EACA,EACA2G,EAAA,IACA,GAAA9B,IAAAA,EAAArD,MAAA,CACA,OAEA,IAAAP,EAAAgB,EAAA,CAAAgD,EAAAJ,GAEA,GADA5D,EAAAmE,MAAA,CAAAnD,GACAhB,IAAAA,EAAA4E,IAAA,CACAc,EAAA9B,EAAAE,KAAA,aAEA,GAAA9D,IAAAA,EAAA4E,IAAA,EACA,IAAA5D,EAAAjC,EAAA,CAAAiB,EAAAqE,OAAA,GAAApF,IAAA,GAAAF,KAAA,CAxgBA,KAygBAiC,GACA2E,EAAA/B,EAAAE,KAAA,OAAA9C,EAAAjC,EAEA,CACA,EACA4G,EAAA,CAAA/B,EAAA5C,EAAAjC,KACA,GAAA6E,IAAAA,EAAArD,MAAA,CACA,OAEA,IAAAP,EAAA4F,EAAA,CAAA5B,EAAAJ,GACA5D,EAAAF,GAAA,CAAA8F,EAAA5E,EAAAjC,GACAiB,EAAAmE,MAAA,CAAAyB,EACA,EACA5B,EAAA,GACAzC,CAAA,CAAAA,EAAAhB,MAAA,UA8DAsF,EA8DAhG,YAAAiG,CAAA,EACA,IAAAA,MAAAA,EAAA,OAAAA,EAAAC,MAAA,QACA,4DAEA,IAAAC,EAAA,MAAAF,EAAAE,UAAA,EAAAF,CAAA,IAAAA,EAAAE,UAAA,CAAAC,EAAAH,EAAAE,UAAA,CACA,KAAAE,QAAA,CAAAb,OAAAc,MAAA,CAAAd,OAAAc,MAAA,CAAAd,OAAAc,MAAA,IAAoEC,GAAAN,GAAA,CAA+BE,WAAAA,EAAAK,cAAAhB,OAAAc,MAAA,CAAAd,OAAAc,MAAA,IAAyDG,GAAAR,EAAAO,aAAA,MAAqDE,mBAAAlB,OAAAc,MAAA,CAAAd,OAAAc,MAAA,IAAsDK,GAAAV,EAAAS,kBAAA,KAA+D,GACtU,KAAAE,MAAA,KAAAlD,EACA,KAAAmD,cAAA,GACA,KAAAC,YAAA,KAAA/E,IACA,KAAAgF,YAAA,KAAAhF,IAKA,KAAAiF,SAAA,IACA,KAAAC,YAAA,KAAAlF,IACA,KAAAmF,eAAA,IACA,KAAAC,OAAA,GACA,KAAAC,aAAA,KAAArF,IACA,KAAAsF,UAAA,GACA,KAAAC,cAAA,MACA,KAAAC,eAAA,MACA,KAAAC,yBAAA,CAAAC,EACA,KAAAC,SAAA,MAAArB,QAAA,CAAAH,MAAA,CACA,CAMAyB,IAAAC,CAAA,EACA,IAAgBC,aAAAA,CAAA,CAAAC,SAAAA,CAAA,CAAAC,YAAAA,CAAA,CAAA7B,OAAAA,CAAA,CAAA8B,QAAAA,CAAA,EAAuD,KAAA3B,QAAA,CACvE4B,EAAAJ,EAAAD,EAAAI,GACA,GAAAC,MAAAA,EACA,4DAA4ED,EAAQ,IAEpF,QAAAjB,YAAA,CAAAjC,GAAA,CAAAmD,GACA,wCAAwDA,EAAG,GAE3D,IAAAC,EAAA,KAAAC,aAAA,CAAAF,GAEA,QAAAG,KADA,KAAAC,gBAAA,CAAAH,EAAAN,GACA1B,GAAA,CACA,IAAAoC,EAAAT,EAAAD,EAAAQ,GACA,GAAAE,MAAAA,EACA,SACA,IAAAC,EAAAT,EAAAQ,EAAAE,QAAA,GAAAJ,GACAK,EAAA,KAAAzB,SAAA,CAAAoB,EAAA,CACAM,EAAA,IAAAC,IAAAJ,GAAAxD,IAAA,CAEA,QAAA6D,KADA,KAAAC,cAAA,CAAAX,EAAAO,EAAA,KAAA5B,cAAA,GAAA6B,GACAH,GAAA,CACA,IAAAO,EAAAf,EAAAa,EAAAR,GACA,GAAA9H,MAAAyI,OAAA,CAAAD,GACA,QAAAE,KAAAF,EACA,KAAAG,OAAA,CAAAR,EAAAP,EAAAc,QAGAF,GACA,KAAAG,OAAA,CAAAR,EAAAP,EAAAY,EAEA,CACA,CACA,CAMAI,OAAAC,CAAA,EACA,QAAAvB,KAAAuB,EACA,KAAAxB,GAAA,CAAAC,EACA,CAYAwB,YAAAD,CAAA,CAAAlD,EAAA,EAAuC,EACvC,IAAgBoD,UAAAA,EAAA,IAAiBpD,EACjCqD,EAAA,CAAsBC,MAAA,GAAAC,QAAA1K,QAAAC,OAAA,IACtB,CAAgBwK,MAAAA,CAAA,CAAAC,QAAAA,CAAA,EAAiBL,EAAAM,MAAA,GAAsBF,MAAAA,CAAA,CAAAC,QAAAA,CAAA,CAAgB,CAAA5B,EAAAtF,IAEvE,CADAiH,EAAAtI,IAAA,CAAA2G,GACA,CAAAtF,EAAA,GAAA+G,GAAA,GACA,CACAE,MAAA,GACAC,QAAAA,EACA9J,IAAA,SAAAZ,QAAAC,GAAA2K,WAAA3K,EAAA,KACAW,IAAA,UAAAwJ,MAAA,CAAAK,GACA,EAGA,CAAyBA,MAAAA,EAAAC,QAAAA,CAAA,EAEhBF,GACT,OAAAE,EAAA9J,IAAA,UAAAwJ,MAAA,CAAAK,GACA,CAeAhF,OAAAqD,CAAA,EACA,IAAgBE,SAAAA,CAAA,CAAAC,YAAAA,CAAA,CAAAF,aAAAA,CAAA,CAAA3B,OAAAA,CAAA,CAAA8B,QAAAA,CAAA,EAAuD,KAAA3B,QAAA,CACvE4B,EAAAJ,EAAAD,EAAAI,GACA,GAAAC,MAAAA,EACA,4DAA4ED,EAAQ,IAEpF,IAAA2B,EAAA,KAAA5C,YAAA,CAAA/F,GAAA,CAAAiH,GACA,GAAA0B,MAAAA,EACA,0DAA0E1B,EAAG,2BAE7E,QAAAG,KAAAlC,EAAA,CACA,IAAAoC,EAAAT,EAAAD,EAAAQ,GACA,GAAAE,MAAAA,EACA,SACA,IAAAC,EAAAT,EAAAQ,EAAAE,QAAA,GAAAJ,GACAK,EAAA,KAAAzB,SAAA,CAAAoB,EAAA,CACAM,EAAA,IAAAC,IAAAJ,GAAAxD,IAAA,CAEA,QAAA6D,KADA,KAAAgB,iBAAA,CAAAD,EAAAlB,EAAA,KAAA5B,cAAA,CAAA6B,GACAH,GAAA,CACA,IAAAO,EAAAf,EAAAa,EAAAR,GACA,GAAA9H,MAAAyI,OAAA,CAAAD,GACA,QAAAE,KAAAF,EACA,KAAAe,UAAA,CAAApB,EAAAkB,EAAAX,QAGAF,GACA,KAAAe,UAAA,CAAApB,EAAAkB,EAAAb,EAEA,CACA,CACA,KAAA1B,aAAA,CAAA9C,MAAA,CAAAqF,GACA,KAAA7C,YAAA,CAAAxC,MAAA,CAAAqF,GACA,KAAA5C,YAAA,CAAAzC,MAAA,CAAA2D,GACA,KAAAhB,YAAA,CAAA3C,MAAA,CAAAqF,GACA,KAAA9C,cAAA,GACA,CAUAiD,UAAAX,CAAA,EACA,GAAAA,EACA,QAAAvB,KAAAuB,EACA,KAAA5E,MAAA,CAAAqD,QAEA,GAAAmC,UAAArJ,MAAA,GACA,iGAGA,KAAAkG,MAAA,KAAAlD,EACA,KAAAmD,cAAA,GACA,KAAAC,YAAA,KAAA/E,IACA,KAAAgF,YAAA,KAAAhF,IACA,KAAAkF,YAAA,KAAAlF,IACA,KAAAmF,eAAA,IACA,KAAAE,aAAA,KAAArF,IACA,KAAAoF,OAAA,EAEA,CA6CA6C,QAAA/B,CAAA,EACA,IAAA0B,EAAA,KAAA5C,YAAA,CAAA/F,GAAA,CAAAiH,GACA,GAAA0B,MAAAA,EACA,2DAA2E1B,EAAG,2BAE9E,KAAAlB,YAAA,CAAAzC,MAAA,CAAA2D,GACA,KAAAnB,YAAA,CAAAxC,MAAA,CAAAqF,GACA,KAAAvC,aAAA,CAAA9C,MAAA,CAAAqF,GACA,MAAA1C,YAAA,CAAAjG,GAAA,CAAA2I,IAAA,IAAAlF,OAAA,EAAAwF,EAAAxB,KACA,KAAAmB,iBAAA,CAAAD,EAAAlB,EAAA,KAAA5B,cAAA,CAAAoD,EACA,GACA,KAAAhD,YAAA,CAAA3C,MAAA,CAAAqF,GACA,KAAA9C,cAAA,IACA,KAAAQ,UAAA,IACA,KAAA6C,eAAA,EACA,CACAA,iBAAA,CACA,aAAA7D,QAAA,CAAAF,UAAA,CACA,OAEA,IAAgBgE,cAAAA,CAAA,CAAAC,aAAAA,CAAA,CAAAC,UAAAA,CAAA,CAAAC,UAAAA,CAAA,EAAoD,KAAAjE,QAAA,CAAAF,UAAA,CACpE,KAAAoE,iBAAA,EAAiCF,UAAAA,EAAAC,UAAAA,CAAA,EAAsB,CAAIF,aAAAA,EAAAD,cAAAA,CAAA,EAC3D,CAaAK,WAAAC,CAAA,EACA,IAAAtE,EAAA,KAAAE,QAAA,CAAAF,UAAA,CACA,IAEA,QAAA8B,KADA,KAAA5B,QAAA,CAAAF,UAAA,IACAsE,GACA,KAAAT,OAAA,CAAA/B,EAEA,QACA,CACA,KAAA5B,QAAA,CAAAF,UAAA,CAAAA,CACA,CACA,KAAA+D,eAAA,EACA,CAgBAQ,QAAAC,CAAA,EACA,IAAgB3C,QAAAA,CAAA,CAAAH,aAAAA,CAAA,EAAwB,KAAAxB,QAAA,CACxC4B,EAAAJ,EAAA8C,EAAA3C,GACA,KAAAgC,OAAA,CAAA/B,GACA,KAAAN,GAAA,CAAAgD,EACA,CAwCAC,OAAA3E,EAAA,EAAuB,EACvB,YAAAsE,iBAAA,CAAAtE,EACA,CACAsE,kBAAAtE,CAAA,CAAA4E,CAAA,SAKA,KAAAvD,cAAA,EACA,KAAAE,yBAAA,MAAAA,yBAAA,EAAAqD,EACA,WAAAtD,eAAA,EAGA,MAAAA,eAAA,MAAAD,cAAA,CAAA5H,IAAA,MACA,IAAAmL,EAAA,KAAArD,yBAAA,CAEA,OADA,KAAAA,yBAAA,CAAAC,EACA,KAAAqD,gBAAA,CAAA7E,EAAA4E,EACA,EAAa,EANb,KAAAtD,eAAA,EASA,UAAAwD,mBAAA,CAAAF,GACA/L,QAAAC,OAAA,IAEA,KAAAuI,cAAA,MAAAwD,gBAAA,CAAA7E,GACA,KAAAqB,cAAA,CACA,CACAwD,iBAAA7E,CAAA,CAAA4E,CAAA,EACA,OAAApM,EAAA,+BACA,IAAAuM,EAAA,KAAA3D,UAAA,CACA,QAAA0D,mBAAA,CAAAF,GAAA,CACA,IAAAR,EAAApE,EAAAoE,SAAA,EAAAY,EAAAZ,SAAA,CACAC,EAAArE,EAAAqE,SAAA,EAAAW,EAAAX,SAAA,CACAhI,EAAA,EACA,QAAAsG,EAAAsC,EAAA,QAAAtE,MAAA,EACA,QAAA6B,EAAA0C,EAAA,GAAAD,EACA,QAAAvB,EAAA,GAAAwB,EACA,KAAArE,YAAA,CAAAhC,GAAA,CAAA6E,KAGAwB,EAAApG,IAAA,IACAmG,EAAA5G,MAAA,CAAAmE,GAGA0C,EAAA7G,MAAA,CAAAqF,GAIA,UAAA/C,MAAA,CAAA5F,GAAA,CAAA4H,GAAA7D,IAAA,EACA,KAAA6B,MAAA,CAAAtC,MAAA,CAAAsE,GAEAtG,EAAA+H,GAAA,GACA,WAAAvL,QAAA,GAAA4K,WAAA3K,EAAAuL,GAAA,EAEAhI,GAAA,CACA,CACA,KAAA+E,UAAA,EAAA2D,CACA,CAEA,WACA,KAAA1D,cAAA,MAAAC,eAAA,CACA,KAAAA,eAAA,KACA,EACA,CACAwD,oBAAAF,CAAA,EACA,GAAAA,MAAAA,EACA,SAEA,IAAcT,aAAAA,CAAA,CAAAD,cAAAA,CAAA,EAA8BU,EAG5C,OAFAT,EAAAA,GAAAhE,EAAAgE,YAAA,CACAD,EAAAA,GAAA/D,EAAA+D,aAAA,CACA,KAAAiB,SAAA,EAAAhB,GAAA,KAAAiB,UAAA,EAAAlB,CACA,CAIA,IAAAmB,aAAA,CACA,kBAAAhE,cAAA,CAKA,IAAA8D,WAAA,CACA,YAAA/D,UAAA,CASA,IAAAgE,YAAA,CACA,YAAAhE,UAAA,SAAAR,cAAA,MAAAQ,UAAA,CACA,CAOAvC,IAAAmD,CAAA,EACA,YAAAlB,YAAA,CAAAjC,GAAA,CAAAmD,EACA,CAQAsD,gBAAAtD,CAAA,EACA,IAAA0B,EAAA,KAAA5C,YAAA,CAAA/F,GAAA,CAAAiH,GACA,GAAA0B,MAAAA,EAGA,YAAAvC,aAAA,CAAApG,GAAA,CAAA2I,EACA,CAiKA6B,OAAA5J,CAAA,CAAA4E,EAAA,EAAoC,EACpC,IAAAiF,EAAA,KAAAC,YAAA,CAAA9J,EAAA4E,GACA1E,EAAA,GACA,QAAA6J,EAAA,CAA6BC,MAAAA,CAAA,CAAAC,MAAAA,CAAA,CAAAC,MAAAA,CAAA,CAAqB,IAAAL,EAAA,CAKlD,IAAAM,EAAAF,EAAAnL,MAAA,IACAnB,EAAA,CACA0I,GAAA,KAAAnB,YAAA,CAAA9F,GAAA,CAAA2K,GACAC,MAAAA,EAAAG,EACAF,MAAArG,OAAAnF,IAAA,CAAAyL,GACAE,WAAAH,EACAC,MAAAA,CACA,EACAtG,OAAAc,MAAA,CAAA/G,EAAA,KAAA6H,aAAA,CAAApG,GAAA,CAAA2K,IACAnF,CAAAA,MAAAA,EAAAlF,MAAA,EAAAkF,EAAAlF,MAAA,CAAA/B,EAAA,GACAuC,EAAAb,IAAA,CAAA1B,EAEA,QAGAqC,IAAAoE,EAAAiG,QAAA,EACAzF,MAAAA,EAAA0F,aAAA,EACA,WAAA7F,QAAA,CAAAG,aAAA,CAAA0F,aAAA,EAGApK,EAAAqK,IAAA,CAAAC,GAFAtK,CAIA,CA8DAuK,YAAAC,CAAA,CAAArG,EAAA,EAAyC,EACzCA,EAAAT,OAAAc,MAAA,CAAAd,OAAAc,MAAA,IAAgD,KAAAD,QAAA,CAAAK,kBAAA,EAAAT,GAChD,IAAAsG,EAAA,IAAAxK,IACA,QAAqB6J,MAAAA,CAAA,CAAAC,MAAAA,CAAA,IAAe,KAAAL,MAAA,CAAAc,EAAArG,GAAA,CACpC,IAAAuG,EAAAX,EAAAtK,IAAA,MACAkL,EAAAF,EAAAvL,GAAA,CAAAwL,EACAC,OAAAA,GACAA,EAAAb,KAAA,EAAAA,EACAa,EAAAC,KAAA,KAGAH,EAAAtM,GAAA,CAAAuM,EAAA,CAA0CZ,MAAAA,EAAAC,MAAAA,EAAAa,MAAA,GAE1C,CACA,IAAA5K,EAAA,GACA,QAAA2K,EAAA,CAAkCb,MAAAA,CAAA,CAAAC,MAAAA,CAAA,CAAAa,MAAAA,CAAA,CAAqB,IAAAH,EACvDzK,EAAAb,IAAA,EAA2BwL,WAAAA,EAAAZ,MAAAA,EAAAD,MAAAA,EAAAc,CAAA,GAG3B,OADA5K,EAAAqK,IAAA,CAAAC,GACAtK,CACA,CAIA,IAAA6K,eAAA,CACA,YAAA9F,cAAA,CAKA,IAAA+F,WAAA,CACA,YAAAhG,MAAA,CAAA7B,IAAA,CAuBA,OAAA8H,SAAAC,CAAA,CAAA7G,CAAA,EACA,GAAAA,MAAAA,EACA,qGAEA,YAAA8G,MAAA,CAAAC,KAAAC,KAAA,CAAAH,GAAA7G,EACA,CAcA,OAAAiH,cAAAJ,CAAA,CAAA7G,CAAA,EACA,OAAAxH,EAAA,+BACA,GAAAwH,MAAAA,EACA,qGAEA,YAAAkH,WAAA,CAAAH,KAAAC,KAAA,CAAAH,GAAA7G,EACA,EACA,CAsBA,OAAAmH,WAAAC,CAAA,EACA,GAAA9G,EAAA+G,cAAA,CAAAD,GACA,OAAAE,EAAAhH,EAAA8G,EAGA,4CAA2DA,EAAW,GAEtE,CAIA,OAAAN,OAAAS,CAAA,CAAAvH,CAAA,EACA,IAAgBwH,MAAAA,CAAA,CAAAC,YAAAA,CAAA,CAAAzD,YAAAA,CAAA,CAAA0D,aAAAA,CAAA,CAAAC,qBAAAA,CAAA,EAAsEJ,EACtFK,EAAA,KAAAC,qBAAA,CAAAN,EAAAvH,GAIA,QAAA0D,EAAA1B,EAAA,GAHA4F,EAAA/G,YAAA,CAAAiH,EAAAL,GACAG,EAAA5G,YAAA,CAAA8G,EAAA9D,GACA4D,EAAAzG,aAAA,CAAA2G,EAAAJ,GACAE,EAAA/G,YAAA,EACA+G,EAAA9G,YAAA,CAAA9G,GAAA,CAAAgI,EAAA0B,GAEA,QAAAf,EAAAoF,EAAA,GAAAP,EAAA,CACA,IAAAQ,EAAA,IAAAlM,IACA,QAAA0G,KAAAjD,OAAAnF,IAAA,CAAA2N,GAAA,CACA,IAAAE,EAAAF,CAAA,CAAAvF,EAAA,CAEA,IAAAmF,GACAM,CAAAA,EAAAA,EAAAC,EAAA,EAEAF,EAAAhO,GAAA,CAAAmO,SAAA3F,EAAA,IAAAsF,EAAAG,GACA,CACAL,EAAAjH,MAAA,CAAA3G,GAAA,CAAA2I,EAAAqF,EACA,CACA,OAAAJ,CACA,CAIA,OAAAV,YAAAK,CAAA,CAAAvH,CAAA,EACA,OAAAxH,EAAA,+BACA,IAAoBgP,MAAAA,CAAA,CAAAC,YAAAA,CAAA,CAAAzD,YAAAA,CAAA,CAAA0D,aAAAA,CAAA,CAAAC,qBAAAA,CAAA,EAAsEJ,EAC1FK,EAAA,KAAAC,qBAAA,CAAAN,EAAAvH,GAIA,QAAA0D,EAAA1B,EAAA,GAHA4F,EAAA/G,YAAA,OAAAuH,EAAAX,GACAG,EAAA5G,YAAA,OAAAoH,EAAApE,GACA4D,EAAAzG,aAAA,OAAAiH,EAAAV,GACAE,EAAA/G,YAAA,EACA+G,EAAA9G,YAAA,CAAA9G,GAAA,CAAAgI,EAAA0B,GAEA,IAAA+C,EAAA,EACA,QAAA9D,EAAAoF,EAAA,GAAAP,EAAA,CACA,IAAAQ,EAAA,IAAAlM,IACA,QAAA0G,KAAAjD,OAAAnF,IAAA,CAAA2N,GAAA,CACA,IAAAE,EAAAF,CAAA,CAAAvF,EAAA,CAEA,IAAAmF,GACAM,CAAAA,EAAAA,EAAAC,EAAA,EAEAF,EAAAhO,GAAA,CAAAmO,SAAA3F,EAAA,WAAA4F,EAAAH,EAAA,EACA,CACA,EAAAxB,EAAA,QACA,OAAA4B,EAAA,IACAT,EAAAjH,MAAA,CAAA3G,GAAA,CAAA2I,EAAAqF,EACA,CACA,OAAAJ,CACA,EACA,CAIA,OAAAC,sBAAAN,CAAA,CAAAvH,CAAA,EACA,IAAgB0G,cAAAA,CAAA,CAAA4B,OAAAA,CAAA,CAAAC,SAAAA,CAAA,CAAAC,mBAAAA,CAAA,CAAArD,UAAAA,CAAA,CAAAwC,qBAAAA,CAAA,EAAuFJ,EACvG,GAAAI,IAAAA,GAAAA,IAAAA,EACA,4FAEA,IAAAC,EAAA,IAAA7H,EAAAC,GAQA,OAPA4H,EAAAhH,cAAA,CAAA8F,EACAkB,EAAA1G,OAAA,CAAAoH,EACAV,EAAA9G,YAAA,KAAAhF,IACA8L,EAAA7G,SAAA,CAAAwH,EACAX,EAAA3G,eAAA,CAAAuH,EACAZ,EAAAxG,UAAA,CAAA+D,GAAA,EACAyC,EAAAjH,MAAA,KAAAlD,EACAmK,CACA,CAIAnC,aAAA9J,CAAA,CAAA4E,EAAA,EAA0C,EAC1C,GAAA5E,IAAAoE,EAAAiG,QAAA,CACA,YAAAyC,oBAAA,CAAAlI,GAEA,oBAAA5E,EAAA,CACA,IAAAqE,EAAAT,OAAAc,MAAA,CAAAd,OAAAc,MAAA,CAAAd,OAAAc,MAAA,IAAwEE,GAAA5E,GAAA,CAA4B+M,QAAA9N,KAAAA,CAAA,GACpGiB,EAAAF,EAAA+M,OAAA,CAAAtN,GAAA,SAAAqK,YAAA,CAAAkD,EAAA3I,IACA,YAAA4I,cAAA,CAAA/M,EAAAmE,EAAA6I,WAAA,CACA,CACA,IAAgBhH,SAAAA,CAAA,CAAAC,YAAAA,CAAA,CAAAvB,cAAAuI,CAAA,EAA4D,KAAA1I,QAAA,CAC5EJ,EAAAT,OAAAc,MAAA,CAAAd,OAAAc,MAAA,EAAsDwB,SAAAA,EAAAC,YAAAA,CAAA,EAAuBgH,GAAAvI,GAC7E,CAAgBsB,SAAAkH,CAAA,CAAAjH,YAAAkH,CAAA,EAA2DhJ,EAK3EnE,EAAA6M,EAJA/M,GACAsN,OAAA,IAAAD,EAAArG,IACAtH,MAAA,MAAAsH,GACAvH,GAAA,CAAA8N,EAAAlJ,IACA5E,GAAA,CAAAO,GAAA,KAAAwN,gBAAA,CAAAxN,EAAAqE,IACA,YAAA4I,cAAA,CAAA/M,EAAAmE,EAAA6I,WAAA,CACA,CAIAM,iBAAAxN,CAAA,CAAA4E,CAAA,MAOA6I,EACAC,EAPA,IAAArJ,EAAAT,OAAAc,MAAA,CAAAd,OAAAc,MAAA,IAAsD,KAAAD,QAAA,CAAAG,aAAA,EAAAA,GACtD+I,EAAA,CAAAtJ,EAAAC,MAAA,OAAAG,QAAA,CAAAH,MAAA,EAAAuD,MAAA,EAAA8F,EAAAnH,IAAA5C,OAAAc,MAAA,CAAAd,OAAAc,MAAA,IAAyHiJ,GAAA,CAAa,CAAAnH,EAAA,CAAAmF,EAAAtH,EAAAuJ,KAAA,CAAApH,IAAA,IAAoD,IAC1L,CAAgB8D,cAAAA,CAAA,CAAAuD,QAAAA,CAAA,CAAAC,SAAAA,CAAA,CAAAC,KAAAC,CAAA,EAAqD3J,EACrE,CAAgB4J,MAAAC,CAAA,CAAAtN,OAAAuN,CAAA,EAA2CvK,OAAAc,MAAA,CAAAd,OAAAc,MAAA,IAAgCG,EAAAgJ,OAAA,EAAAA,GAC3FzB,EAAA,KAAApH,MAAA,CAAA5F,GAAA,CAAAY,EAAAgH,IAAA,EACA9G,EAAA,KAAAkO,WAAA,CAAApO,EAAAgH,IAAA,CAAAhH,EAAAgH,IAAA,GAAAhH,EAAAqO,SAAA,CAAAjC,EAAAuB,EAAArD,EAAA0D,GAMA,GAHAhO,EAAAY,MAAA,EACA6M,CAAAA,EAAA,KAAAzI,MAAA,CAAA/C,QAAA,CAAAjC,EAAAgH,IAAA,GAEAhH,EAAAiO,KAAA,EACA,IAAAA,EAAA,KAAAjO,EAAAiO,KAAA,IAAAjO,EAAAiO,KAAA,CACAhO,EAAAgO,EAAA,EAAA5M,KAAAG,GAAA,CAAAsM,EAAAzM,KAAAiN,KAAA,CAAAtO,EAAAgH,IAAA,CAAAlI,MAAA,CAAAmP,IAAAA,EACAhO,GACAyN,CAAAA,EAAA,KAAA1I,MAAA,CAAAjC,QAAA,CAAA/C,EAAAgH,IAAA,CAAA/G,EAAA,CACA,CACA,GAAAwN,EACA,QAAAzG,EAAAoF,EAAA,GAAAqB,EAAA,CACA,IAAA3M,EAAAkG,EAAAlI,MAAA,CAAAkB,EAAAgH,IAAA,CAAAlI,MAAA,CACA,IAAAgC,EACA,QAIA4M,OAAAA,GAAAA,EAAAhL,MAAA,CAAAsE,GAMA,IAAAuH,EAAAJ,EAAAnH,EAAAlI,MAAA,CAAAkI,CAAAA,EAAAlI,MAAA,IAAAgC,CAAA,EACA,KAAAsN,WAAA,CAAApO,EAAAgH,IAAA,CAAAA,EAAAuH,EAAAvO,EAAAqO,SAAA,CAAAjC,EAAAuB,EAAArD,EAAA0D,EAAA9N,EACA,CAEA,GAAAwN,EACA,QAAA1G,KAAA0G,EAAAjP,IAAA,IACA,IAAA2N,EAAAtL,EAAA,CAAA4M,EAAAtO,GAAA,CAAA4H,GACA,IAAAlG,EACA,SAIA,IAAAyN,EAAAL,EAAAlH,EAAAlI,MAAA,CAAAkI,CAAAA,EAAAlI,MAAA,CAAAgC,CAAA,EACA,KAAAsN,WAAA,CAAApO,EAAAgH,IAAA,CAAAA,EAAAuH,EAAAvO,EAAAqO,SAAA,CAAAjC,EAAAuB,EAAArD,EAAA0D,EAAA9N,EACA,CAEA,OAAAA,CACA,CAIA4M,qBAAAlI,CAAA,EACA,IAAA1E,EAAA,IAAAC,IACAkE,EAAAT,OAAAc,MAAA,CAAAd,OAAAc,MAAA,IAAsD,KAAAD,QAAA,CAAAG,aAAA,EAAAA,GACtD,QAAAmD,EAAA1B,EAAA,QAAAnB,YAAA,EACA,IAAA8E,EAAA3F,EAAAiG,aAAA,CAAAjG,EAAAiG,aAAA,CAAAjE,EAAA,QAAAb,aAAA,CAAApG,GAAA,CAAA2I,IAAA,EACA7H,EAAA7B,GAAA,CAAA0J,EAAA,CACAiC,MAAAA,EACAC,MAAA,GACAC,MAAA,EACA,EACA,CACA,OAAAhK,CACA,CAIA+M,eAAA/M,CAAA,CAAAgN,EA5kCA,IA4kCA,EACA,GAAAhN,IAAAA,EAAApB,MAAA,CACA,WAAAqB,IAGA,IAAAqO,EAAAC,CAAA,CADAvB,EAAAwB,WAAA,GACA,CACA,IAAAF,EACA,6CAA6DtB,EAAY,GAEzE,OAAAhN,EAAA2H,MAAA,CAAA2G,IAAA,IAAArO,GACA,CAyBAwO,QAAA,CACA,IAAA9C,EAAA,GACA,QAAA7E,EAAAuC,EAAA,QAAAvE,MAAA,EACA,IAAAoH,EAAA,GACA,QAAAvF,EAAA+H,EAAA,GAAArF,EACA6C,CAAA,CAAAvF,EAAA,CAAAjD,OAAAiL,WAAA,CAAAD,GAEA/C,EAAAxM,IAAA,EAAA2H,EAAAoF,EAAA,CACA,CACA,OACArB,cAAA,KAAA9F,cAAA,CACA0H,OAAA,KAAApH,OAAA,CACAuG,YAAAlI,OAAAiL,WAAA,MAAA3J,YAAA,EACA0H,SAAA,KAAAxH,SAAA,CACAiD,YAAAzE,OAAAiL,WAAA,MAAAxJ,YAAA,EACAwH,mBAAA,KAAAvH,eAAA,CACAyG,aAAAnI,OAAAiL,WAAA,MAAArJ,aAAA,EACAgE,UAAA,KAAA/D,UAAA,CACAoG,MAAAA,EACAG,qBAAA,CACA,CACA,CAIAoC,YAAAU,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAX,CAAA,CAAAY,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAnB,CAAA,CAAA9N,EAAA,IAAAC,GAAA,EACA,GAAA8O,MAAAA,EACA,OAAA/O,EACA,QAAAsG,KAAA5C,OAAAnF,IAAA,CAAAyQ,GAAA,CACA,IAAAE,EAAAF,CAAA,CAAA1I,EAAA,CACAK,EAAA,KAAAzB,SAAA,CAAAoB,EAAA,CACA6I,EAAAJ,EAAA7P,GAAA,CAAAyH,GACA,GAAAwI,MAAAA,EACA,SACA,IAAAC,EAAAD,EAAAlM,IAAA,CACAoM,EAAA,KAAAjK,eAAA,CAAAuB,EAAA,CACA,QAAAkD,KAAAsF,EAAA5Q,IAAA,IACA,SAAAyG,YAAA,CAAAhC,GAAA,CAAA6G,GAAA,CACA,KAAA9B,UAAA,CAAApB,EAAAkD,EAAAgF,GACAO,GAAA,EACA,QACA,CACA,IAAAE,EAAAL,EAAAA,EAAA,KAAAjK,YAAA,CAAA9F,GAAA,CAAA2K,GAAAgF,EAAA,KAAAvJ,aAAA,CAAApG,GAAA,CAAA2K,IAAA,EACA,IAAAyF,EACA,SACA,IAAAC,EAAAJ,EAAAjQ,GAAA,CAAA2K,GACA1B,EAAA,KAAAhD,YAAA,CAAAjG,GAAA,CAAA2K,EAAA,CAAAlD,EAAA,CAQA6I,EAAAV,EAAAX,EAAAe,EAAAI,EADAG,EAAAF,EAAAH,EAAA,KAAArK,cAAA,CAAAoD,EAAAkH,EAAAvB,GAEArQ,EAAAuC,EAAAd,GAAA,CAAA2K,GACA,GAAApM,EAAA,CACAA,EAAAqM,KAAA,EAAA0F,EACAE,EAAAjS,EAAAsM,KAAA,CAAA6E,GACA,IAAA5E,EAAAyB,EAAAhO,EAAAuM,KAAA,CAAA6E,GACA7E,EACAA,EAAA7K,IAAA,CAAAmH,GAGA7I,EAAAuM,KAAA,CAAA6E,EAAA,EAAAvI,EAAA,MAIAtG,EAAA7B,GAAA,CAAA0L,EAAA,CACAC,MAAA0F,EACAzF,MAAA,CAAA6E,EAAA,CACA5E,MAAA,CAAiC,CAAA6E,EAAA,EAAAvI,EAAA,CACjC,EAEA,CACA,CACA,OAAAtG,CACA,CAIAmH,QAAAR,CAAA,CAAAgJ,CAAA,CAAA7I,CAAA,EACA,IAAA8I,EAAA,KAAA9K,MAAA,CAAAzB,KAAA,CAAAyD,EAAA+I,GACAxG,EAAAuG,EAAA1Q,GAAA,CAAAyH,GACA,GAAA0C,MAAAA,EAEAA,CADAA,EAAA,IAAApJ,GAAA,EACA9B,GAAA,CAAAwR,EAAA,GACAC,EAAAzR,GAAA,CAAAwI,EAAA0C,OAEA,CACA,IAAAyG,EAAAzG,EAAAnK,GAAA,CAAAyQ,GACAtG,EAAAlL,GAAA,CAAAwR,EAAA,CAAAG,GAAA,KACA,CACA,CAIA/H,WAAApB,CAAA,CAAAgJ,CAAA,CAAA7I,CAAA,EACA,SAAAhC,MAAA,CAAA9B,GAAA,CAAA8D,GAAA,CACA,KAAAiJ,mBAAA,CAAAJ,EAAAhJ,EAAAG,GACA,MACA,CACA,IAAA8I,EAAA,KAAA9K,MAAA,CAAAzB,KAAA,CAAAyD,EAAA+I,GACAxG,EAAAuG,EAAA1Q,GAAA,CAAAyH,EACA0C,OAAAA,GAAAA,MAAAA,EAAAnK,GAAA,CAAAyQ,GACA,KAAAI,mBAAA,CAAAJ,EAAAhJ,EAAAG,GAEAuC,GAAAA,EAAAnK,GAAA,CAAAyQ,GACAtG,EAAApG,IAAA,IACA2M,EAAApN,MAAA,CAAAmE,GAGA0C,EAAA7G,MAAA,CAAAmN,GAIAtG,EAAAlL,GAAA,CAAAwR,EAAAtG,EAAAnK,GAAA,CAAAyQ,GAAA,GAEA,SAAA7K,MAAA,CAAA5F,GAAA,CAAA4H,GAAA7D,IAAA,EACA,KAAA6B,MAAA,CAAAtC,MAAA,CAAAsE,EAEA,CAIAiJ,oBAAA3J,CAAA,CAAAO,CAAA,CAAAG,CAAA,EACA,QAAAkJ,KAAAtM,OAAAnF,IAAA,MAAA2G,SAAA,EACA,QAAAA,SAAA,CAAA8K,EAAA,GAAArJ,EAAA,CACA,KAAApC,QAAA,CAAA0L,MAAA,wCAA6E,KAAAjL,YAAA,CAAA9F,GAAA,CAAAkH,GAAA,mCAAwC,EAAoCU,EAAK,8BAA8BkJ,EAAU,wFACtM,MACA,CAEA,CAIA3J,cAAAsJ,CAAA,EACA,IAAAvJ,EAAA,KAAAf,OAAA,CAKA,OAJA,KAAAJ,YAAA,CAAA9G,GAAA,CAAAwR,EAAAvJ,GACA,KAAApB,YAAA,CAAA7G,GAAA,CAAAiI,EAAAuJ,GACA,KAAA5K,cAAA,IACA,KAAAM,OAAA,IACAe,CACA,CAIAR,UAAAxB,CAAA,EACA,QAAA5D,EAAA,EAAwBA,EAAA4D,EAAAxF,MAAA,CAAmB4B,IAC3C,KAAA0E,SAAA,CAAAd,CAAA,CAAA5D,EAAA,EAAAA,CAEA,CAIAuG,eAAA4I,CAAA,CAAAhJ,CAAA,CAAAiE,CAAA,CAAAhM,CAAA,EACA,IAAAsR,EAAA,KAAA/K,YAAA,CAAAjG,GAAA,CAAAyQ,EACA,OAAAO,GACA,KAAA/K,YAAA,CAAAhH,GAAA,CAAAwR,EAAAO,EAAA,IACAA,CAAA,CAAAvJ,EAAA,CAAA/H,EACA,IAAA+N,EAAA,KAAAvH,eAAA,CAAAuB,EAAA,GAEA,MAAAvB,eAAA,CAAAuB,EAAA,CAAAwJ,CADA,EAAAvF,EAAAhM,CAAA,EACAgM,CAAAA,EAAA,EACA,CAIA9C,kBAAA6H,CAAA,CAAAhJ,CAAA,CAAAiE,CAAA,CAAAhM,CAAA,EACA,GAAAgM,IAAAA,EAAA,CACA,KAAAxF,eAAA,CAAAuB,EAAA,GACA,MACA,CACA,IAAAwJ,EAAA,KAAA/K,eAAA,CAAAuB,EAAA,CAAAiE,EAAAhM,CACA,MAAAwG,eAAA,CAAAuB,EAAA,CAAAwJ,EAAAvF,CAAAA,EAAA,EACA,CAIArE,iBAAAoJ,CAAA,CAAAS,CAAA,EACA,IAAgBC,YAAAA,CAAA,CAAAtK,aAAAA,CAAA,EAA4B,KAAAxB,QAAA,CAC5C,GAAA8L,MAAAA,GAAAA,IAAAA,EAAAzR,MAAA,CACA,OAEA,IAAA0R,EAAA,KAAAhL,aAAA,CAAApG,GAAA,CAAAyQ,GAGA,QAAAK,KAFA,MAAAM,GACA,KAAAhL,aAAA,CAAAnH,GAAA,CAAAwR,EAAAW,EAAA,IACAD,GAAA,CACA,IAAA7J,EAAAT,EAAAqK,EAAAJ,EACAjR,MAAAA,IAAAyH,GACA8J,CAAAA,CAAA,CAAAN,EAAA,CAAAxJ,CAAA,CACA,CACA,CACA,CAKAtC,EAAAiG,QAAA,CAAAzK,OAAA,KACA,IAAA+L,EAAA,CAAAhI,EAAA8M,IAAA7M,OAAA8M,SAAA,CAAAhF,cAAA,CAAAiF,IAAA,CAAAhN,EAAA8M,GAAA9M,CAAA,CAAA8M,EAAA,CAAAxR,KAAAA,EACAwP,EAAA,CAtzCA,GAuzCA,CAAAmC,EAAAC,KACA,QAAA9G,KAAA8G,EAAApS,IAAA,IACA,IAAAqS,EAAAF,EAAAxR,GAAA,CAAA2K,GACA,GAAA+G,MAAAA,EACAF,EAAAvS,GAAA,CAAA0L,EAAA8G,EAAAzR,GAAA,CAAA2K,QAEA,CACA,IAAwBC,MAAAA,CAAA,CAAAC,MAAAA,CAAA,CAAAC,MAAAA,CAAA,EAAsB2G,EAAAzR,GAAA,CAAA2K,EAC9C+G,CAAAA,EAAA9G,KAAA,CAAA8G,EAAA9G,KAAA,CAAAA,EACA8G,EAAA5G,KAAA,CAAAtG,OAAAc,MAAA,CAAAoM,EAAA5G,KAAA,CAAAA,GACA6G,EAAAD,EAAA7G,KAAA,CAAAA,EACA,CACA,CACA,OAAA2G,CACA,EAp0CA,IAq0CA,CAAAA,EAAAC,KACA,IAAAG,EAAA,IAAA7Q,IACA,QAAA4J,KAAA8G,EAAApS,IAAA,IACA,IAAAqS,EAAAF,EAAAxR,GAAA,CAAA2K,GACA,GAAA+G,MAAAA,EACA,SACA,IAAoB9G,MAAAA,CAAA,CAAAC,MAAAA,CAAA,CAAAC,MAAAA,CAAA,EAAsB2G,EAAAzR,GAAA,CAAA2K,GAC1CgH,EAAAD,EAAA7G,KAAA,CAAAA,GACA+G,EAAA3S,GAAA,CAAA0L,EAAA,CACAC,MAAA8G,EAAA9G,KAAA,CAAAA,EACAC,MAAA6G,EAAA7G,KAAA,CACAC,MAAAtG,OAAAc,MAAA,CAAAoM,EAAA5G,KAAA,CAAAA,EACA,EACA,CACA,OAAA8G,CACA,EAn1CA,QAo1CA,CAAAJ,EAAAC,KACA,QAAA9G,KAAA8G,EAAApS,IAAA,GACAmS,EAAAlO,MAAA,CAAAqH,GACA,OAAA6G,CACA,CACA,EAEAjB,EAAA,CAAAF,EAAAwB,EAAAC,EAAA7I,EAAAkH,EAAAvB,KACA,IAAYxL,EAAAA,CAAA,CAAAqO,EAAAA,CAAA,CAAAM,EAAAA,CAAA,EAAUnD,EAEtB,OAAAoD,KADAC,GAAA,IAAAH,EAAAD,EAAA,IAAAA,CAAAA,EAAA,KACAE,CAAAA,EAAA1B,EAAAjN,CAAAA,EAAA,GAAAiN,CAAAA,EAAAjN,EAAA,GAAAqO,EAAAA,EAAAxI,EAAAkH,CAAA,GACA,EACAhC,EAAA,IAAAvG,EAAAtG,EAAAuJ,KACA,IAAAgE,EAAA,mBAAA5J,EAAA4J,KAAA,CACA5J,EAAA4J,KAAA,CAAAjH,EAAAtG,EAAAuJ,GACA5F,EAAA4J,KAAA,KACArN,EAAA,mBAAAyD,EAAAzD,MAAA,CACAyD,EAAAzD,MAAA,CAAAoG,EAAAtG,EAAAuJ,GACA5F,CAAA,IAAAA,EAAAzD,MAAA,CACAyN,EAAA,mBAAAhK,EAAAiN,SAAA,CACAjN,EAAAiN,SAAA,CAAAtK,EAAAtG,EAAAuJ,GACA,EACA,OAAajD,KAAAA,EAAAiH,MAAAA,EAAArN,OAAAA,EAAAyN,UAAAA,CAAA,CACb,EACA1J,EAAA,CACAyB,QAAA,KACAH,aAAA,CAAAD,EAAAkK,IAAAlK,CAAA,CAAAkK,EAAA,CACAhK,SAAA,GAAAqL,EAAAC,KAAA,CAAAC,GACAtL,YAAA,GAAAa,EAAA0H,WAAA,GACApK,OAAArF,KAAAA,EACA2F,cAAA3F,KAAAA,EACAsR,YAAA,GACAJ,OAAA,CAAAuB,EAAAC,KACA,kBAAAC,CAAAA,MAAAA,QAAA,OAAAA,OAAA,CAAAF,EAAA,GACAE,OAAA,CAAAF,EAAA,CAAAC,EACA,EACApN,WAAA,EACA,EACAM,EAAA,CACAqI,YA73CA,KA83CAtM,OAAA,GACAqN,MAAA,GACAH,SAAA,EACAF,MAAA,GACAC,QAAA,CAAeI,MAAA,IAAArN,OAAA,MACfmN,KAvCA,CAA4BvL,EAAA,IAAAqO,EAAA,GAAAM,EAAA,GAwC5B,EACApM,EAAA,CACAmI,YAr4CA,MAs4CAtM,OAAA,CAAAoG,EAAAtG,EAAAuJ,IAAAvJ,IAAAuJ,EAAAnL,MAAA,EACA,EACAuK,EAAA,CAA+BZ,UAAA,IAAAC,UAAA,IAC/B7C,EAAA,CAAkC0C,cAAA,GAAAC,aAAA,IAClChE,EAAAZ,OAAAc,MAAA,CAAAd,OAAAc,MAAA,IAA+D2E,GAAAxD,GAC/D+J,EAAA,CAAAiC,EAAA7K,KAEA6K,EAAAC,QAAA,CAAA9K,IACA6K,EAAAxS,IAAA,CAAA2H,EACA,EACA+J,EAAA,CAAAc,EAAAE,KACA,QAAA/K,KAAA+K,EAEAF,EAAAC,QAAA,CAAA9K,IACA6K,EAAAxS,IAAA,CAAA2H,EAEA,EACAwD,EAAA,EAAmBR,MAAA4G,CAAA,CAAU,EAAI5G,MAAA6G,CAAA,CAAU,GAAAA,EAAAD,EAC3Cb,EAAA,QAAA5P,IACAgM,EAAA,IACA,IAAA1M,EAAA,IAAAU,IACA,QAAAZ,KAAAqE,OAAAnF,IAAA,CAAAkF,GACAlE,EAAApB,GAAA,CAAAmO,SAAAjN,EAAA,IAAAoE,CAAA,CAAApE,EAAA,EAEA,OAAAE,CACA,EACAgN,EAAA,GAAA5P,EAAA,iCACA,IAAA4C,EAAA,IAAAU,IACA2K,EAAA,EACA,QAAAvL,KAAAqE,OAAAnF,IAAA,CAAAkF,GACAlE,EAAApB,GAAA,CAAAmO,SAAAjN,EAAA,IAAAoE,CAAA,CAAApE,EAAA,EACA,EAAAuL,EAAA,QACA,OAAA4B,EAAA,IAGA,OAAAjN,CACA,GACAiN,EAAA,OAAAxP,QAAA,GAAA4K,WAAA3K,EAAA6U,IAGAP,EAAA","sources":["webpack://_N_E/./node_modules/next/dist/api/navigation.js","webpack://_N_E/./node_modules/minisearch/dist/es/index.js"],"sourcesContent":["export * from \"../client/components/navigation\";\n\n//# sourceMappingURL=navigation.js.map","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n/** @ignore */\nconst ENTRIES = 'ENTRIES';\n/** @ignore */\nconst KEYS = 'KEYS';\n/** @ignore */\nconst VALUES = 'VALUES';\n/** @ignore */\nconst LEAF = '';\n/**\n * @private\n */\nclass TreeIterator {\n    constructor(set, type) {\n        const node = set._tree;\n        const keys = Array.from(node.keys());\n        this.set = set;\n        this._type = type;\n        this._path = keys.length > 0 ? [{ node, keys }] : [];\n    }\n    next() {\n        const value = this.dive();\n        this.backtrack();\n        return value;\n    }\n    dive() {\n        if (this._path.length === 0) {\n            return { done: true, value: undefined };\n        }\n        const { node, keys } = last$1(this._path);\n        if (last$1(keys) === LEAF) {\n            return { done: false, value: this.result() };\n        }\n        const child = node.get(last$1(keys));\n        this._path.push({ node: child, keys: Array.from(child.keys()) });\n        return this.dive();\n    }\n    backtrack() {\n        if (this._path.length === 0) {\n            return;\n        }\n        const keys = last$1(this._path).keys;\n        keys.pop();\n        if (keys.length > 0) {\n            return;\n        }\n        this._path.pop();\n        this.backtrack();\n    }\n    key() {\n        return this.set._prefix + this._path\n            .map(({ keys }) => last$1(keys))\n            .filter(key => key !== LEAF)\n            .join('');\n    }\n    value() {\n        return last$1(this._path).node.get(LEAF);\n    }\n    result() {\n        switch (this._type) {\n            case VALUES: return this.value();\n            case KEYS: return this.key();\n            default: return [this.key(), this.value()];\n        }\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n}\nconst last$1 = (array) => {\n    return array[array.length - 1];\n};\n\n/* eslint-disable no-labels */\n/**\n * @ignore\n */\nconst fuzzySearch = (node, query, maxDistance) => {\n    const results = new Map();\n    if (query === undefined)\n        return results;\n    // Number of columns in the Levenshtein matrix.\n    const n = query.length + 1;\n    // Matching terms can never be longer than N + maxDistance.\n    const m = n + maxDistance;\n    // Fill first matrix row and column with numbers: 0 1 2 3 ...\n    const matrix = new Uint8Array(m * n).fill(maxDistance + 1);\n    for (let j = 0; j < n; ++j)\n        matrix[j] = j;\n    for (let i = 1; i < m; ++i)\n        matrix[i * n] = i;\n    recurse(node, query, maxDistance, results, matrix, 1, n, '');\n    return results;\n};\n// Modified version of http://stevehanov.ca/blog/?id=114\n// This builds a Levenshtein matrix for a given query and continuously updates\n// it for nodes in the radix tree that fall within the given maximum edit\n// distance. Keeping the same matrix around is beneficial especially for larger\n// edit distances.\n//\n//           k   a   t   e   <-- query\n//       0   1   2   3   4\n//   c   1   1   2   3   4\n//   a   2   2   1   2   3\n//   t   3   3   2   1  [2]  <-- edit distance\n//   ^\n//   ^ term in radix tree, rows are added and removed as needed\nconst recurse = (node, query, maxDistance, results, matrix, m, n, prefix) => {\n    const offset = m * n;\n    key: for (const key of node.keys()) {\n        if (key === LEAF) {\n            // We've reached a leaf node. Check if the edit distance acceptable and\n            // store the result if it is.\n            const distance = matrix[offset - 1];\n            if (distance <= maxDistance) {\n                results.set(prefix, [node.get(key), distance]);\n            }\n        }\n        else {\n            // Iterate over all characters in the key. Update the Levenshtein matrix\n            // and check if the minimum distance in the last row is still within the\n            // maximum edit distance. If it is, we can recurse over all child nodes.\n            let i = m;\n            for (let pos = 0; pos < key.length; ++pos, ++i) {\n                const char = key[pos];\n                const thisRowOffset = n * i;\n                const prevRowOffset = thisRowOffset - n;\n                // Set the first column based on the previous row, and initialize the\n                // minimum distance in the current row.\n                let minDistance = matrix[thisRowOffset];\n                const jmin = Math.max(0, i - maxDistance - 1);\n                const jmax = Math.min(n - 1, i + maxDistance);\n                // Iterate over remaining columns (characters in the query).\n                for (let j = jmin; j < jmax; ++j) {\n                    const different = char !== query[j];\n                    // It might make sense to only read the matrix positions used for\n                    // deletion/insertion if the characters are different. But we want to\n                    // avoid conditional reads for performance reasons.\n                    const rpl = matrix[prevRowOffset + j] + +different;\n                    const del = matrix[prevRowOffset + j + 1] + 1;\n                    const ins = matrix[thisRowOffset + j] + 1;\n                    const dist = matrix[thisRowOffset + j + 1] = Math.min(rpl, del, ins);\n                    if (dist < minDistance)\n                        minDistance = dist;\n                }\n                // Because distance will never decrease, we can stop. There will be no\n                // matching child nodes.\n                if (minDistance > maxDistance) {\n                    continue key;\n                }\n            }\n            recurse(node.get(key), query, maxDistance, results, matrix, i, n, prefix + key);\n        }\n    }\n};\n\n/* eslint-disable no-labels */\n/**\n * A class implementing the same interface as a standard JavaScript\n * [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)\n * with string keys, but adding support for efficiently searching entries with\n * prefix or fuzzy search. This class is used internally by {@link MiniSearch}\n * as the inverted index data structure. The implementation is a radix tree\n * (compressed prefix tree).\n *\n * Since this class can be of general utility beyond _MiniSearch_, it is\n * exported by the `minisearch` package and can be imported (or required) as\n * `minisearch/SearchableMap`.\n *\n * @typeParam T  The type of the values stored in the map.\n */\nclass SearchableMap {\n    /**\n     * The constructor is normally called without arguments, creating an empty\n     * map. In order to create a {@link SearchableMap} from an iterable or from an\n     * object, check {@link SearchableMap.from} and {@link\n     * SearchableMap.fromObject}.\n     *\n     * The constructor arguments are for internal use, when creating derived\n     * mutable views of a map at a prefix.\n     */\n    constructor(tree = new Map(), prefix = '') {\n        this._size = undefined;\n        this._tree = tree;\n        this._prefix = prefix;\n    }\n    /**\n     * Creates and returns a mutable view of this {@link SearchableMap},\n     * containing only entries that share the given prefix.\n     *\n     * ### Usage:\n     *\n     * ```javascript\n     * let map = new SearchableMap()\n     * map.set(\"unicorn\", 1)\n     * map.set(\"universe\", 2)\n     * map.set(\"university\", 3)\n     * map.set(\"unique\", 4)\n     * map.set(\"hello\", 5)\n     *\n     * let uni = map.atPrefix(\"uni\")\n     * uni.get(\"unique\") // => 4\n     * uni.get(\"unicorn\") // => 1\n     * uni.get(\"hello\") // => undefined\n     *\n     * let univer = map.atPrefix(\"univer\")\n     * univer.get(\"unique\") // => undefined\n     * univer.get(\"universe\") // => 2\n     * univer.get(\"university\") // => 3\n     * ```\n     *\n     * @param prefix  The prefix\n     * @return A {@link SearchableMap} representing a mutable view of the original\n     * Map at the given prefix\n     */\n    atPrefix(prefix) {\n        if (!prefix.startsWith(this._prefix)) {\n            throw new Error('Mismatched prefix');\n        }\n        const [node, path] = trackDown(this._tree, prefix.slice(this._prefix.length));\n        if (node === undefined) {\n            const [parentNode, key] = last(path);\n            for (const k of parentNode.keys()) {\n                if (k !== LEAF && k.startsWith(key)) {\n                    const node = new Map();\n                    node.set(k.slice(key.length), parentNode.get(k));\n                    return new SearchableMap(node, prefix);\n                }\n            }\n        }\n        return new SearchableMap(node, prefix);\n    }\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\n     */\n    clear() {\n        this._size = undefined;\n        this._tree.clear();\n    }\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\n     * @param key  Key to delete\n     */\n    delete(key) {\n        this._size = undefined;\n        return remove(this._tree, key);\n    }\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\n     * @return An iterator iterating through `[key, value]` entries.\n     */\n    entries() {\n        return new TreeIterator(this, ENTRIES);\n    }\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\n     * @param fn  Iteration function\n     */\n    forEach(fn) {\n        for (const [key, value] of this) {\n            fn(key, value, this);\n        }\n    }\n    /**\n     * Returns a Map of all the entries that have a key within the given edit\n     * distance from the search key. The keys of the returned Map are the matching\n     * keys, while the values are two-element arrays where the first element is\n     * the value associated to the key, and the second is the edit distance of the\n     * key to the search key.\n     *\n     * ### Usage:\n     *\n     * ```javascript\n     * let map = new SearchableMap()\n     * map.set('hello', 'world')\n     * map.set('hell', 'yeah')\n     * map.set('ciao', 'mondo')\n     *\n     * // Get all entries that match the key 'hallo' with a maximum edit distance of 2\n     * map.fuzzyGet('hallo', 2)\n     * // => Map(2) { 'hello' => ['world', 1], 'hell' => ['yeah', 2] }\n     *\n     * // In the example, the \"hello\" key has value \"world\" and edit distance of 1\n     * // (change \"e\" to \"a\"), the key \"hell\" has value \"yeah\" and edit distance of 2\n     * // (change \"e\" to \"a\", delete \"o\")\n     * ```\n     *\n     * @param key  The search key\n     * @param maxEditDistance  The maximum edit distance (Levenshtein)\n     * @return A Map of the matching keys to their value and edit distance\n     */\n    fuzzyGet(key, maxEditDistance) {\n        return fuzzySearch(this._tree, key, maxEditDistance);\n    }\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get\n     * @param key  Key to get\n     * @return Value associated to the key, or `undefined` if the key is not\n     * found.\n     */\n    get(key) {\n        const node = lookup(this._tree, key);\n        return node !== undefined ? node.get(LEAF) : undefined;\n    }\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has\n     * @param key  Key\n     * @return True if the key is in the map, false otherwise\n     */\n    has(key) {\n        const node = lookup(this._tree, key);\n        return node !== undefined && node.has(LEAF);\n    }\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\n     * @return An `Iterable` iterating through keys\n     */\n    keys() {\n        return new TreeIterator(this, KEYS);\n    }\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set\n     * @param key  Key to set\n     * @param value  Value to associate to the key\n     * @return The {@link SearchableMap} itself, to allow chaining\n     */\n    set(key, value) {\n        if (typeof key !== 'string') {\n            throw new Error('key must be a string');\n        }\n        this._size = undefined;\n        const node = createPath(this._tree, key);\n        node.set(LEAF, value);\n        return this;\n    }\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size\n     */\n    get size() {\n        if (this._size) {\n            return this._size;\n        }\n        /** @ignore */\n        this._size = 0;\n        const iter = this.entries();\n        while (!iter.next().done)\n            this._size += 1;\n        return this._size;\n    }\n    /**\n     * Updates the value at the given key using the provided function. The function\n     * is called with the current value at the key, and its return value is used as\n     * the new value to be set.\n     *\n     * ### Example:\n     *\n     * ```javascript\n     * // Increment the current value by one\n     * searchableMap.update('somekey', (currentValue) => currentValue == null ? 0 : currentValue + 1)\n     * ```\n     *\n     * If the value at the given key is or will be an object, it might not require\n     * re-assignment. In that case it is better to use `fetch()`, because it is\n     * faster.\n     *\n     * @param key  The key to update\n     * @param fn  The function used to compute the new value from the current one\n     * @return The {@link SearchableMap} itself, to allow chaining\n     */\n    update(key, fn) {\n        if (typeof key !== 'string') {\n            throw new Error('key must be a string');\n        }\n        this._size = undefined;\n        const node = createPath(this._tree, key);\n        node.set(LEAF, fn(node.get(LEAF)));\n        return this;\n    }\n    /**\n     * Fetches the value of the given key. If the value does not exist, calls the\n     * given function to create a new value, which is inserted at the given key\n     * and subsequently returned.\n     *\n     * ### Example:\n     *\n     * ```javascript\n     * const map = searchableMap.fetch('somekey', () => new Map())\n     * map.set('foo', 'bar')\n     * ```\n     *\n     * @param key  The key to update\n     * @param defaultValue  A function that creates a new value if the key does not exist\n     * @return The existing or new value at the given key\n     */\n    fetch(key, initial) {\n        if (typeof key !== 'string') {\n            throw new Error('key must be a string');\n        }\n        this._size = undefined;\n        const node = createPath(this._tree, key);\n        let value = node.get(LEAF);\n        if (value === undefined) {\n            node.set(LEAF, value = initial());\n        }\n        return value;\n    }\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values\n     * @return An `Iterable` iterating through values.\n     */\n    values() {\n        return new TreeIterator(this, VALUES);\n    }\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator\n     */\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    /**\n     * Creates a {@link SearchableMap} from an `Iterable` of entries\n     *\n     * @param entries  Entries to be inserted in the {@link SearchableMap}\n     * @return A new {@link SearchableMap} with the given entries\n     */\n    static from(entries) {\n        const tree = new SearchableMap();\n        for (const [key, value] of entries) {\n            tree.set(key, value);\n        }\n        return tree;\n    }\n    /**\n     * Creates a {@link SearchableMap} from the iterable properties of a JavaScript object\n     *\n     * @param object  Object of entries for the {@link SearchableMap}\n     * @return A new {@link SearchableMap} with the given entries\n     */\n    static fromObject(object) {\n        return SearchableMap.from(Object.entries(object));\n    }\n}\nconst trackDown = (tree, key, path = []) => {\n    if (key.length === 0 || tree == null) {\n        return [tree, path];\n    }\n    for (const k of tree.keys()) {\n        if (k !== LEAF && key.startsWith(k)) {\n            path.push([tree, k]); // performance: update in place\n            return trackDown(tree.get(k), key.slice(k.length), path);\n        }\n    }\n    path.push([tree, key]); // performance: update in place\n    return trackDown(undefined, '', path);\n};\nconst lookup = (tree, key) => {\n    if (key.length === 0 || tree == null) {\n        return tree;\n    }\n    for (const k of tree.keys()) {\n        if (k !== LEAF && key.startsWith(k)) {\n            return lookup(tree.get(k), key.slice(k.length));\n        }\n    }\n};\n// Create a path in the radix tree for the given key, and returns the deepest\n// node. This function is in the hot path for indexing. It avoids unnecessary\n// string operations and recursion for performance.\nconst createPath = (node, key) => {\n    const keyLength = key.length;\n    outer: for (let pos = 0; node && pos < keyLength;) {\n        for (const k of node.keys()) {\n            // Check whether this key is a candidate: the first characters must match.\n            if (k !== LEAF && key[pos] === k[0]) {\n                const len = Math.min(keyLength - pos, k.length);\n                // Advance offset to the point where key and k no longer match.\n                let offset = 1;\n                while (offset < len && key[pos + offset] === k[offset])\n                    ++offset;\n                const child = node.get(k);\n                if (offset === k.length) {\n                    // The existing key is shorter than the key we need to create.\n                    node = child;\n                }\n                else {\n                    // Partial match: we need to insert an intermediate node to contain\n                    // both the existing subtree and the new node.\n                    const intermediate = new Map();\n                    intermediate.set(k.slice(offset), child);\n                    node.set(key.slice(pos, pos + offset), intermediate);\n                    node.delete(k);\n                    node = intermediate;\n                }\n                pos += offset;\n                continue outer;\n            }\n        }\n        // Create a final child node to contain the final suffix of the key.\n        const child = new Map();\n        node.set(key.slice(pos), child);\n        return child;\n    }\n    return node;\n};\nconst remove = (tree, key) => {\n    const [node, path] = trackDown(tree, key);\n    if (node === undefined) {\n        return;\n    }\n    node.delete(LEAF);\n    if (node.size === 0) {\n        cleanup(path);\n    }\n    else if (node.size === 1) {\n        const [key, value] = node.entries().next().value;\n        merge(path, key, value);\n    }\n};\nconst cleanup = (path) => {\n    if (path.length === 0) {\n        return;\n    }\n    const [node, key] = last(path);\n    node.delete(key);\n    if (node.size === 0) {\n        cleanup(path.slice(0, -1));\n    }\n    else if (node.size === 1) {\n        const [key, value] = node.entries().next().value;\n        if (key !== LEAF) {\n            merge(path.slice(0, -1), key, value);\n        }\n    }\n};\nconst merge = (path, key, value) => {\n    if (path.length === 0) {\n        return;\n    }\n    const [node, nodeKey] = last(path);\n    node.set(nodeKey + key, value);\n    node.delete(nodeKey);\n};\nconst last = (array) => {\n    return array[array.length - 1];\n};\n\nconst OR = 'or';\nconst AND = 'and';\nconst AND_NOT = 'and_not';\n/**\n * {@link MiniSearch} is the main entrypoint class, implementing a full-text\n * search engine in memory.\n *\n * @typeParam T  The type of the documents being indexed.\n *\n * ### Basic example:\n *\n * ```javascript\n * const documents = [\n *   {\n *     id: 1,\n *     title: 'Moby Dick',\n *     text: 'Call me Ishmael. Some years ago...',\n *     category: 'fiction'\n *   },\n *   {\n *     id: 2,\n *     title: 'Zen and the Art of Motorcycle Maintenance',\n *     text: 'I can see by my watch...',\n *     category: 'fiction'\n *   },\n *   {\n *     id: 3,\n *     title: 'Neuromancer',\n *     text: 'The sky above the port was...',\n *     category: 'fiction'\n *   },\n *   {\n *     id: 4,\n *     title: 'Zen and the Art of Archery',\n *     text: 'At first sight it must seem...',\n *     category: 'non-fiction'\n *   },\n *   // ...and more\n * ]\n *\n * // Create a search engine that indexes the 'title' and 'text' fields for\n * // full-text search. Search results will include 'title' and 'category' (plus the\n * // id field, that is always stored and returned)\n * const miniSearch = new MiniSearch({\n *   fields: ['title', 'text'],\n *   storeFields: ['title', 'category']\n * })\n *\n * // Add documents to the index\n * miniSearch.addAll(documents)\n *\n * // Search for documents:\n * let results = miniSearch.search('zen art motorcycle')\n * // => [\n * //   { id: 2, title: 'Zen and the Art of Motorcycle Maintenance', category: 'fiction', score: 2.77258 },\n * //   { id: 4, title: 'Zen and the Art of Archery', category: 'non-fiction', score: 1.38629 }\n * // ]\n * ```\n */\nclass MiniSearch {\n    /**\n     * @param options  Configuration options\n     *\n     * ### Examples:\n     *\n     * ```javascript\n     * // Create a search engine that indexes the 'title' and 'text' fields of your\n     * // documents:\n     * const miniSearch = new MiniSearch({ fields: ['title', 'text'] })\n     * ```\n     *\n     * ### ID Field:\n     *\n     * ```javascript\n     * // Your documents are assumed to include a unique 'id' field, but if you want\n     * // to use a different field for document identification, you can set the\n     * // 'idField' option:\n     * const miniSearch = new MiniSearch({ idField: 'key', fields: ['title', 'text'] })\n     * ```\n     *\n     * ### Options and defaults:\n     *\n     * ```javascript\n     * // The full set of options (here with their default value) is:\n     * const miniSearch = new MiniSearch({\n     *   // idField: field that uniquely identifies a document\n     *   idField: 'id',\n     *\n     *   // extractField: function used to get the value of a field in a document.\n     *   // By default, it assumes the document is a flat object with field names as\n     *   // property keys and field values as string property values, but custom logic\n     *   // can be implemented by setting this option to a custom extractor function.\n     *   extractField: (document, fieldName) => document[fieldName],\n     *\n     *   // tokenize: function used to split fields into individual terms. By\n     *   // default, it is also used to tokenize search queries, unless a specific\n     *   // `tokenize` search option is supplied. When tokenizing an indexed field,\n     *   // the field name is passed as the second argument.\n     *   tokenize: (string, _fieldName) => string.split(SPACE_OR_PUNCTUATION),\n     *\n     *   // processTerm: function used to process each tokenized term before\n     *   // indexing. It can be used for stemming and normalization. Return a falsy\n     *   // value in order to discard a term. By default, it is also used to process\n     *   // search queries, unless a specific `processTerm` option is supplied as a\n     *   // search option. When processing a term from a indexed field, the field\n     *   // name is passed as the second argument.\n     *   processTerm: (term, _fieldName) => term.toLowerCase(),\n     *\n     *   // searchOptions: default search options, see the `search` method for\n     *   // details\n     *   searchOptions: undefined,\n     *\n     *   // fields: document fields to be indexed. Mandatory, but not set by default\n     *   fields: undefined\n     *\n     *   // storeFields: document fields to be stored and returned as part of the\n     *   // search results.\n     *   storeFields: []\n     * })\n     * ```\n     */\n    constructor(options) {\n        if ((options === null || options === void 0 ? void 0 : options.fields) == null) {\n            throw new Error('MiniSearch: option \"fields\" must be provided');\n        }\n        const autoVacuum = (options.autoVacuum == null || options.autoVacuum === true) ? defaultAutoVacuumOptions : options.autoVacuum;\n        this._options = Object.assign(Object.assign(Object.assign({}, defaultOptions), options), { autoVacuum, searchOptions: Object.assign(Object.assign({}, defaultSearchOptions), (options.searchOptions || {})), autoSuggestOptions: Object.assign(Object.assign({}, defaultAutoSuggestOptions), (options.autoSuggestOptions || {})) });\n        this._index = new SearchableMap();\n        this._documentCount = 0;\n        this._documentIds = new Map();\n        this._idToShortId = new Map();\n        // Fields are defined during initialization, don't change, are few in\n        // number, rarely need iterating over, and have string keys. Therefore in\n        // this case an object is a better candidate than a Map to store the mapping\n        // from field key to ID.\n        this._fieldIds = {};\n        this._fieldLength = new Map();\n        this._avgFieldLength = [];\n        this._nextId = 0;\n        this._storedFields = new Map();\n        this._dirtCount = 0;\n        this._currentVacuum = null;\n        this._enqueuedVacuum = null;\n        this._enqueuedVacuumConditions = defaultVacuumConditions;\n        this.addFields(this._options.fields);\n    }\n    /**\n     * Adds a document to the index\n     *\n     * @param document  The document to be indexed\n     */\n    add(document) {\n        const { extractField, tokenize, processTerm, fields, idField } = this._options;\n        const id = extractField(document, idField);\n        if (id == null) {\n            throw new Error(`MiniSearch: document does not have ID field \"${idField}\"`);\n        }\n        if (this._idToShortId.has(id)) {\n            throw new Error(`MiniSearch: duplicate ID ${id}`);\n        }\n        const shortDocumentId = this.addDocumentId(id);\n        this.saveStoredFields(shortDocumentId, document);\n        for (const field of fields) {\n            const fieldValue = extractField(document, field);\n            if (fieldValue == null)\n                continue;\n            const tokens = tokenize(fieldValue.toString(), field);\n            const fieldId = this._fieldIds[field];\n            const uniqueTerms = new Set(tokens).size;\n            this.addFieldLength(shortDocumentId, fieldId, this._documentCount - 1, uniqueTerms);\n            for (const term of tokens) {\n                const processedTerm = processTerm(term, field);\n                if (Array.isArray(processedTerm)) {\n                    for (const t of processedTerm) {\n                        this.addTerm(fieldId, shortDocumentId, t);\n                    }\n                }\n                else if (processedTerm) {\n                    this.addTerm(fieldId, shortDocumentId, processedTerm);\n                }\n            }\n        }\n    }\n    /**\n     * Adds all the given documents to the index\n     *\n     * @param documents  An array of documents to be indexed\n     */\n    addAll(documents) {\n        for (const document of documents)\n            this.add(document);\n    }\n    /**\n     * Adds all the given documents to the index asynchronously.\n     *\n     * Returns a promise that resolves (to `undefined`) when the indexing is done.\n     * This method is useful when index many documents, to avoid blocking the main\n     * thread. The indexing is performed asynchronously and in chunks.\n     *\n     * @param documents  An array of documents to be indexed\n     * @param options  Configuration options\n     * @return A promise resolving to `undefined` when the indexing is done\n     */\n    addAllAsync(documents, options = {}) {\n        const { chunkSize = 10 } = options;\n        const acc = { chunk: [], promise: Promise.resolve() };\n        const { chunk, promise } = documents.reduce(({ chunk, promise }, document, i) => {\n            chunk.push(document);\n            if ((i + 1) % chunkSize === 0) {\n                return {\n                    chunk: [],\n                    promise: promise\n                        .then(() => new Promise(resolve => setTimeout(resolve, 0)))\n                        .then(() => this.addAll(chunk))\n                };\n            }\n            else {\n                return { chunk, promise };\n            }\n        }, acc);\n        return promise.then(() => this.addAll(chunk));\n    }\n    /**\n     * Removes the given document from the index.\n     *\n     * The document to remove must NOT have changed between indexing and removal,\n     * otherwise the index will be corrupted.\n     *\n     * This method requires passing the full document to be removed (not just the\n     * ID), and immediately removes the document from the inverted index, allowing\n     * memory to be released. A convenient alternative is {@link\n     * MiniSearch#discard}, which needs only the document ID, and has the same\n     * visible effect, but delays cleaning up the index until the next vacuuming.\n     *\n     * @param document  The document to be removed\n     */\n    remove(document) {\n        const { tokenize, processTerm, extractField, fields, idField } = this._options;\n        const id = extractField(document, idField);\n        if (id == null) {\n            throw new Error(`MiniSearch: document does not have ID field \"${idField}\"`);\n        }\n        const shortId = this._idToShortId.get(id);\n        if (shortId == null) {\n            throw new Error(`MiniSearch: cannot remove document with ID ${id}: it is not in the index`);\n        }\n        for (const field of fields) {\n            const fieldValue = extractField(document, field);\n            if (fieldValue == null)\n                continue;\n            const tokens = tokenize(fieldValue.toString(), field);\n            const fieldId = this._fieldIds[field];\n            const uniqueTerms = new Set(tokens).size;\n            this.removeFieldLength(shortId, fieldId, this._documentCount, uniqueTerms);\n            for (const term of tokens) {\n                const processedTerm = processTerm(term, field);\n                if (Array.isArray(processedTerm)) {\n                    for (const t of processedTerm) {\n                        this.removeTerm(fieldId, shortId, t);\n                    }\n                }\n                else if (processedTerm) {\n                    this.removeTerm(fieldId, shortId, processedTerm);\n                }\n            }\n        }\n        this._storedFields.delete(shortId);\n        this._documentIds.delete(shortId);\n        this._idToShortId.delete(id);\n        this._fieldLength.delete(shortId);\n        this._documentCount -= 1;\n    }\n    /**\n     * Removes all the given documents from the index. If called with no arguments,\n     * it removes _all_ documents from the index.\n     *\n     * @param documents  The documents to be removed. If this argument is omitted,\n     * all documents are removed. Note that, for removing all documents, it is\n     * more efficient to call this method with no arguments than to pass all\n     * documents.\n     */\n    removeAll(documents) {\n        if (documents) {\n            for (const document of documents)\n                this.remove(document);\n        }\n        else if (arguments.length > 0) {\n            throw new Error('Expected documents to be present. Omit the argument to remove all documents.');\n        }\n        else {\n            this._index = new SearchableMap();\n            this._documentCount = 0;\n            this._documentIds = new Map();\n            this._idToShortId = new Map();\n            this._fieldLength = new Map();\n            this._avgFieldLength = [];\n            this._storedFields = new Map();\n            this._nextId = 0;\n        }\n    }\n    /**\n     * Discards the document with the given ID, so it won't appear in search results\n     *\n     * It has the same visible effect of {@link MiniSearch.remove} (both cause the\n     * document to stop appearing in searches), but a different effect on the\n     * internal data structures:\n     *\n     *   - {@link MiniSearch#remove} requires passing the full document to be\n     *   removed as argument, and removes it from the inverted index immediately.\n     *\n     *   - {@link MiniSearch#discard} instead only needs the document ID, and\n     *   works by marking the current version of the document as discarded, so it\n     *   is immediately ignored by searches. This is faster and more convenient\n     *   than {@link MiniSearch#remove}, but the index is not immediately\n     *   modified. To take care of that, vacuuming is performed after a certain\n     *   number of documents are discarded, cleaning up the index and allowing\n     *   memory to be released.\n     *\n     * After discarding a document, it is possible to re-add a new version, and\n     * only the new version will appear in searches. In other words, discarding\n     * and re-adding a document works exactly like removing and re-adding it. The\n     * {@link MiniSearch.replace} method can also be used to replace a document\n     * with a new version.\n     *\n     * #### Details about vacuuming\n     *\n     * Repetite calls to this method would leave obsolete document references in\n     * the index, invisible to searches. Two mechanisms take care of cleaning up:\n     * clean up during search, and vacuuming.\n     *\n     *   - Upon search, whenever a discarded ID is found (and ignored for the\n     *   results), references to the discarded document are removed from the\n     *   inverted index entries for the search terms. This ensures that subsequent\n     *   searches for the same terms do not need to skip these obsolete references\n     *   again.\n     *\n     *   - In addition, vacuuming is performed automatically by default (see the\n     *   `autoVacuum` field in {@link Options}) after a certain number of\n     *   documents are discarded. Vacuuming traverses all terms in the index,\n     *   cleaning up all references to discarded documents. Vacuuming can also be\n     *   triggered manually by calling {@link MiniSearch#vacuum}.\n     *\n     * @param id  The ID of the document to be discarded\n     */\n    discard(id) {\n        const shortId = this._idToShortId.get(id);\n        if (shortId == null) {\n            throw new Error(`MiniSearch: cannot discard document with ID ${id}: it is not in the index`);\n        }\n        this._idToShortId.delete(id);\n        this._documentIds.delete(shortId);\n        this._storedFields.delete(shortId);\n        (this._fieldLength.get(shortId) || []).forEach((fieldLength, fieldId) => {\n            this.removeFieldLength(shortId, fieldId, this._documentCount, fieldLength);\n        });\n        this._fieldLength.delete(shortId);\n        this._documentCount -= 1;\n        this._dirtCount += 1;\n        this.maybeAutoVacuum();\n    }\n    maybeAutoVacuum() {\n        if (this._options.autoVacuum === false) {\n            return;\n        }\n        const { minDirtFactor, minDirtCount, batchSize, batchWait } = this._options.autoVacuum;\n        this.conditionalVacuum({ batchSize, batchWait }, { minDirtCount, minDirtFactor });\n    }\n    /**\n     * Discards the documents with the given IDs, so they won't appear in search\n     * results\n     *\n     * It is equivalent to calling {@link MiniSearch#discard} for all the given\n     * IDs, but with the optimization of triggering at most one automatic\n     * vacuuming at the end.\n     *\n     * Note: to remove all documents from the index, it is faster and more\n     * convenient to call {@link MiniSearch.removeAll} with no argument, instead\n     * of passing all IDs to this method.\n     */\n    discardAll(ids) {\n        const autoVacuum = this._options.autoVacuum;\n        try {\n            this._options.autoVacuum = false;\n            for (const id of ids) {\n                this.discard(id);\n            }\n        }\n        finally {\n            this._options.autoVacuum = autoVacuum;\n        }\n        this.maybeAutoVacuum();\n    }\n    /**\n     * It replaces an existing document with the given updated version\n     *\n     * It works by discarding the current version and adding the updated one, so\n     * it is functionally equivalent to calling {@link MiniSearch#discard}\n     * followed by {@link MiniSearch#add}. The ID of the updated document should\n     * be the same as the original one.\n     *\n     * Since it uses {@link MiniSearch#discard} internally, this method relies on\n     * vacuuming to clean up obsolete document references from the index, allowing\n     * memory to be released (see {@link MiniSearch#discard}).\n     *\n     * @param updatedDocument  The updated document to replace the old version\n     * with\n     */\n    replace(updatedDocument) {\n        const { idField, extractField } = this._options;\n        const id = extractField(updatedDocument, idField);\n        this.discard(id);\n        this.add(updatedDocument);\n    }\n    /**\n     * Triggers a manual vacuuming, cleaning up references to discarded documents\n     * from the inverted index\n     *\n     * Vacuuming is only useful for applications that use the {@link\n     * MiniSearch#discard} or {@link MiniSearch#replace} methods.\n     *\n     * By default, vacuuming is performed automatically when needed (controlled by\n     * the `autoVacuum` field in {@link Options}), so there is usually no need to\n     * call this method, unless one wants to make sure to perform vacuuming at a\n     * specific moment.\n     *\n     * Vacuuming traverses all terms in the inverted index in batches, and cleans\n     * up references to discarded documents from the posting list, allowing memory\n     * to be released.\n     *\n     * The method takes an optional object as argument with the following keys:\n     *\n     *   - `batchSize`: the size of each batch (1000 by default)\n     *\n     *   - `batchWait`: the number of milliseconds to wait between batches (10 by\n     *   default)\n     *\n     * On large indexes, vacuuming could have a non-negligible cost: batching\n     * avoids blocking the thread for long, diluting this cost so that it is not\n     * negatively affecting the application. Nonetheless, this method should only\n     * be called when necessary, and relying on automatic vacuuming is usually\n     * better.\n     *\n     * It returns a promise that resolves (to undefined) when the clean up is\n     * completed. If vacuuming is already ongoing at the time this method is\n     * called, a new one is enqueued immediately after the ongoing one, and a\n     * corresponding promise is returned. However, no more than one vacuuming is\n     * enqueued on top of the ongoing one, even if this method is called more\n     * times (enqueuing multiple ones would be useless).\n     *\n     * @param options  Configuration options for the batch size and delay. See\n     * {@link VacuumOptions}.\n     */\n    vacuum(options = {}) {\n        return this.conditionalVacuum(options);\n    }\n    conditionalVacuum(options, conditions) {\n        // If a vacuum is already ongoing, schedule another as soon as it finishes,\n        // unless there's already one enqueued. If one was already enqueued, do not\n        // enqueue another on top, but make sure that the conditions are the\n        // broadest.\n        if (this._currentVacuum) {\n            this._enqueuedVacuumConditions = this._enqueuedVacuumConditions && conditions;\n            if (this._enqueuedVacuum != null) {\n                return this._enqueuedVacuum;\n            }\n            this._enqueuedVacuum = this._currentVacuum.then(() => {\n                const conditions = this._enqueuedVacuumConditions;\n                this._enqueuedVacuumConditions = defaultVacuumConditions;\n                return this.performVacuuming(options, conditions);\n            });\n            return this._enqueuedVacuum;\n        }\n        if (this.vacuumConditionsMet(conditions) === false) {\n            return Promise.resolve();\n        }\n        this._currentVacuum = this.performVacuuming(options);\n        return this._currentVacuum;\n    }\n    performVacuuming(options, conditions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const initialDirtCount = this._dirtCount;\n            if (this.vacuumConditionsMet(conditions)) {\n                const batchSize = options.batchSize || defaultVacuumOptions.batchSize;\n                const batchWait = options.batchWait || defaultVacuumOptions.batchWait;\n                let i = 1;\n                for (const [term, fieldsData] of this._index) {\n                    for (const [fieldId, fieldIndex] of fieldsData) {\n                        for (const [shortId] of fieldIndex) {\n                            if (this._documentIds.has(shortId)) {\n                                continue;\n                            }\n                            if (fieldIndex.size <= 1) {\n                                fieldsData.delete(fieldId);\n                            }\n                            else {\n                                fieldIndex.delete(shortId);\n                            }\n                        }\n                    }\n                    if (this._index.get(term).size === 0) {\n                        this._index.delete(term);\n                    }\n                    if (i % batchSize === 0) {\n                        yield new Promise((resolve) => setTimeout(resolve, batchWait));\n                    }\n                    i += 1;\n                }\n                this._dirtCount -= initialDirtCount;\n            }\n            // Make the next lines always async, so they execute after this function returns\n            yield null;\n            this._currentVacuum = this._enqueuedVacuum;\n            this._enqueuedVacuum = null;\n        });\n    }\n    vacuumConditionsMet(conditions) {\n        if (conditions == null) {\n            return true;\n        }\n        let { minDirtCount, minDirtFactor } = conditions;\n        minDirtCount = minDirtCount || defaultAutoVacuumOptions.minDirtCount;\n        minDirtFactor = minDirtFactor || defaultAutoVacuumOptions.minDirtFactor;\n        return this.dirtCount >= minDirtCount && this.dirtFactor >= minDirtFactor;\n    }\n    /**\n     * Is `true` if a vacuuming operation is ongoing, `false` otherwise\n     */\n    get isVacuuming() {\n        return this._currentVacuum != null;\n    }\n    /**\n     * The number of documents discarded since the most recent vacuuming\n     */\n    get dirtCount() {\n        return this._dirtCount;\n    }\n    /**\n     * A number between 0 and 1 giving an indication about the proportion of\n     * documents that are discarded, and can therefore be cleaned up by vacuuming.\n     * A value close to 0 means that the index is relatively clean, while a higher\n     * value means that the index is relatively dirty, and vacuuming could release\n     * memory.\n     */\n    get dirtFactor() {\n        return this._dirtCount / (1 + this._documentCount + this._dirtCount);\n    }\n    /**\n     * Returns `true` if a document with the given ID is present in the index and\n     * available for search, `false` otherwise\n     *\n     * @param id  The document ID\n     */\n    has(id) {\n        return this._idToShortId.has(id);\n    }\n    /**\n     * Returns the stored fields (as configured in the `storeFields` constructor\n     * option) for the given document ID. Returns `undefined` if the document is\n     * not present in the index.\n     *\n     * @param id  The document ID\n     */\n    getStoredFields(id) {\n        const shortId = this._idToShortId.get(id);\n        if (shortId == null) {\n            return undefined;\n        }\n        return this._storedFields.get(shortId);\n    }\n    /**\n     * Search for documents matching the given search query.\n     *\n     * The result is a list of scored document IDs matching the query, sorted by\n     * descending score, and each including data about which terms were matched and\n     * in which fields.\n     *\n     * ### Basic usage:\n     *\n     * ```javascript\n     * // Search for \"zen art motorcycle\" with default options: terms have to match\n     * // exactly, and individual terms are joined with OR\n     * miniSearch.search('zen art motorcycle')\n     * // => [ { id: 2, score: 2.77258, match: { ... } }, { id: 4, score: 1.38629, match: { ... } } ]\n     * ```\n     *\n     * ### Restrict search to specific fields:\n     *\n     * ```javascript\n     * // Search only in the 'title' field\n     * miniSearch.search('zen', { fields: ['title'] })\n     * ```\n     *\n     * ### Field boosting:\n     *\n     * ```javascript\n     * // Boost a field\n     * miniSearch.search('zen', { boost: { title: 2 } })\n     * ```\n     *\n     * ### Prefix search:\n     *\n     * ```javascript\n     * // Search for \"moto\" with prefix search (it will match documents\n     * // containing terms that start with \"moto\" or \"neuro\")\n     * miniSearch.search('moto neuro', { prefix: true })\n     * ```\n     *\n     * ### Fuzzy search:\n     *\n     * ```javascript\n     * // Search for \"ismael\" with fuzzy search (it will match documents containing\n     * // terms similar to \"ismael\", with a maximum edit distance of 0.2 term.length\n     * // (rounded to nearest integer)\n     * miniSearch.search('ismael', { fuzzy: 0.2 })\n     * ```\n     *\n     * ### Combining strategies:\n     *\n     * ```javascript\n     * // Mix of exact match, prefix search, and fuzzy search\n     * miniSearch.search('ismael mob', {\n     *  prefix: true,\n     *  fuzzy: 0.2\n     * })\n     * ```\n     *\n     * ### Advanced prefix and fuzzy search:\n     *\n     * ```javascript\n     * // Perform fuzzy and prefix search depending on the search term. Here\n     * // performing prefix and fuzzy search only on terms longer than 3 characters\n     * miniSearch.search('ismael mob', {\n     *  prefix: term => term.length > 3\n     *  fuzzy: term => term.length > 3 ? 0.2 : null\n     * })\n     * ```\n     *\n     * ### Combine with AND:\n     *\n     * ```javascript\n     * // Combine search terms with AND (to match only documents that contain both\n     * // \"motorcycle\" and \"art\")\n     * miniSearch.search('motorcycle art', { combineWith: 'AND' })\n     * ```\n     *\n     * ### Combine with AND_NOT:\n     *\n     * There is also an AND_NOT combinator, that finds documents that match the\n     * first term, but do not match any of the other terms. This combinator is\n     * rarely useful with simple queries, and is meant to be used with advanced\n     * query combinations (see later for more details).\n     *\n     * ### Filtering results:\n     *\n     * ```javascript\n     * // Filter only results in the 'fiction' category (assuming that 'category'\n     * // is a stored field)\n     * miniSearch.search('motorcycle art', {\n     *   filter: (result) => result.category === 'fiction'\n     * })\n     * ```\n     *\n     * ### Wildcard query\n     *\n     * Searching for an empty string (assuming the default tokenizer) returns no\n     * results. Sometimes though, one needs to match all documents, like in a\n     * \"wildcard\" search. This is possible by passing the special value\n     * {@link MiniSearch.wildcard} as the query:\n     *\n     * ```javascript\n     * // Return search results for all documents\n     * miniSearch.search(MiniSearch.wildcard)\n     * ```\n     *\n     * Note that search options such as `filter` and `boostDocument` are still\n     * applied, influencing which results are returned, and their order:\n     *\n     * ```javascript\n     * // Return search results for all documents in the 'fiction' category\n     * miniSearch.search(MiniSearch.wildcard, {\n     *   filter: (result) => result.category === 'fiction'\n     * })\n     * ```\n     *\n     * ### Advanced combination of queries:\n     *\n     * It is possible to combine different subqueries with OR, AND, and AND_NOT,\n     * and even with different search options, by passing a query expression\n     * tree object as the first argument, instead of a string.\n     *\n     * ```javascript\n     * // Search for documents that contain \"zen\" and (\"motorcycle\" or \"archery\")\n     * miniSearch.search({\n     *   combineWith: 'AND',\n     *   queries: [\n     *     'zen',\n     *     {\n     *       combineWith: 'OR',\n     *       queries: ['motorcycle', 'archery']\n     *     }\n     *   ]\n     * })\n     *\n     * // Search for documents that contain (\"apple\" or \"pear\") but not \"juice\" and\n     * // not \"tree\"\n     * miniSearch.search({\n     *   combineWith: 'AND_NOT',\n     *   queries: [\n     *     {\n     *       combineWith: 'OR',\n     *       queries: ['apple', 'pear']\n     *     },\n     *     'juice',\n     *     'tree'\n     *   ]\n     * })\n     * ```\n     *\n     * Each node in the expression tree can be either a string, or an object that\n     * supports all {@link SearchOptions} fields, plus a `queries` array field for\n     * subqueries.\n     *\n     * Note that, while this can become complicated to do by hand for complex or\n     * deeply nested queries, it provides a formalized expression tree API for\n     * external libraries that implement a parser for custom query languages.\n     *\n     * @param query  Search query\n     * @param options  Search options. Each option, if not given, defaults to the corresponding value of `searchOptions` given to the constructor, or to the library default.\n     */\n    search(query, searchOptions = {}) {\n        const rawResults = this.executeQuery(query, searchOptions);\n        const results = [];\n        for (const [docId, { score, terms, match }] of rawResults) {\n            // terms are the matched query terms, which will be returned to the user\n            // as queryTerms. The quality is calculated based on them, as opposed to\n            // the matched terms in the document (which can be different due to\n            // prefix and fuzzy match)\n            const quality = terms.length || 1;\n            const result = {\n                id: this._documentIds.get(docId),\n                score: score * quality,\n                terms: Object.keys(match),\n                queryTerms: terms,\n                match\n            };\n            Object.assign(result, this._storedFields.get(docId));\n            if (searchOptions.filter == null || searchOptions.filter(result)) {\n                results.push(result);\n            }\n        }\n        // If it's a wildcard query, and no document boost is applied, skip sorting\n        // the results, as all results have the same score of 1\n        if (query === MiniSearch.wildcard &&\n            searchOptions.boostDocument == null &&\n            this._options.searchOptions.boostDocument == null) {\n            return results;\n        }\n        results.sort(byScore);\n        return results;\n    }\n    /**\n     * Provide suggestions for the given search query\n     *\n     * The result is a list of suggested modified search queries, derived from the\n     * given search query, each with a relevance score, sorted by descending score.\n     *\n     * By default, it uses the same options used for search, except that by\n     * default it performs prefix search on the last term of the query, and\n     * combine terms with `'AND'` (requiring all query terms to match). Custom\n     * options can be passed as a second argument. Defaults can be changed upon\n     * calling the {@link MiniSearch} constructor, by passing a\n     * `autoSuggestOptions` option.\n     *\n     * ### Basic usage:\n     *\n     * ```javascript\n     * // Get suggestions for 'neuro':\n     * miniSearch.autoSuggest('neuro')\n     * // => [ { suggestion: 'neuromancer', terms: [ 'neuromancer' ], score: 0.46240 } ]\n     * ```\n     *\n     * ### Multiple words:\n     *\n     * ```javascript\n     * // Get suggestions for 'zen ar':\n     * miniSearch.autoSuggest('zen ar')\n     * // => [\n     * //  { suggestion: 'zen archery art', terms: [ 'zen', 'archery', 'art' ], score: 1.73332 },\n     * //  { suggestion: 'zen art', terms: [ 'zen', 'art' ], score: 1.21313 }\n     * // ]\n     * ```\n     *\n     * ### Fuzzy suggestions:\n     *\n     * ```javascript\n     * // Correct spelling mistakes using fuzzy search:\n     * miniSearch.autoSuggest('neromancer', { fuzzy: 0.2 })\n     * // => [ { suggestion: 'neuromancer', terms: [ 'neuromancer' ], score: 1.03998 } ]\n     * ```\n     *\n     * ### Filtering:\n     *\n     * ```javascript\n     * // Get suggestions for 'zen ar', but only within the 'fiction' category\n     * // (assuming that 'category' is a stored field):\n     * miniSearch.autoSuggest('zen ar', {\n     *   filter: (result) => result.category === 'fiction'\n     * })\n     * // => [\n     * //  { suggestion: 'zen archery art', terms: [ 'zen', 'archery', 'art' ], score: 1.73332 },\n     * //  { suggestion: 'zen art', terms: [ 'zen', 'art' ], score: 1.21313 }\n     * // ]\n     * ```\n     *\n     * @param queryString  Query string to be expanded into suggestions\n     * @param options  Search options. The supported options and default values\n     * are the same as for the {@link MiniSearch#search} method, except that by\n     * default prefix search is performed on the last term in the query, and terms\n     * are combined with `'AND'`.\n     * @return  A sorted array of suggestions sorted by relevance score.\n     */\n    autoSuggest(queryString, options = {}) {\n        options = Object.assign(Object.assign({}, this._options.autoSuggestOptions), options);\n        const suggestions = new Map();\n        for (const { score, terms } of this.search(queryString, options)) {\n            const phrase = terms.join(' ');\n            const suggestion = suggestions.get(phrase);\n            if (suggestion != null) {\n                suggestion.score += score;\n                suggestion.count += 1;\n            }\n            else {\n                suggestions.set(phrase, { score, terms, count: 1 });\n            }\n        }\n        const results = [];\n        for (const [suggestion, { score, terms, count }] of suggestions) {\n            results.push({ suggestion, terms, score: score / count });\n        }\n        results.sort(byScore);\n        return results;\n    }\n    /**\n     * Total number of documents available to search\n     */\n    get documentCount() {\n        return this._documentCount;\n    }\n    /**\n     * Number of terms in the index\n     */\n    get termCount() {\n        return this._index.size;\n    }\n    /**\n     * Deserializes a JSON index (serialized with `JSON.stringify(miniSearch)`)\n     * and instantiates a MiniSearch instance. It should be given the same options\n     * originally used when serializing the index.\n     *\n     * ### Usage:\n     *\n     * ```javascript\n     * // If the index was serialized with:\n     * let miniSearch = new MiniSearch({ fields: ['title', 'text'] })\n     * miniSearch.addAll(documents)\n     *\n     * const json = JSON.stringify(miniSearch)\n     * // It can later be deserialized like this:\n     * miniSearch = MiniSearch.loadJSON(json, { fields: ['title', 'text'] })\n     * ```\n     *\n     * @param json  JSON-serialized index\n     * @param options  configuration options, same as the constructor\n     * @return An instance of MiniSearch deserialized from the given JSON.\n     */\n    static loadJSON(json, options) {\n        if (options == null) {\n            throw new Error('MiniSearch: loadJSON should be given the same options used when serializing the index');\n        }\n        return this.loadJS(JSON.parse(json), options);\n    }\n    /**\n     * Async equivalent of {@link MiniSearch.loadJSON}\n     *\n     * This function is an alternative to {@link MiniSearch.loadJSON} that returns\n     * a promise, and loads the index in batches, leaving pauses between them to avoid\n     * blocking the main thread. It tends to be slower than the synchronous\n     * version, but does not block the main thread, so it can be a better choice\n     * when deserializing very large indexes.\n     *\n     * @param json  JSON-serialized index\n     * @param options  configuration options, same as the constructor\n     * @return A Promise that will resolve to an instance of MiniSearch deserialized from the given JSON.\n     */\n    static loadJSONAsync(json, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (options == null) {\n                throw new Error('MiniSearch: loadJSON should be given the same options used when serializing the index');\n            }\n            return this.loadJSAsync(JSON.parse(json), options);\n        });\n    }\n    /**\n     * Returns the default value of an option. It will throw an error if no option\n     * with the given name exists.\n     *\n     * @param optionName  Name of the option\n     * @return The default value of the given option\n     *\n     * ### Usage:\n     *\n     * ```javascript\n     * // Get default tokenizer\n     * MiniSearch.getDefault('tokenize')\n     *\n     * // Get default term processor\n     * MiniSearch.getDefault('processTerm')\n     *\n     * // Unknown options will throw an error\n     * MiniSearch.getDefault('notExisting')\n     * // => throws 'MiniSearch: unknown option \"notExisting\"'\n     * ```\n     */\n    static getDefault(optionName) {\n        if (defaultOptions.hasOwnProperty(optionName)) {\n            return getOwnProperty(defaultOptions, optionName);\n        }\n        else {\n            throw new Error(`MiniSearch: unknown option \"${optionName}\"`);\n        }\n    }\n    /**\n     * @ignore\n     */\n    static loadJS(js, options) {\n        const { index, documentIds, fieldLength, storedFields, serializationVersion } = js;\n        const miniSearch = this.instantiateMiniSearch(js, options);\n        miniSearch._documentIds = objectToNumericMap(documentIds);\n        miniSearch._fieldLength = objectToNumericMap(fieldLength);\n        miniSearch._storedFields = objectToNumericMap(storedFields);\n        for (const [shortId, id] of miniSearch._documentIds) {\n            miniSearch._idToShortId.set(id, shortId);\n        }\n        for (const [term, data] of index) {\n            const dataMap = new Map();\n            for (const fieldId of Object.keys(data)) {\n                let indexEntry = data[fieldId];\n                // Version 1 used to nest the index entry inside a field called ds\n                if (serializationVersion === 1) {\n                    indexEntry = indexEntry.ds;\n                }\n                dataMap.set(parseInt(fieldId, 10), objectToNumericMap(indexEntry));\n            }\n            miniSearch._index.set(term, dataMap);\n        }\n        return miniSearch;\n    }\n    /**\n     * @ignore\n     */\n    static loadJSAsync(js, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { index, documentIds, fieldLength, storedFields, serializationVersion } = js;\n            const miniSearch = this.instantiateMiniSearch(js, options);\n            miniSearch._documentIds = yield objectToNumericMapAsync(documentIds);\n            miniSearch._fieldLength = yield objectToNumericMapAsync(fieldLength);\n            miniSearch._storedFields = yield objectToNumericMapAsync(storedFields);\n            for (const [shortId, id] of miniSearch._documentIds) {\n                miniSearch._idToShortId.set(id, shortId);\n            }\n            let count = 0;\n            for (const [term, data] of index) {\n                const dataMap = new Map();\n                for (const fieldId of Object.keys(data)) {\n                    let indexEntry = data[fieldId];\n                    // Version 1 used to nest the index entry inside a field called ds\n                    if (serializationVersion === 1) {\n                        indexEntry = indexEntry.ds;\n                    }\n                    dataMap.set(parseInt(fieldId, 10), yield objectToNumericMapAsync(indexEntry));\n                }\n                if (++count % 1000 === 0)\n                    yield wait(0);\n                miniSearch._index.set(term, dataMap);\n            }\n            return miniSearch;\n        });\n    }\n    /**\n     * @ignore\n     */\n    static instantiateMiniSearch(js, options) {\n        const { documentCount, nextId, fieldIds, averageFieldLength, dirtCount, serializationVersion } = js;\n        if (serializationVersion !== 1 && serializationVersion !== 2) {\n            throw new Error('MiniSearch: cannot deserialize an index created with an incompatible version');\n        }\n        const miniSearch = new MiniSearch(options);\n        miniSearch._documentCount = documentCount;\n        miniSearch._nextId = nextId;\n        miniSearch._idToShortId = new Map();\n        miniSearch._fieldIds = fieldIds;\n        miniSearch._avgFieldLength = averageFieldLength;\n        miniSearch._dirtCount = dirtCount || 0;\n        miniSearch._index = new SearchableMap();\n        return miniSearch;\n    }\n    /**\n     * @ignore\n     */\n    executeQuery(query, searchOptions = {}) {\n        if (query === MiniSearch.wildcard) {\n            return this.executeWildcardQuery(searchOptions);\n        }\n        if (typeof query !== 'string') {\n            const options = Object.assign(Object.assign(Object.assign({}, searchOptions), query), { queries: undefined });\n            const results = query.queries.map((subquery) => this.executeQuery(subquery, options));\n            return this.combineResults(results, options.combineWith);\n        }\n        const { tokenize, processTerm, searchOptions: globalSearchOptions } = this._options;\n        const options = Object.assign(Object.assign({ tokenize, processTerm }, globalSearchOptions), searchOptions);\n        const { tokenize: searchTokenize, processTerm: searchProcessTerm } = options;\n        const terms = searchTokenize(query)\n            .flatMap((term) => searchProcessTerm(term))\n            .filter((term) => !!term);\n        const queries = terms.map(termToQuerySpec(options));\n        const results = queries.map(query => this.executeQuerySpec(query, options));\n        return this.combineResults(results, options.combineWith);\n    }\n    /**\n     * @ignore\n     */\n    executeQuerySpec(query, searchOptions) {\n        const options = Object.assign(Object.assign({}, this._options.searchOptions), searchOptions);\n        const boosts = (options.fields || this._options.fields).reduce((boosts, field) => (Object.assign(Object.assign({}, boosts), { [field]: getOwnProperty(options.boost, field) || 1 })), {});\n        const { boostDocument, weights, maxFuzzy, bm25: bm25params } = options;\n        const { fuzzy: fuzzyWeight, prefix: prefixWeight } = Object.assign(Object.assign({}, defaultSearchOptions.weights), weights);\n        const data = this._index.get(query.term);\n        const results = this.termResults(query.term, query.term, 1, query.termBoost, data, boosts, boostDocument, bm25params);\n        let prefixMatches;\n        let fuzzyMatches;\n        if (query.prefix) {\n            prefixMatches = this._index.atPrefix(query.term);\n        }\n        if (query.fuzzy) {\n            const fuzzy = (query.fuzzy === true) ? 0.2 : query.fuzzy;\n            const maxDistance = fuzzy < 1 ? Math.min(maxFuzzy, Math.round(query.term.length * fuzzy)) : fuzzy;\n            if (maxDistance)\n                fuzzyMatches = this._index.fuzzyGet(query.term, maxDistance);\n        }\n        if (prefixMatches) {\n            for (const [term, data] of prefixMatches) {\n                const distance = term.length - query.term.length;\n                if (!distance) {\n                    continue;\n                } // Skip exact match.\n                // Delete the term from fuzzy results (if present) if it is also a\n                // prefix result. This entry will always be scored as a prefix result.\n                fuzzyMatches === null || fuzzyMatches === void 0 ? void 0 : fuzzyMatches.delete(term);\n                // Weight gradually approaches 0 as distance goes to infinity, with the\n                // weight for the hypothetical distance 0 being equal to prefixWeight.\n                // The rate of change is much lower than that of fuzzy matches to\n                // account for the fact that prefix matches stay more relevant than\n                // fuzzy matches for longer distances.\n                const weight = prefixWeight * term.length / (term.length + 0.3 * distance);\n                this.termResults(query.term, term, weight, query.termBoost, data, boosts, boostDocument, bm25params, results);\n            }\n        }\n        if (fuzzyMatches) {\n            for (const term of fuzzyMatches.keys()) {\n                const [data, distance] = fuzzyMatches.get(term);\n                if (!distance) {\n                    continue;\n                } // Skip exact match.\n                // Weight gradually approaches 0 as distance goes to infinity, with the\n                // weight for the hypothetical distance 0 being equal to fuzzyWeight.\n                const weight = fuzzyWeight * term.length / (term.length + distance);\n                this.termResults(query.term, term, weight, query.termBoost, data, boosts, boostDocument, bm25params, results);\n            }\n        }\n        return results;\n    }\n    /**\n     * @ignore\n     */\n    executeWildcardQuery(searchOptions) {\n        const results = new Map();\n        const options = Object.assign(Object.assign({}, this._options.searchOptions), searchOptions);\n        for (const [shortId, id] of this._documentIds) {\n            const score = options.boostDocument ? options.boostDocument(id, '', this._storedFields.get(shortId)) : 1;\n            results.set(shortId, {\n                score,\n                terms: [],\n                match: {}\n            });\n        }\n        return results;\n    }\n    /**\n     * @ignore\n     */\n    combineResults(results, combineWith = OR) {\n        if (results.length === 0) {\n            return new Map();\n        }\n        const operator = combineWith.toLowerCase();\n        const combinator = combinators[operator];\n        if (!combinator) {\n            throw new Error(`Invalid combination operator: ${combineWith}`);\n        }\n        return results.reduce(combinator) || new Map();\n    }\n    /**\n     * Allows serialization of the index to JSON, to possibly store it and later\n     * deserialize it with {@link MiniSearch.loadJSON}.\n     *\n     * Normally one does not directly call this method, but rather call the\n     * standard JavaScript `JSON.stringify()` passing the {@link MiniSearch}\n     * instance, and JavaScript will internally call this method. Upon\n     * deserialization, one must pass to {@link MiniSearch.loadJSON} the same\n     * options used to create the original instance that was serialized.\n     *\n     * ### Usage:\n     *\n     * ```javascript\n     * // Serialize the index:\n     * let miniSearch = new MiniSearch({ fields: ['title', 'text'] })\n     * miniSearch.addAll(documents)\n     * const json = JSON.stringify(miniSearch)\n     *\n     * // Later, to deserialize it:\n     * miniSearch = MiniSearch.loadJSON(json, { fields: ['title', 'text'] })\n     * ```\n     *\n     * @return A plain-object serializable representation of the search index.\n     */\n    toJSON() {\n        const index = [];\n        for (const [term, fieldIndex] of this._index) {\n            const data = {};\n            for (const [fieldId, freqs] of fieldIndex) {\n                data[fieldId] = Object.fromEntries(freqs);\n            }\n            index.push([term, data]);\n        }\n        return {\n            documentCount: this._documentCount,\n            nextId: this._nextId,\n            documentIds: Object.fromEntries(this._documentIds),\n            fieldIds: this._fieldIds,\n            fieldLength: Object.fromEntries(this._fieldLength),\n            averageFieldLength: this._avgFieldLength,\n            storedFields: Object.fromEntries(this._storedFields),\n            dirtCount: this._dirtCount,\n            index,\n            serializationVersion: 2\n        };\n    }\n    /**\n     * @ignore\n     */\n    termResults(sourceTerm, derivedTerm, termWeight, termBoost, fieldTermData, fieldBoosts, boostDocumentFn, bm25params, results = new Map()) {\n        if (fieldTermData == null)\n            return results;\n        for (const field of Object.keys(fieldBoosts)) {\n            const fieldBoost = fieldBoosts[field];\n            const fieldId = this._fieldIds[field];\n            const fieldTermFreqs = fieldTermData.get(fieldId);\n            if (fieldTermFreqs == null)\n                continue;\n            let matchingFields = fieldTermFreqs.size;\n            const avgFieldLength = this._avgFieldLength[fieldId];\n            for (const docId of fieldTermFreqs.keys()) {\n                if (!this._documentIds.has(docId)) {\n                    this.removeTerm(fieldId, docId, derivedTerm);\n                    matchingFields -= 1;\n                    continue;\n                }\n                const docBoost = boostDocumentFn ? boostDocumentFn(this._documentIds.get(docId), derivedTerm, this._storedFields.get(docId)) : 1;\n                if (!docBoost)\n                    continue;\n                const termFreq = fieldTermFreqs.get(docId);\n                const fieldLength = this._fieldLength.get(docId)[fieldId];\n                // NOTE: The total number of fields is set to the number of documents\n                // `this._documentCount`. It could also make sense to use the number of\n                // documents where the current field is non-blank as a normalization\n                // factor. This will make a difference in scoring if the field is rarely\n                // present. This is currently not supported, and may require further\n                // analysis to see if it is a valid use case.\n                const rawScore = calcBM25Score(termFreq, matchingFields, this._documentCount, fieldLength, avgFieldLength, bm25params);\n                const weightedScore = termWeight * termBoost * fieldBoost * docBoost * rawScore;\n                const result = results.get(docId);\n                if (result) {\n                    result.score += weightedScore;\n                    assignUniqueTerm(result.terms, sourceTerm);\n                    const match = getOwnProperty(result.match, derivedTerm);\n                    if (match) {\n                        match.push(field);\n                    }\n                    else {\n                        result.match[derivedTerm] = [field];\n                    }\n                }\n                else {\n                    results.set(docId, {\n                        score: weightedScore,\n                        terms: [sourceTerm],\n                        match: { [derivedTerm]: [field] }\n                    });\n                }\n            }\n        }\n        return results;\n    }\n    /**\n     * @ignore\n     */\n    addTerm(fieldId, documentId, term) {\n        const indexData = this._index.fetch(term, createMap);\n        let fieldIndex = indexData.get(fieldId);\n        if (fieldIndex == null) {\n            fieldIndex = new Map();\n            fieldIndex.set(documentId, 1);\n            indexData.set(fieldId, fieldIndex);\n        }\n        else {\n            const docs = fieldIndex.get(documentId);\n            fieldIndex.set(documentId, (docs || 0) + 1);\n        }\n    }\n    /**\n     * @ignore\n     */\n    removeTerm(fieldId, documentId, term) {\n        if (!this._index.has(term)) {\n            this.warnDocumentChanged(documentId, fieldId, term);\n            return;\n        }\n        const indexData = this._index.fetch(term, createMap);\n        const fieldIndex = indexData.get(fieldId);\n        if (fieldIndex == null || fieldIndex.get(documentId) == null) {\n            this.warnDocumentChanged(documentId, fieldId, term);\n        }\n        else if (fieldIndex.get(documentId) <= 1) {\n            if (fieldIndex.size <= 1) {\n                indexData.delete(fieldId);\n            }\n            else {\n                fieldIndex.delete(documentId);\n            }\n        }\n        else {\n            fieldIndex.set(documentId, fieldIndex.get(documentId) - 1);\n        }\n        if (this._index.get(term).size === 0) {\n            this._index.delete(term);\n        }\n    }\n    /**\n     * @ignore\n     */\n    warnDocumentChanged(shortDocumentId, fieldId, term) {\n        for (const fieldName of Object.keys(this._fieldIds)) {\n            if (this._fieldIds[fieldName] === fieldId) {\n                this._options.logger('warn', `MiniSearch: document with ID ${this._documentIds.get(shortDocumentId)} has changed before removal: term \"${term}\" was not present in field \"${fieldName}\". Removing a document after it has changed can corrupt the index!`, 'version_conflict');\n                return;\n            }\n        }\n    }\n    /**\n     * @ignore\n     */\n    addDocumentId(documentId) {\n        const shortDocumentId = this._nextId;\n        this._idToShortId.set(documentId, shortDocumentId);\n        this._documentIds.set(shortDocumentId, documentId);\n        this._documentCount += 1;\n        this._nextId += 1;\n        return shortDocumentId;\n    }\n    /**\n     * @ignore\n     */\n    addFields(fields) {\n        for (let i = 0; i < fields.length; i++) {\n            this._fieldIds[fields[i]] = i;\n        }\n    }\n    /**\n     * @ignore\n     */\n    addFieldLength(documentId, fieldId, count, length) {\n        let fieldLengths = this._fieldLength.get(documentId);\n        if (fieldLengths == null)\n            this._fieldLength.set(documentId, fieldLengths = []);\n        fieldLengths[fieldId] = length;\n        const averageFieldLength = this._avgFieldLength[fieldId] || 0;\n        const totalFieldLength = (averageFieldLength * count) + length;\n        this._avgFieldLength[fieldId] = totalFieldLength / (count + 1);\n    }\n    /**\n     * @ignore\n     */\n    removeFieldLength(documentId, fieldId, count, length) {\n        if (count === 1) {\n            this._avgFieldLength[fieldId] = 0;\n            return;\n        }\n        const totalFieldLength = (this._avgFieldLength[fieldId] * count) - length;\n        this._avgFieldLength[fieldId] = totalFieldLength / (count - 1);\n    }\n    /**\n     * @ignore\n     */\n    saveStoredFields(documentId, doc) {\n        const { storeFields, extractField } = this._options;\n        if (storeFields == null || storeFields.length === 0) {\n            return;\n        }\n        let documentFields = this._storedFields.get(documentId);\n        if (documentFields == null)\n            this._storedFields.set(documentId, documentFields = {});\n        for (const fieldName of storeFields) {\n            const fieldValue = extractField(doc, fieldName);\n            if (fieldValue !== undefined)\n                documentFields[fieldName] = fieldValue;\n        }\n    }\n}\n/**\n * The special wildcard symbol that can be passed to {@link MiniSearch#search}\n * to match all documents\n */\nMiniSearch.wildcard = Symbol('*');\nconst getOwnProperty = (object, property) => Object.prototype.hasOwnProperty.call(object, property) ? object[property] : undefined;\nconst combinators = {\n    [OR]: (a, b) => {\n        for (const docId of b.keys()) {\n            const existing = a.get(docId);\n            if (existing == null) {\n                a.set(docId, b.get(docId));\n            }\n            else {\n                const { score, terms, match } = b.get(docId);\n                existing.score = existing.score + score;\n                existing.match = Object.assign(existing.match, match);\n                assignUniqueTerms(existing.terms, terms);\n            }\n        }\n        return a;\n    },\n    [AND]: (a, b) => {\n        const combined = new Map();\n        for (const docId of b.keys()) {\n            const existing = a.get(docId);\n            if (existing == null)\n                continue;\n            const { score, terms, match } = b.get(docId);\n            assignUniqueTerms(existing.terms, terms);\n            combined.set(docId, {\n                score: existing.score + score,\n                terms: existing.terms,\n                match: Object.assign(existing.match, match)\n            });\n        }\n        return combined;\n    },\n    [AND_NOT]: (a, b) => {\n        for (const docId of b.keys())\n            a.delete(docId);\n        return a;\n    }\n};\nconst defaultBM25params = { k: 1.2, b: 0.7, d: 0.5 };\nconst calcBM25Score = (termFreq, matchingCount, totalCount, fieldLength, avgFieldLength, bm25params) => {\n    const { k, b, d } = bm25params;\n    const invDocFreq = Math.log(1 + (totalCount - matchingCount + 0.5) / (matchingCount + 0.5));\n    return invDocFreq * (d + termFreq * (k + 1) / (termFreq + k * (1 - b + b * fieldLength / avgFieldLength)));\n};\nconst termToQuerySpec = (options) => (term, i, terms) => {\n    const fuzzy = (typeof options.fuzzy === 'function')\n        ? options.fuzzy(term, i, terms)\n        : (options.fuzzy || false);\n    const prefix = (typeof options.prefix === 'function')\n        ? options.prefix(term, i, terms)\n        : (options.prefix === true);\n    const termBoost = (typeof options.boostTerm === 'function')\n        ? options.boostTerm(term, i, terms)\n        : 1;\n    return { term, fuzzy, prefix, termBoost };\n};\nconst defaultOptions = {\n    idField: 'id',\n    extractField: (document, fieldName) => document[fieldName],\n    tokenize: (text) => text.split(SPACE_OR_PUNCTUATION),\n    processTerm: (term) => term.toLowerCase(),\n    fields: undefined,\n    searchOptions: undefined,\n    storeFields: [],\n    logger: (level, message) => {\n        if (typeof (console === null || console === void 0 ? void 0 : console[level]) === 'function')\n            console[level](message);\n    },\n    autoVacuum: true\n};\nconst defaultSearchOptions = {\n    combineWith: OR,\n    prefix: false,\n    fuzzy: false,\n    maxFuzzy: 6,\n    boost: {},\n    weights: { fuzzy: 0.45, prefix: 0.375 },\n    bm25: defaultBM25params\n};\nconst defaultAutoSuggestOptions = {\n    combineWith: AND,\n    prefix: (term, i, terms) => i === terms.length - 1\n};\nconst defaultVacuumOptions = { batchSize: 1000, batchWait: 10 };\nconst defaultVacuumConditions = { minDirtFactor: 0.1, minDirtCount: 20 };\nconst defaultAutoVacuumOptions = Object.assign(Object.assign({}, defaultVacuumOptions), defaultVacuumConditions);\nconst assignUniqueTerm = (target, term) => {\n    // Avoid adding duplicate terms.\n    if (!target.includes(term))\n        target.push(term);\n};\nconst assignUniqueTerms = (target, source) => {\n    for (const term of source) {\n        // Avoid adding duplicate terms.\n        if (!target.includes(term))\n            target.push(term);\n    }\n};\nconst byScore = ({ score: a }, { score: b }) => b - a;\nconst createMap = () => new Map();\nconst objectToNumericMap = (object) => {\n    const map = new Map();\n    for (const key of Object.keys(object)) {\n        map.set(parseInt(key, 10), object[key]);\n    }\n    return map;\n};\nconst objectToNumericMapAsync = (object) => __awaiter(void 0, void 0, void 0, function* () {\n    const map = new Map();\n    let count = 0;\n    for (const key of Object.keys(object)) {\n        map.set(parseInt(key, 10), object[key]);\n        if (++count % 1000 === 0) {\n            yield wait(0);\n        }\n    }\n    return map;\n});\nconst wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n// This regular expression matches any Unicode space, newline, or punctuation\n// character\nconst SPACE_OR_PUNCTUATION = /[\\n\\r\\p{Z}\\p{P}]+/u;\n\nexport { MiniSearch as default };\n//# sourceMappingURL=index.js.map\n"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","adopt","then","apply","SuppressedError","KEYS","VALUES","TreeIterator","constructor","set","type","node","_tree","keys","Array","from","_type","_path","length","dive","backtrack","undefined","last$1","child","get","push","pop","key","_prefix","map","filter","join","Symbol","iterator","array","fuzzySearch","query","maxDistance","results","Map","n","m","matrix","Uint8Array","fill","j","i","recurse","prefix","offset","distance","pos","char","thisRowOffset","prevRowOffset","minDistance","jmin","Math","max","jmax","min","different","rpl","del","ins","dist","SearchableMap","tree","_size","atPrefix","startsWith","path","trackDown","slice","parentNode","last","k","clear","delete","remove","entries","forEach","fn","fuzzyGet","maxEditDistance","lookup","has","size","iter","update","createPath","fetch","initial","values","fromObject","object","Object","keyLength","outer","len","intermediate","cleanup","merge","nodeKey","MiniSearch","options","fields","autoVacuum","defaultAutoVacuumOptions","_options","assign","defaultOptions","searchOptions","defaultSearchOptions","autoSuggestOptions","defaultAutoSuggestOptions","_index","_documentCount","_documentIds","_idToShortId","_fieldIds","_fieldLength","_avgFieldLength","_nextId","_storedFields","_dirtCount","_currentVacuum","_enqueuedVacuum","_enqueuedVacuumConditions","defaultVacuumConditions","addFields","add","document","extractField","tokenize","processTerm","idField","id","shortDocumentId","addDocumentId","field","saveStoredFields","fieldValue","tokens","toString","fieldId","uniqueTerms","Set","term","addFieldLength","processedTerm","isArray","t","addTerm","addAll","documents","addAllAsync","chunkSize","acc","chunk","promise","reduce","setTimeout","shortId","removeFieldLength","removeTerm","removeAll","arguments","discard","fieldLength","maybeAutoVacuum","minDirtFactor","minDirtCount","batchSize","batchWait","conditionalVacuum","discardAll","ids","replace","updatedDocument","vacuum","conditions","performVacuuming","vacuumConditionsMet","initialDirtCount","defaultVacuumOptions","fieldsData","fieldIndex","dirtCount","dirtFactor","isVacuuming","getStoredFields","search","rawResults","executeQuery","docId","score","terms","match","quality","queryTerms","wildcard","boostDocument","sort","byScore","autoSuggest","queryString","suggestions","phrase","suggestion","count","documentCount","termCount","loadJSON","json","loadJS","JSON","parse","loadJSONAsync","loadJSAsync","getDefault","optionName","hasOwnProperty","getOwnProperty","js","index","documentIds","storedFields","serializationVersion","miniSearch","instantiateMiniSearch","objectToNumericMap","data","dataMap","indexEntry","ds","parseInt","objectToNumericMapAsync","wait","nextId","fieldIds","averageFieldLength","executeWildcardQuery","queries","subquery","combineResults","combineWith","globalSearchOptions","searchTokenize","searchProcessTerm","flatMap","termToQuerySpec","executeQuerySpec","prefixMatches","fuzzyMatches","boosts","boost","weights","maxFuzzy","bm25","bm25params","fuzzy","fuzzyWeight","prefixWeight","termResults","termBoost","round","weight","combinator","combinators","toLowerCase","toJSON","freqs","fromEntries","sourceTerm","derivedTerm","termWeight","fieldTermData","fieldBoosts","boostDocumentFn","fieldBoost","fieldTermFreqs","matchingFields","avgFieldLength","docBoost","termFreq","weightedScore","calcBM25Score","assignUniqueTerm","documentId","indexData","createMap","docs","warnDocumentChanged","fieldName","logger","fieldLengths","totalFieldLength","doc","storeFields","documentFields","property","prototype","call","a","b","existing","assignUniqueTerms","combined","matchingCount","totalCount","d","invDocFreq","log","boostTerm","text","split","SPACE_OR_PUNCTUATION","level","message","console","target","includes","source","ms"],"sourceRoot":""}