{"version":3,"file":"static/chunks/4562.e675b54bb127f846.js","mappings":"uIACA,IAAAA,EAAA,CADAC,OAAAC,MAAA,EAA6B,gDAA4D,uBAA0B,CAAI,qBAAwB,aAAmB,qBAAuB,WAAe,2GAAkH,CAAI,wGAA+G,CAAI,6GAAoH,CAAI,2GAAkH,CAAI,8GAAqH,CAAI,uGAA8G,CAAI,yGAAgH,CAAI,6FAAoG,CAAI,oGAA2G,EAAG,SAAe,WAAe,sDAAiE,CAAI,2CAAkD,CAAI,2CAAkD,EAAG,yBAA6B,iEAAiF,8CAA6C,0CAAkD,CAAI,4DAAmE,EAAG,YAAkB,WAAe,qBAAwB,CAAI,oBAAuB,CAAI,kCAAqC,CAAI,kCAAqC,CAAI,kCAAqC,CAAI,8BAAiC,CAAI,sBAAyB,EAAG,WAAiB,WAAe,0DAAkE,GAAO,sCAA0C,0CAAwD,uBAA0B,EAAG,EAAG,UAAgB,WAAe,oEAA2E,CAAI,0CAAiD,CAAI,2FAAkG,CAAI,iFAAwF,CAAI,sDAA6D,CAAI,kFAAyF,CAAI,sEAA6E,CAAI,8EAAqF,EAAG,UAAgB,WAAe,kEAAyE,CAAI,sEAA6E,CAAI,2EAAkF,CAAI,uEAA8E,EAAG,yBAA6B,iEAAiF,8CAA6C,0CAAkD,CAAI,4DAAmE,EAAG,yBAA6B,WAAe,uEAAkF,GAAK,6BAGlmH","sources":["webpack://_N_E/./node_modules/shiki/dist/langs/jsonnet.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"Jsonnet\", \"name\": \"jsonnet\", \"patterns\": [{ \"include\": \"#expression\" }, { \"include\": \"#keywords\" }], \"repository\": { \"builtin-functions\": { \"patterns\": [{ \"match\": \"\\\\bstd[.](acos|asin|atan|ceil|char|codepoint|cos|exp|exponent)\\\\b\", \"name\": \"support.function.jsonnet\" }, { \"match\": \"\\\\bstd[.](filter|floor|force|length|log|makeArray|mantissa)\\\\b\", \"name\": \"support.function.jsonnet\" }, { \"match\": \"\\\\bstd[.](objectFields|objectHas|pow|sin|sqrt|tan|type|thisFile)\\\\b\", \"name\": \"support.function.jsonnet\" }, { \"match\": \"\\\\bstd[.](acos|asin|atan|ceil|char|codepoint|cos|exp|exponent)\\\\b\", \"name\": \"support.function.jsonnet\" }, { \"match\": \"\\\\bstd[.](abs|assertEqual|escapeString(Bash|Dollars|Json|Python))\\\\b\", \"name\": \"support.function.jsonnet\" }, { \"match\": \"\\\\bstd[.](filterMap|flattenArrays|foldl|foldr|format|join)\\\\b\", \"name\": \"support.function.jsonnet\" }, { \"match\": \"\\\\bstd[.](lines|manifest(Ini|Python(Vars)?)|map|max|min|mod)\\\\b\", \"name\": \"support.function.jsonnet\" }, { \"match\": \"\\\\bstd[.](set|set(Diff|Inter|Member|Union)|sort)\\\\b\", \"name\": \"support.function.jsonnet\" }, { \"match\": \"\\\\bstd[.](range|split|stringChars|substr|toString|uniq)\\\\b\", \"name\": \"support.function.jsonnet\" }] }, \"comment\": { \"patterns\": [{ \"begin\": \"/\\\\*\", \"end\": \"\\\\*/\", \"name\": \"comment.block.jsonnet\" }, { \"match\": \"//.*$\", \"name\": \"comment.line.jsonnet\" }, { \"match\": \"#.*$\", \"name\": \"comment.block.jsonnet\" }] }, \"double-quoted-strings\": { \"begin\": '\"', \"end\": '\"', \"name\": \"string.quoted.double.jsonnet\", \"patterns\": [{ \"match\": '\\\\\\\\([\"\\\\\\\\/bfnrt]|(u[0-9a-fA-F]{4}))', \"name\": \"constant.character.escape.jsonnet\" }, { \"match\": '\\\\\\\\[^\"\\\\\\\\/bfnrtu]', \"name\": \"invalid.illegal.jsonnet\" }] }, \"expression\": { \"patterns\": [{ \"include\": \"#literals\" }, { \"include\": \"#comment\" }, { \"include\": \"#single-quoted-strings\" }, { \"include\": \"#double-quoted-strings\" }, { \"include\": \"#triple-quoted-strings\" }, { \"include\": \"#builtin-functions\" }, { \"include\": \"#functions\" }] }, \"functions\": { \"patterns\": [{ \"begin\": \"\\\\b([a-zA-Z_][a-z0-9A-Z_]*)\\\\s*\\\\(\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.function.jsonnet\" } }, \"end\": \"\\\\)\", \"name\": \"meta.function\", \"patterns\": [{ \"include\": \"#expression\" }] }] }, \"keywords\": { \"patterns\": [{ \"match\": \"[!:~+\\\\-&\\\\|\\\\^=<>\\\\*\\\\/%]\", \"name\": \"keyword.operator.jsonnet\" }, { \"match\": \"\\\\$\", \"name\": \"keyword.other.jsonnet\" }, { \"match\": \"\\\\b(self|super|import|importstr|local|tailstrict)\\\\b\", \"name\": \"keyword.other.jsonnet\" }, { \"match\": \"\\\\b(if|then|else|for|in|error|assert)\\\\b\", \"name\": \"keyword.control.jsonnet\" }, { \"match\": \"\\\\b(function)\\\\b\", \"name\": \"storage.type.jsonnet\" }, { \"match\": \"[a-zA-Z_][a-z0-9A-Z_]*\\\\s*(:::|\\\\+:::)\", \"name\": \"variable.parameter.jsonnet\" }, { \"match\": \"[a-zA-Z_][a-z0-9A-Z_]*\\\\s*(::|\\\\+::)\", \"name\": \"entity.name.type\" }, { \"match\": \"[a-zA-Z_][a-z0-9A-Z_]*\\\\s*(:|\\\\+:)\", \"name\": \"variable.parameter.jsonnet\" }] }, \"literals\": { \"patterns\": [{ \"match\": \"\\\\b(true|false|null)\\\\b\", \"name\": \"constant.language.jsonnet\" }, { \"match\": \"\\\\b(\\\\d+([Ee][+-]?\\\\d+)?)\\\\b\", \"name\": \"constant.numeric.jsonnet\" }, { \"match\": \"\\\\b\\\\d+[.]\\\\d*([Ee][+-]?\\\\d+)?\\\\b\", \"name\": \"constant.numeric.jsonnet\" }, { \"match\": \"\\\\b[.]\\\\d+([Ee][+-]?\\\\d+)?\\\\b\", \"name\": \"constant.numeric.jsonnet\" }] }, \"single-quoted-strings\": { \"begin\": \"'\", \"end\": \"'\", \"name\": \"string.quoted.double.jsonnet\", \"patterns\": [{ \"match\": \"\\\\\\\\(['\\\\\\\\/bfnrt]|(u[0-9a-fA-F]{4}))\", \"name\": \"constant.character.escape.jsonnet\" }, { \"match\": \"\\\\\\\\[^'\\\\\\\\/bfnrtu]\", \"name\": \"invalid.illegal.jsonnet\" }] }, \"triple-quoted-strings\": { \"patterns\": [{ \"begin\": \"\\\\|\\\\|\\\\|\", \"end\": \"\\\\|\\\\|\\\\|\", \"name\": \"string.quoted.triple.jsonnet\" }] } }, \"scopeName\": \"source.jsonnet\" });\nvar jsonnet = [\n  lang\n];\n\nexport { jsonnet as default };\n"],"names":["jsonnet","Object","freeze"],"sourceRoot":""}