{"version":3,"file":"static/chunks/832.6d787d8cfeca6c11.js","mappings":"sIACA,IAAAA,EAAA,CADAC,OAAAC,MAAA,EAA6B,oEAAoF,qBAAwB,CAAI,iCAAoC,CAAI,kBAAqB,CAAI,wBAA2B,aAAmB,kBAAsB,kCAA0C,GAAO,uCAA2C,mGAAiH,GAAO,WAAe,yGAAoH,CAAI,qFAAgG,IAAO,sBAA4B,UAAc,GAAO,6CAAgD,GAAS,qCAAwC,GAAS,2CAA8C,GAAS,yCAA6C,6KAA0L,iBAAuB,2BAAmC,GAAO,uCAA2C,6DAA2E,GAAO,qCAA0C,OAAa,2CAA2C,eAAuB,GAAO,WAAe,6GAAwH,EAAG,GAAS,WAAe,yGAAoH,CAAI,4GAAuH,EAAG,GAAS,6CAAiD,+EAAiF,UAAe,aAAoB,GAAO,2CAA+C,iCAA2C,qBAAwB,CAAI,iCAAoC,CAAI,wBAA2B,CAAI,kBAAqB,EAAG,uBAA6B,uBAA+B,GAAO,4CAAgD,2PAAwQ,UAAgB,2BAAmC,GAAO,gDAAoD,uBAAiC,GAAO,8CAAkD,WAAiB,wEAAmF,CAAI,kBAAqB,CAAI,qBAAwB,CAAI,kCAAqC,CAAI,iCAAoC,CAAI,wBAA2B,CAAI,8BAAiC,EAAG,cAAoB,wEAA4E,sCAA6C,OAAa,6FAAwG,UAAgB,WAAe,+BAAkC,CAAI,uCAA0C,CAAI,kCAAqC,EAAG,4BAAkC,qBAA6B,GAAO,4CAAgD,uMAAoN,aAAmB,WAAe,2BAA8B,CAAI,sBAAyB,CAAI,iCAAoC,CAAI,kCAAqC,CAAI,qBAAwB,CAAI,oBAAuB,CAAI,6BAAgC,CAAI,4BAA+B,CAAI,sBAAyB,CAAI,mBAAsB,EAAG,qBAA2B,WAAe,wEAAmF,CAAI,8EAAyF,CAAI,uCAA8C,CAAI,wBAA2B,CAAI,qBAAwB,CAAI,kBAAqB,CAAI,8BAAiC,EAAG,WAAiB,yCAAiD,GAAO,WAAe,uHAA8H,CAAI,uEAA8E,EAAG,GAAS,8CAAkD,yDAAuE,GAAO,4CAAgD,yCAAmD,qBAAwB,CAAI,wBAA2B,CAAI,kBAAqB,EAAG,oBAA0B,oBAA4B,GAAO,4CAAgD,qMAAkN,mBAAyB,gIAA2I,SAAe,6CAAqD,GAAO,qCAAwC,GAAS,qCAAyC,0DAAwE,GAAO,qCAAyC,8CAAwD,iCAAoC,EAAG,uBAA6B,UAAc,GAAO,4BAA+B,GAAS,WAAe,iDAAwD,CAAI,gCAAmC,GAAK,yBAA8B,sBAA4B,+BAAuC,GAAO,yCAA6C,qBAA+B,wBAA2B,CAAI,qBAAwB,CAAI,kBAAqB,CAAI,8BAAiC,EAAG,oBAA0B,2FAAsG,gBAAsB,WAAe,6BAAgC,CAAI,+BAAkC,CAAI,4BAA+B,CAAI,oBAAuB,CAAI,8BAAiC,EAAG,mBAAyB,yHAAoI,kBAAwB,WAAe,UAAc,GAAO,4CAAgD,uHAAoI,CAAI,UAAc,GAAO,0CAA6C,GAAS,4CAAgD,kIAA+I,CAAI,2EAAsF,EAAG,uBAA6B,0BAAc,eAAmC,GAAO,6CAAgD,GAAS,6BAAiC,UAAa,aAAoB,GAAO,4CAAgD,WAAiB,6CAAoD,CAAI,gCAAmC,EAAG,mBAAyB,WAAe,qBAAwB,CAAI,2BAA8B,CAAI,sBAAyB,CAAI,iCAAoC,CAAI,kCAAqC,CAAI,oBAAuB,CAAI,sBAAyB,EAAG,SAAe,YAAa,eAAsB,GAAO,8CAAkD,UAAa,aAAoB,GAAO,4CAAgD,kCAA4C,qBAAwB,CAAI,oBAAuB,CAAI,kCAAqC,CAAI,iCAAoC,CAAI,UAAc,GAAO,0DAA6D,GAAS,yCAA6C,4GAAqH,CAAI,UAAc,GAAO,sDAAyD,GAAS,gDAAmD,GAAS,8CAAiD,GAAS,8BAAkC,gEAAyE,CAAI,gCAAwC,GAAO,8CAAkD,oGAAkH,GAAO,2CAA8C,GAAS,8BAAkC,uCAAiD,6BAAgC,CAAI,4BAA+B,EAAG,CAAI,8BAAiC,EAAG,WAAiB,WAAe,wCAA+C,CAAI,wCAA+C,CAAI,wCAA+C,CAAI,wCAA+C,CAAI,oDAA2D,CAAI,kDAAyD,CAAI,oDAA2D,CAAI,oDAA2D,CAAI,oDAA2D,CAAI,oDAA2D,CAAI,oDAA2D,CAAI,+CAAsD,CAAI,uCAA8C,CAAI,uCAA8C,CAAI,yCAAgD,CAAI,+CAAsD,CAAI,uCAA8C,CAAI,wCAA+C,EAAG,QAAc,2BAAmC,GAAO,8CAAkD,0EAAwF,GAAO,4CAAgD,WAAiB,qBAAwB,CAAI,wBAA2B,EAAG,sBAA4B,yBAAyB,eAAuB,GAAO,+CAAmD,yCAAgD,aAAoB,GAAO,6CAAiD,yCAAmD,8FAAyG,CAAI,gGAA2G,CAAI,6HAAwI,CAAI,wBAA2B,CAAI,8BAAiC,EAAG,iBAAuB,yBAAiC,GAAO,iDAAqD,uCAAqD,GAAO,+CAAmD,2CAAqD,iCAAoC,CAAI,yBAA4B,EAAG,sBAA4B,yCAAiD,GAAO,+CAAkD,GAAS,6BAAiC,uBAAiC,GAAO,8CAAkD,WAAiB,gCAAmC,GAAK,yBAG7xY","sources":["webpack://_N_E/./node_modules/shiki/dist/langs/hcl.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"HashiCorp HCL\", \"fileTypes\": [\"hcl\"], \"name\": \"hcl\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#attribute_definition\" }, { \"include\": \"#block\" }, { \"include\": \"#expressions\" }], \"repository\": { \"attribute_access\": { \"begin\": \"\\\\.(?!\\\\*)\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.accessor.hcl\" } }, \"comment\": \"Matches traversal attribute access such as .attr\", \"end\": \"[A-Za-z][\\\\w-]*|\\\\d*\", \"endCaptures\": { \"0\": { \"patterns\": [{ \"comment\": \"Attribute name\", \"match\": \"(?!null|false|true)[[:alpha:]][\\\\w-]*\", \"name\": \"variable.other.member.hcl\" }, { \"comment\": \"Optional attribute index\", \"match\": \"\\\\d+\", \"name\": \"constant.numeric.integer.hcl\" }] } } }, \"attribute_definition\": { \"captures\": { \"1\": { \"name\": \"punctuation.section.parens.begin.hcl\" }, \"2\": { \"name\": \"variable.other.readwrite.hcl\" }, \"3\": { \"name\": \"punctuation.section.parens.end.hcl\" }, \"4\": { \"name\": \"keyword.operator.assignment.hcl\" } }, \"comment\": 'Identifier \"=\" with optional parens', \"match\": \"(\\\\()?(\\\\b(?!null\\\\b|false\\\\b|true\\\\b)[A-Za-z][0-9A-Za-z_-]*)(\\\\))?\\\\s*(=(?!=|>))\\\\s*\", \"name\": \"variable.declaration.hcl\" }, \"attribute_splat\": { \"begin\": \"\\\\.\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.accessor.hcl\" } }, \"comment\": \"Legacy attribute-only splat\", \"end\": \"\\\\*\", \"endCaptures\": { \"0\": { \"name\": \"keyword.operator.splat.hcl\" } } }, \"block\": { \"begin\": \"([\\\\w][\\\\-\\\\w]*)([^?\\\\r\\\\n]*)(\\\\{)\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"comment\": \"Block type\", \"match\": \"\\\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\\\b\", \"name\": \"entity.name.type.hcl\" }] }, \"2\": { \"patterns\": [{ \"comment\": \"Block label (String Literal)\", \"match\": '\\\\\"[^\\\\\"\\\\r\\\\n]*\\\\\"', \"name\": \"variable.other.enummember.hcl\" }, { \"comment\": \"Block label (Indentifier)\", \"match\": \"[[:alpha:]][[:alnum:]_-]*\", \"name\": \"variable.other.enummember.hcl\" }] }, \"3\": { \"name\": \"punctuation.section.block.begin.hcl\" } }, \"comment\": 'This will match HCL blocks like `thing1 \"one\" \"two\" {` or `thing2 {`', \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.block.end.hcl\" } }, \"name\": \"meta.block.hcl\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#attribute_definition\" }, { \"include\": \"#expressions\" }, { \"include\": \"#block\" }] }, \"block_inline_comments\": { \"begin\": \"/\\\\*\", \"captures\": { \"0\": { \"name\": \"punctuation.definition.comment.hcl\" } }, \"comment\": \"Inline comments start with the /* sequence and end with the */ sequence, and may have any characters within except the ending sequence. An inline comment is considered equivalent to a whitespace sequence\", \"end\": \"\\\\*/\", \"name\": \"comment.block.hcl\" }, \"brackets\": { \"begin\": \"\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.section.brackets.begin.hcl\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.brackets.end.hcl\" } }, \"patterns\": [{ \"comment\": \"Splat operator\", \"match\": \"\\\\*\", \"name\": \"keyword.operator.splat.hcl\" }, { \"include\": \"#comma\" }, { \"include\": \"#comments\" }, { \"include\": \"#inline_for_expression\" }, { \"include\": \"#inline_if_expression\" }, { \"include\": \"#expressions\" }, { \"include\": \"#local_identifiers\" }] }, \"char_escapes\": { \"comment\": \"Character Escapes\", \"match\": '\\\\\\\\[nrt\"\\\\\\\\]|\\\\\\\\u(\\\\h{8}|\\\\h{4})', \"name\": \"constant.character.escape.hcl\" }, \"comma\": { \"comment\": \"Commas - used in certain expressions\", \"match\": \"\\\\,\", \"name\": \"punctuation.separator.hcl\" }, \"comments\": { \"patterns\": [{ \"include\": \"#hash_line_comments\" }, { \"include\": \"#double_slash_line_comments\" }, { \"include\": \"#block_inline_comments\" }] }, \"double_slash_line_comments\": { \"begin\": \"//\", \"captures\": { \"0\": { \"name\": \"punctuation.definition.comment.hcl\" } }, \"comment\": \"Line comments start with // sequence and end with the next newline sequence. A line comment is considered equivalent to a newline sequence\", \"end\": \"$\\\\n?\", \"name\": \"comment.line.double-slash.hcl\" }, \"expressions\": { \"patterns\": [{ \"include\": \"#literal_values\" }, { \"include\": \"#operators\" }, { \"include\": \"#tuple_for_expression\" }, { \"include\": \"#object_for_expression\" }, { \"include\": \"#brackets\" }, { \"include\": \"#objects\" }, { \"include\": \"#attribute_access\" }, { \"include\": \"#attribute_splat\" }, { \"include\": \"#functions\" }, { \"include\": \"#parens\" }] }, \"for_expression_body\": { \"patterns\": [{ \"comment\": \"in keyword\", \"match\": \"\\\\bin\\\\b\", \"name\": \"keyword.operator.word.hcl\" }, { \"comment\": \"if keyword\", \"match\": \"\\\\bif\\\\b\", \"name\": \"keyword.control.conditional.hcl\" }, { \"match\": \":\", \"name\": \"keyword.operator.hcl\" }, { \"include\": \"#expressions\" }, { \"include\": \"#comments\" }, { \"include\": \"#comma\" }, { \"include\": \"#local_identifiers\" }] }, \"functions\": { \"begin\": \"([:\\\\-\\\\w]+)(\\\\()\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"match\": \"\\\\b[[:alpha:]][\\\\w_-]*::([[:alpha:]][\\\\w_-]*::)?[[:alpha:]][\\\\w_-]*\\\\b\", \"name\": \"support.function.namespaced.hcl\" }, { \"match\": \"\\\\b[[:alpha:]][\\\\w_-]*\\\\b\", \"name\": \"support.function.builtin.hcl\" }] }, \"2\": { \"name\": \"punctuation.section.parens.begin.hcl\" } }, \"comment\": \"Built-in function calls\", \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.parens.end.hcl\" } }, \"name\": \"meta.function-call.hcl\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#expressions\" }, { \"include\": \"#comma\" }] }, \"hash_line_comments\": { \"begin\": \"#\", \"captures\": { \"0\": { \"name\": \"punctuation.definition.comment.hcl\" } }, \"comment\": \"Line comments start with # sequence and end with the next newline sequence. A line comment is considered equivalent to a newline sequence\", \"end\": \"$\\\\n?\", \"name\": \"comment.line.number-sign.hcl\" }, \"hcl_type_keywords\": { \"comment\": \"Type keywords known to HCL.\", \"match\": \"\\\\b(any|string|number|bool|list|set|map|tuple|object)\\\\b\", \"name\": \"storage.type.hcl\" }, \"heredoc\": { \"begin\": \"(<<-?)\\\\s*(\\\\w+)\\\\s*$\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.heredoc.hcl\" }, \"2\": { \"name\": \"keyword.control.heredoc.hcl\" } }, \"comment\": \"String Heredoc\", \"end\": \"^\\\\s*\\\\2\\\\s*$\", \"endCaptures\": { \"0\": { \"name\": \"keyword.control.heredoc.hcl\" } }, \"name\": \"string.unquoted.heredoc.hcl\", \"patterns\": [{ \"include\": \"#string_interpolation\" }] }, \"inline_for_expression\": { \"captures\": { \"1\": { \"name\": \"keyword.control.hcl\" }, \"2\": { \"patterns\": [{ \"match\": \"\\\\=\\\\>\", \"name\": \"storage.type.function.hcl\" }, { \"include\": \"#for_expression_body\" }] } }, \"match\": \"(for)\\\\b(.*)\\\\n\" }, \"inline_if_expression\": { \"begin\": \"(if)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.hcl\" } }, \"end\": \"\\\\n\", \"patterns\": [{ \"include\": \"#expressions\" }, { \"include\": \"#comments\" }, { \"include\": \"#comma\" }, { \"include\": \"#local_identifiers\" }] }, \"language_constants\": { \"comment\": \"Language Constants\", \"match\": \"\\\\b(true|false|null)\\\\b\", \"name\": \"constant.language.hcl\" }, \"literal_values\": { \"patterns\": [{ \"include\": \"#numeric_literals\" }, { \"include\": \"#language_constants\" }, { \"include\": \"#string_literals\" }, { \"include\": \"#heredoc\" }, { \"include\": \"#hcl_type_keywords\" }] }, \"local_identifiers\": { \"comment\": \"Local Identifiers\", \"match\": \"\\\\b(?!null|false|true)[A-Za-z][0-9A-Za-z_-]*\\\\b\", \"name\": \"variable.other.readwrite.hcl\" }, \"numeric_literals\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"punctuation.separator.exponent.hcl\" } }, \"comment\": \"Integer, no fraction, optional exponent\", \"match\": \"\\\\b\\\\d+([Ee][+-]?)\\\\d+\\\\b\", \"name\": \"constant.numeric.float.hcl\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.separator.decimal.hcl\" }, \"2\": { \"name\": \"punctuation.separator.exponent.hcl\" } }, \"comment\": \"Integer, fraction, optional exponent\", \"match\": \"\\\\b\\\\d+(\\\\.)\\\\d+(?:([Ee][+-]?)\\\\d+)?\\\\b\", \"name\": \"constant.numeric.float.hcl\" }, { \"comment\": \"Integers\", \"match\": \"\\\\b\\\\d+\\\\b\", \"name\": \"constant.numeric.integer.hcl\" }] }, \"object_for_expression\": { \"begin\": \"(\\\\{)\\\\s?(for)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.braces.begin.hcl\" }, \"2\": { \"name\": \"keyword.control.hcl\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.braces.end.hcl\" } }, \"patterns\": [{ \"match\": \"=>\", \"name\": \"storage.type.function.hcl\" }, { \"include\": \"#for_expression_body\" }] }, \"object_key_values\": { \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#literal_values\" }, { \"include\": \"#operators\" }, { \"include\": \"#tuple_for_expression\" }, { \"include\": \"#object_for_expression\" }, { \"include\": \"#heredoc\" }, { \"include\": \"#functions\" }] }, \"objects\": { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.section.braces.begin.hcl\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.braces.end.hcl\" } }, \"name\": \"meta.braces.hcl\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#objects\" }, { \"include\": \"#inline_for_expression\" }, { \"include\": \"#inline_if_expression\" }, { \"captures\": { \"1\": { \"name\": \"meta.mapping.key.hcl variable.other.readwrite.hcl\" }, \"2\": { \"name\": \"keyword.operator.assignment.hcl\" } }, \"comment\": \"Literal, named object key\", \"match\": \"\\\\b((?!null|false|true)[A-Za-z][0-9A-Za-z_-]*)\\\\s*(=(?!=))\\\\s*\" }, { \"captures\": { \"1\": { \"name\": \"meta.mapping.key.hcl string.quoted.double.hcl\" }, \"2\": { \"name\": \"punctuation.definition.string.begin.hcl\" }, \"3\": { \"name\": \"punctuation.definition.string.end.hcl\" }, \"4\": { \"name\": \"keyword.operator.hcl\" } }, \"comment\": \"String object key\", \"match\": '^\\\\s*((\").*(\"))\\\\s*(=)\\\\s*' }, { \"begin\": \"^\\\\s*\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.section.parens.begin.hcl\" } }, \"comment\": \"Computed object key (any expression between parens)\", \"end\": \"(\\\\))\\\\s*(=|:)\\\\s*\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.parens.end.hcl\" }, \"2\": { \"name\": \"keyword.operator.hcl\" } }, \"name\": \"meta.mapping.key.hcl\", \"patterns\": [{ \"include\": \"#attribute_access\" }, { \"include\": \"#attribute_splat\" }] }, { \"include\": \"#object_key_values\" }] }, \"operators\": { \"patterns\": [{ \"match\": \">=\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"<=\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"==\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"!=\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\+\", \"name\": \"keyword.operator.arithmetic.hcl\" }, { \"match\": \"-\", \"name\": \"keyword.operator.arithmetic.hcl\" }, { \"match\": \"\\\\*\", \"name\": \"keyword.operator.arithmetic.hcl\" }, { \"match\": \"\\\\/\", \"name\": \"keyword.operator.arithmetic.hcl\" }, { \"match\": \"\\\\%\", \"name\": \"keyword.operator.arithmetic.hcl\" }, { \"match\": \"\\\\&\\\\&\", \"name\": \"keyword.operator.logical.hcl\" }, { \"match\": \"\\\\|\\\\|\", \"name\": \"keyword.operator.logical.hcl\" }, { \"match\": \"!\", \"name\": \"keyword.operator.logical.hcl\" }, { \"match\": \">\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"<\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\?\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\.\\\\.\\\\.\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \":\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"=>\", \"name\": \"keyword.operator.hcl\" }] }, \"parens\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.section.parens.begin.hcl\" } }, \"comment\": \"Parens - matched *after* function syntax\", \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.parens.end.hcl\" } }, \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#expressions\" }] }, \"string_interpolation\": { \"begin\": \"(?<![%$])([%$]{)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.interpolation.begin.hcl\" } }, \"comment\": \"String interpolation\", \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"keyword.other.interpolation.end.hcl\" } }, \"name\": \"meta.interpolation.hcl\", \"patterns\": [{ \"comment\": \"Trim left whitespace\", \"match\": \"\\\\~\\\\s\", \"name\": \"keyword.operator.template.left.trim.hcl\" }, { \"comment\": \"Trim right whitespace\", \"match\": \"\\\\s\\\\~\", \"name\": \"keyword.operator.template.right.trim.hcl\" }, { \"comment\": \"if/else/endif and for/in/endfor directives\", \"match\": \"\\\\b(if|else|endif|for|in|endfor)\\\\b\", \"name\": \"keyword.control.hcl\" }, { \"include\": \"#expressions\" }, { \"include\": \"#local_identifiers\" }] }, \"string_literals\": { \"begin\": '\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.hcl\" } }, \"comment\": \"Strings\", \"end\": '\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.hcl\" } }, \"name\": \"string.quoted.double.hcl\", \"patterns\": [{ \"include\": \"#string_interpolation\" }, { \"include\": \"#char_escapes\" }] }, \"tuple_for_expression\": { \"begin\": \"(\\\\[)\\\\s?(for)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.brackets.begin.hcl\" }, \"2\": { \"name\": \"keyword.control.hcl\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.brackets.end.hcl\" } }, \"patterns\": [{ \"include\": \"#for_expression_body\" }] } }, \"scopeName\": \"source.hcl\" });\nvar hcl = [\n  lang\n];\n\nexport { hcl as default };\n"],"names":["hcl","Object","freeze"],"sourceRoot":""}