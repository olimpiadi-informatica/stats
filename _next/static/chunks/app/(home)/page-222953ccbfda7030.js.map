{"version":3,"file":"static/chunks/app/(home)/page-222953ccbfda7030.js","mappings":"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","sources":["webpack://_N_E/?a75c","webpack://_N_E/./app/(home)/italy.tsx","webpack://_N_E/./app/(home)/contest.tsx","webpack://_N_E/./app/(home)/page-client.tsx","webpack://_N_E/./components/contest.tsx","webpack://_N_E/./components/image.tsx","webpack://_N_E/./components/medal.tsx","webpack://_N_E/./lib/utils.ts","webpack://_N_E/../static/regions/ABR.svg","webpack://_N_E/../static/regions/BAS.svg","webpack://_N_E/../static/regions/CAL.svg","webpack://_N_E/../static/regions/CAM.svg","webpack://_N_E/../static/regions/EMI.svg","webpack://_N_E/../static/regions/FRI.svg","webpack://_N_E/../static/regions/LAZ.svg","webpack://_N_E/../static/regions/LIG.svg","webpack://_N_E/../static/regions/LOM.svg","webpack://_N_E/../static/regions/MAR.svg","webpack://_N_E/../static/regions/MOL.svg","webpack://_N_E/../static/regions/PIE.svg","webpack://_N_E/../static/regions/PUG.svg","webpack://_N_E/../static/regions/SAR.svg","webpack://_N_E/../static/regions/SIC.svg","webpack://_N_E/../static/regions/TOS.svg","webpack://_N_E/../static/regions/TRE.svg","webpack://_N_E/../static/regions/UMB.svg","webpack://_N_E/../static/regions/VAL.svg","webpack://_N_E/../static/regions/VEN.svg"],"sourcesContent":["import(/* webpackMode: \"eager\", webpackExports: [\"ContestStatCard\"] */ \"/home/runner/work/stats/stats/frontend/app/(home)/contest.tsx\");\n;\nimport(/* webpackMode: \"eager\", webpackExports: [\"PageClient\"] */ \"/home/runner/work/stats/stats/frontend/app/(home)/page-client.tsx\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/frontend/node_modules/@olinfo/react-components/dist/index.js\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/frontend/node_modules/next/dist/client/link.js\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/ABR.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/BAS.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/CAL.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/CAM.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/EMI.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/FRI.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/LAZ.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/LIG.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/LOM.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/MAR.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/MOL.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/PIE.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/PUG.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/SAR.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/SIC.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/TOS.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/TRE.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/UMB.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/VAL.svg\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/stats/stats/static/regions/VEN.svg\");\n","\"use client\";\n\nimport type { ReactNode } from \"react\";\n\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\n\nimport italyRegions from \"./italy-regions.json\";\n\nexport function ItalyMap({ className, children }: { className?: string; children?: ReactNode }) {\n  return (\n    <ComposableMap\n      projectionConfig={{\n        scale: 1500,\n        center: [12.5, 41.7],\n      }}\n      width={300}\n      height={300}\n      className={className}>\n      <Geographies geography={italyRegions}>\n        {({ geographies }) =>\n          geographies.map((geo) => (\n            <Geography\n              key={geo.rsmKey}\n              geography={geo}\n              className=\"fill-base-100 stroke-base-content/30 outline-0\"\n            />\n          ))\n        }\n      </Geographies>\n      {children}\n    </ComposableMap>\n  );\n}\n","\"use client\";\n\nimport Link from \"next/link\";\nimport { Fragment } from \"react\";\n\nimport { Card, CardBody } from \"@olinfo/react-components\";\nimport { Annotation } from \"react-simple-maps\";\nimport {\n  Area,\n  AreaChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\n\nimport { ContestImage } from \"~/components/contest\";\nimport type { ContestStat } from \"~/lib/stats\";\n\nimport { ItalyMap } from \"./italy\";\n\nexport function ContestStatCard({ stat }: { stat: ContestStat }) {\n  if (\"contest_with_most_participants\" in stat) {\n    const contest = stat.contest_with_most_participants;\n    return (\n      <Card className=\"!flex-col\">\n        {contest.image && (\n          <ContestImage\n            year={contest.year}\n            image={contest.image}\n            className=\"mx-auto mt-4 w-52 rounded-box\"\n          />\n        )}\n        <CardBody title={`Edizione ${contest.year}`}>\n          <div>\n            Nel{\" \"}\n            <Link href={`/contest/${contest.year}`} className=\"link\">\n              {contest.year}\n            </Link>{\" \"}\n            ci sono stati {contest.num_participants} partecipanti, il maggior numero di sempre.\n          </div>\n        </CardBody>\n      </Card>\n    );\n  }\n\n  if (\"contest_with_most_ex_aequo\" in stat) {\n    const contest = stat.contest_with_most_ex_aequo;\n    return (\n      <Card className=\"!flex-col\">\n        {contest.image && (\n          <ContestImage\n            year={contest.year}\n            image={contest.image}\n            className=\"mx-auto mt-4 w-52 rounded-box\"\n          />\n        )}\n        <CardBody title={`Edizione ${contest.year}`}>\n          <div>\n            Nel{\" \"}\n            <Link href={`/contest/${contest.year}`} className=\"link\">\n              {contest.year}\n            </Link>{\" \"}\n            ci sono stati {contest.num_ex_aequo} vincitori a pari merito.\n          </div>\n        </CardBody>\n      </Card>\n    );\n  }\n\n  if (\"contest_with_most_girls\" in stat) {\n    const contest = stat.contest_with_most_girls;\n    return (\n      <Card className=\"!flex-col\">\n        {contest.image && (\n          <ContestImage\n            year={contest.year}\n            image={contest.image}\n            className=\"mx-auto mt-4 w-52 rounded-box\"\n          />\n        )}\n        <CardBody title={`Edizione ${contest.year}`}>\n          <div>\n            Il{\" \"}\n            <Link href={`/contest/${contest.year}`} className=\"link\">\n              {contest.year}\n            </Link>{\" \"}\n            è stato l'anno con la maggior percentuale di ragazze, {contest.num_girls} su{\" \"}\n            {contest.num_participants}.\n          </div>\n        </CardBody>\n      </Card>\n    );\n  }\n\n  if (\"most_northern_contest\" in stat) {\n    const contest = stat.most_northern_contest;\n    return (\n      <Card className=\"!flex-col\">\n        <ItalyMap className=\"mx-auto mt-4 max-h-64 max-w-64\">\n          <Annotation\n            subject={[contest.location.longitude!, contest.location.latitude!]}\n            curve={-0.5}\n            connectorProps={{ className: \"stroke-error stroke-2 [stroke-linecap:round]\" }}\n            markerEnd=\"url(#arrow)\">\n            <defs>\n              <marker id=\"arrow\" orient=\"auto\" markerWidth=\"3\" markerHeight=\"4\" refX=\"0.1\" refY=\"2\">\n                <path d=\"M0,0 V4 L2,2 Z\" className=\"fill-error\" />\n              </marker>\n            </defs>\n            <text\n              x={-20}\n              y={10}\n              textAnchor=\"start\"\n              alignmentBaseline=\"middle\"\n              className=\"fill-error text-sm\">\n              {contest.location.location}\n            </text>\n          </Annotation>\n        </ItalyMap>\n        <CardBody title={`Edizione ${contest.year}`}>\n          <div>\n            L'edizione più a nord è stata a {contest.location.location} nel{\" \"}\n            <Link href={`/contest/${contest.year}`} className=\"link\">\n              {contest.year}\n            </Link>\n            .\n          </div>\n        </CardBody>\n      </Card>\n    );\n  }\n\n  if (\"most_southern_contest\" in stat) {\n    const contest = stat.most_southern_contest;\n    return (\n      <Card className=\"!flex-col\">\n        <ItalyMap className=\"mx-auto mt-4 max-h-64 max-w-64\">\n          <Annotation\n            subject={[contest.location.longitude!, contest.location.latitude!]}\n            dx={-30}\n            dy={-30}\n            curve={-0.5}\n            connectorProps={{ className: \"stroke-error stroke-2 [stroke-linecap:round]\" }}\n            markerEnd=\"url(#arrow)\">\n            <defs>\n              <marker id=\"arrow\" orient=\"auto\" markerWidth=\"3\" markerHeight=\"4\" refX=\"0.1\" refY=\"2\">\n                <path d=\"M0,0 V4 L2,2 Z\" className=\"fill-error\" />\n              </marker>\n            </defs>\n            <text\n              x={20}\n              y={-10}\n              textAnchor=\"end\"\n              alignmentBaseline=\"middle\"\n              className=\"fill-error text-sm\">\n              {contest.location.location}\n            </text>\n          </Annotation>\n        </ItalyMap>\n        <CardBody title={`Edizione ${contest.year}`}>\n          <div>\n            L'edizione più a sud è stata a {contest.location.location} nel{\" \"}\n            <Link href={`/contest/${contest.year}`} className=\"link\">\n              {contest.year}\n            </Link>\n            .\n          </div>\n        </CardBody>\n      </Card>\n    );\n  }\n\n  if (\"most_used_location\" in stat) {\n    const { location, years } = stat.most_used_location;\n    return (\n      <Card className=\"!flex-col\">\n        <ItalyMap className=\"mx-auto mt-4 max-h-64 max-w-64\">\n          <Annotation\n            subject={[location.longitude!, location.latitude!]}\n            dx={30}\n            dy={30}\n            curve={-0.5}\n            connectorProps={{ className: \"stroke-error stroke-2 [stroke-linecap:round]\" }}\n            markerEnd=\"url(#arrow)\">\n            <defs>\n              <marker id=\"arrow\" orient=\"auto\" markerWidth=\"3\" markerHeight=\"4\" refX=\"0.1\" refY=\"2\">\n                <path d=\"M0,0 V4 L2,2 Z\" className=\"fill-error\" />\n              </marker>\n            </defs>\n            <text\n              x={-20}\n              y={10}\n              textAnchor=\"start\"\n              alignmentBaseline=\"middle\"\n              className=\"fill-error text-sm\">\n              {location.location}\n            </text>\n          </Annotation>\n        </ItalyMap>\n        <CardBody title={location.location}>\n          <div>\n            {location.location} ha ospitato le edizioni{\" \"}\n            {years.slice(0, -1).map((year) => (\n              <Fragment key={year}>\n                <Link href={`/contest/${year}`} className=\"link\">\n                  {year}\n                </Link>\n                ,{\" \"}\n              </Fragment>\n            ))}{\" \"}\n            e{\" \"}\n            <Link href={`/contest/${years.at(-1)}`} className=\"link\">\n              {years.at(-1)}\n            </Link>\n            .\n          </div>\n        </CardBody>\n      </Card>\n    );\n  }\n\n  if (\"num_boys_girls\" in stat) {\n    return (\n      <Card className=\"!flex-col\">\n        <CardBody title=\"Partecipanti per genere\">\n          <ResponsiveContainer height={300}>\n            <AreaChart\n              width={300}\n              height={350}\n              data={stat.num_boys_girls.years}\n              className=\"mx-auto\">\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"year\" />\n              <YAxis width={30} />\n              <Tooltip />\n              <Area\n                type=\"monotone\"\n                dataKey=\"num_boys\"\n                stackId=\"1\"\n                stroke=\"#7dd4fc\"\n                fill=\"#7dd4fc\"\n                name=\"Ragazzi\"\n              />\n              <Area\n                type=\"monotone\"\n                dataKey=\"num_girls\"\n                stackId=\"1\"\n                stroke=\"#f9a8d4\"\n                fill=\"#f9a8d4\"\n                name=\"Ragazze\"\n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        </CardBody>\n      </Card>\n    );\n  }\n\n  if (\"num_participants_per_year\" in stat) {\n    return (\n      <Card className=\"!flex-col\">\n        <CardBody title=\"Partecipanti per anno\">\n          <ResponsiveContainer height={300}>\n            <AreaChart data={stat.num_participants_per_year.years}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"year\" />\n              <YAxis width={30} />\n              <Tooltip />\n              <Area type=\"monotone\" dataKey=\"num_participants\" stackId=\"1\" name=\"Partecipanti\" />\n            </AreaChart>\n          </ResponsiveContainer>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n","\"use client\";\n\nimport { Children, Fragment, type ReactNode, useEffect, useState } from \"react\";\n\nexport function PageClient(props: {\n  regions: ReactNode;\n  users: ReactNode;\n  tasks: ReactNode;\n  contests: ReactNode;\n}) {\n  const [stats, setStats] = useState<ReactNode>();\n  useEffect(() => {\n    const regions = sample(Children.toArray(props.regions), 2);\n    const users = sample(Children.toArray(props.users), 2);\n    const tasks = sample(Children.toArray(props.tasks), 2);\n    const contests = sample(Children.toArray(props.contests), 2);\n\n    setStats(\n      shuffle(\n        [...regions, ...users, ...tasks, ...contests].map((stat, i) => (\n          <Fragment key={i}>{stat}</Fragment>\n        )),\n      ),\n    );\n  }, [props.contests, props.regions, props.tasks, props.users]);\n\n  return <div className=\"*:mb-4 md:columns-2 lg:columns-3\">{stats}</div>;\n}\n\nfunction shuffle<T>(array: T[]) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nfunction sample<T>(array: T[], n: number) {\n  return shuffle(array).slice(0, n);\n}\n","import type { StaticImageData } from \"next/image\";\n\nimport { Card, CardBody } from \"@olinfo/react-components\";\nimport clsx from \"clsx\";\n\nimport { Image } from \"~/components/image\";\nimport { Medals } from \"~/components/medal\";\nimport type { Contest } from \"~/lib/contests\";\nimport { round } from \"~/lib/utils\";\n\nexport function ContestCard({ contest }: { contest: Contest }) {\n  return (\n    <Card className=\"h-full\">\n      <ContestImage\n        year={contest.year}\n        image={contest.image}\n        className=\"w-52 flex-none max-sm:mx-auto max-sm:mt-4 max-sm:rounded-box sm:min-h-52\"\n      />\n      <CardBody title={`${contest.location.location ?? \"OII\"} ${contest.year}`}>\n        <div>\n          <span className=\"font-semibold\">Partecipanti:</span> {contest.num_contestants ?? \"N/A\"}\n        </div>\n        <div>\n          <span className=\"font-semibold\">Punteggio massimo ottenuto:</span>{\" \"}\n          {contest.max_score ?? \"N/A\"}\n        </div>\n        <div>\n          <span className=\"font-semibold\">Punteggio medio:</span> {round(contest.avg_score)}\n        </div>\n        <div className=\"mt-2\">\n          <Medals\n            gold={contest.medals.gold.count}\n            silver={contest.medals.silver.count}\n            bronze={contest.medals.bronze.count}\n          />\n        </div>\n      </CardBody>\n    </Card>\n  );\n}\n\nexport function ContestImage({\n  year,\n  image,\n  className,\n}: {\n  year: string | number;\n  image: StaticImageData | null;\n  className?: string;\n}) {\n  return image ? (\n    <Image\n      src={image}\n      alt={`Logo OII ${year}`}\n      className={clsx(\"bg-white p-4 sm:object-contain\", className)}\n    />\n  ) : (\n    <div\n      className={clsx(\n        \"flex aspect-square items-center justify-center bg-neutral p-4 text-center text-5xl font-bold text-neutral-content\",\n        className,\n      )}>\n      OII {year}\n    </div>\n  );\n}\n","import type { StaticImageData } from \"next/image\";\n\ntype Props = {\n  src: StaticImageData & { srcSet?: string };\n  alt: string;\n  className?: string;\n};\n\nexport function Image({ src, alt, className }: Props) {\n  return (\n    <img\n      src={src.src}\n      srcSet={src.srcSet}\n      width={src.width}\n      height={src.height}\n      alt={alt}\n      loading=\"lazy\"\n      className={className}\n    />\n  );\n}\n","import type { ReactNode } from \"react\";\n\nimport clsx from \"clsx\";\nimport { MedalIcon } from \"lucide-react\";\n\ntype MedalsProps = {\n  gold: ReactNode;\n  silver: ReactNode;\n  bronze: ReactNode;\n};\n\nexport function Medals({ gold, silver, bronze }: MedalsProps) {\n  return (\n    <div className=\"flex justify-center gap-4\">\n      <Medal type=\"gold\">{gold}</Medal>\n      <Medal type=\"silver\">{silver}</Medal>\n      <Medal type=\"bronze\">{bronze}</Medal>\n    </div>\n  );\n}\n\ntype MedalProps = {\n  type: string | null;\n  children: ReactNode;\n};\n\nexport function Medal({ type, children }: MedalProps) {\n  return (\n    <span>\n      <MedalIcon className={clsx(\"inline-block last:*:hidden\", color(type))} />\n      <span className=\"mx-1.5 inline-block\">{children ?? \"N/A\"}</span>\n    </span>\n  );\n}\n\nfunction color(type: string | null) {\n  switch (type) {\n    case \"gold\":\n      return \"stroke-amber-400\";\n    case \"silver\":\n      return \"stroke-gray-400\";\n    case \"bronze\":\n      return \"stroke-amber-600\";\n    default:\n      return \"hidden\";\n  }\n}\n","export function round(value: number | null) {\n  return value === null ? \"N/A\" : Math.round(value * 10) / 10;\n}\n","export default {\"src\":\"/_next/static/media/ABR.24e18527.svg\",\"width\":314,\"height\":472};","export default {\"src\":\"/_next/static/media/BAS.557d99ed.svg\",\"width\":280,\"height\":356};","export default {\"src\":\"/_next/static/media/CAL.641add52.svg\",\"width\":595,\"height\":653};","export default {\"src\":\"/_next/static/media/CAM.c6c29155.svg\",\"width\":224,\"height\":280};","export default {\"src\":\"/_next/static/media/EMI.cfe59fb5.svg\",\"width\":310,\"height\":310};","export default {\"src\":\"/_next/static/media/FRI.e56ffaed.svg\",\"width\":280,\"height\":380};","export default {\"src\":\"/_next/static/media/LAZ.a7d49e02.svg\",\"width\":559,\"height\":559};","export default {\"src\":\"/_next/static/media/LIG.23b3fa46.svg\",\"width\":250,\"height\":310};","export default {\"src\":\"/_next/static/media/LOM.d4670a05.svg\",\"width\":600,\"height\":600};","export default {\"src\":\"/_next/static/media/MAR.7dfb0ac9.svg\",\"width\":205,\"height\":252};","export default {\"src\":\"/_next/static/media/MOL.16e74a9e.svg\",\"width\":237,\"height\":254};","export default {\"src\":\"/_next/static/media/PIE.9dce0135.svg\",\"width\":650,\"height\":650};","export default {\"src\":\"/_next/static/media/PUG.09f79732.svg\",\"width\":299,\"height\":500};","export default {\"src\":\"/_next/static/media/SAR.a6a2e67a.svg\",\"width\":643,\"height\":853};","export default {\"src\":\"/_next/static/media/SIC.7d78a184.svg\",\"width\":530,\"height\":689};","export default {\"src\":\"/_next/static/media/TOS.2ad415b9.svg\",\"width\":94,\"height\":108};","export default {\"src\":\"/_next/static/media/TRE.ed82758d.svg\",\"width\":500,\"height\":625};","export default {\"src\":\"/_next/static/media/UMB.6cd8cd8b.svg\",\"width\":193,\"height\":293};","export default {\"src\":\"/_next/static/media/VAL.b055cb53.svg\",\"width\":287,\"height\":500};","export default {\"src\":\"/_next/static/media/VEN.a85974f5.svg\",\"width\":512,\"height\":544};"],"names":["Promise","resolve","then","__webpack_require__","bind","t","ItalyMap","param","className","children","jsx_runtime","jsxs","ComposableMap","projectionConfig","scale","center","width","height","jsx","Geographies","geography","italyRegions","geographies","map","Geography","geo","rsmKey","ContestStatCard","stat","contest","contest_with_most_participants","Card","image","ContestImage","year","CardBody","title","concat","div","Link","href","num_participants","contest_with_most_ex_aequo","num_ex_aequo","contest_with_most_girls","num_girls","most_northern_contest","Annotation","subject","location","longitude","latitude","curve","connectorProps","markerEnd","defs","marker","id","orient","markerWidth","markerHeight","refX","refY","path","d","text","x","y","textAnchor","alignmentBaseline","most_southern_contest","dx","dy","years","most_used_location","slice","Fragment","at","ResponsiveContainer","AreaChart","data","num_boys_girls","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Area","type","stackId","stroke","fill","name","num_participants_per_year","PageClient","props","stats","setStats","useState","useEffect","regions","sample","Children","toArray","shuffle","users","tasks","contests","i","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","array","length","j","Math","floor","random","n","ContestCard","span","num_contestants","max_score","round","avg_score","Medals","gold","medals","count","silver","bronze","Image","src","alt","clsx","img","srcSet","loading","Medal","MedalIcon","color","value","__WEBPACK_DEFAULT_EXPORT__"],"sourceRoot":""}